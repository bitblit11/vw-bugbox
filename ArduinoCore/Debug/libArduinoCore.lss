In archive libArduinoCore.a:

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000043  2**0
                  ALLOC
  3 .stab         00000570  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ce9  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000043  2**0
                  ALLOC
  3 .stab         00000570  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ce9  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a96  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000002f  00000000  00000000  00000aca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          000000a7  00000000  00000000  00000af9  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00000afc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000013bc  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .ctors        00000002  00000000  00000000  00002c50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN5PrintC2Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN5PrintC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	20 e0       	ldi	r18, 0x00	; 0
  14:	30 e0       	ldi	r19, 0x00	; 0
  16:	fc 01       	movw	r30, r24
  18:	31 83       	std	Z+1, r19	; 0x01
  1a:	20 83       	st	Z, r18
  1c:	89 81       	ldd	r24, Y+1	; 0x01
  1e:	9a 81       	ldd	r25, Y+2	; 0x02
  20:	fc 01       	movw	r30, r24
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	cf 91       	pop	r28
  2c:	df 91       	pop	r29
  2e:	08 95       	ret

00000030 <_ZN6StreamC2Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  30:	df 93       	push	r29
  32:	cf 93       	push	r28
  34:	00 d0       	rcall	.+0      	; 0x36 <_ZN6StreamC2Ev+0x6>
  36:	cd b7       	in	r28, 0x3d	; 61
  38:	de b7       	in	r29, 0x3e	; 62
  3a:	9a 83       	std	Y+2, r25	; 0x02
  3c:	89 83       	std	Y+1, r24	; 0x01
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  46:	89 81       	ldd	r24, Y+1	; 0x01
  48:	9a 81       	ldd	r25, Y+2	; 0x02
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	fc 01       	movw	r30, r24
  50:	31 83       	std	Z+1, r19	; 0x01
  52:	20 83       	st	Z, r18
  54:	29 81       	ldd	r18, Y+1	; 0x01
  56:	3a 81       	ldd	r19, Y+2	; 0x02
  58:	88 ee       	ldi	r24, 0xE8	; 232
  5a:	93 e0       	ldi	r25, 0x03	; 3
  5c:	a0 e0       	ldi	r26, 0x00	; 0
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	f9 01       	movw	r30, r18
  62:	84 83       	std	Z+4, r24	; 0x04
  64:	95 83       	std	Z+5, r25	; 0x05
  66:	a6 83       	std	Z+6, r26	; 0x06
  68:	b7 83       	std	Z+7, r27	; 0x07
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	cf 91       	pop	r28
  70:	df 91       	pop	r29
  72:	08 95       	ret

00000074 <_Z10store_charhP11ring_buffer>:
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  74:	df 93       	push	r29
  76:	cf 93       	push	r28
  78:	00 d0       	rcall	.+0      	; 0x7a <_Z10store_charhP11ring_buffer+0x6>
  7a:	00 d0       	rcall	.+0      	; 0x7c <_Z10store_charhP11ring_buffer+0x8>
  7c:	0f 92       	push	r0
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
  82:	8b 83       	std	Y+3, r24	; 0x03
  84:	7d 83       	std	Y+5, r23	; 0x05
  86:	6c 83       	std	Y+4, r22	; 0x04
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	9d 81       	ldd	r25, Y+5	; 0x05
  8c:	80 5c       	subi	r24, 0xC0	; 192
  8e:	9f 4f       	sbci	r25, 0xFF	; 255
  90:	fc 01       	movw	r30, r24
  92:	80 81       	ld	r24, Z
  94:	91 81       	ldd	r25, Z+1	; 0x01
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	8f 73       	andi	r24, 0x3F	; 63
  9a:	90 70       	andi	r25, 0x00	; 0
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	8e 5b       	subi	r24, 0xBE	; 190
  a6:	9f 4f       	sbci	r25, 0xFF	; 255
  a8:	fc 01       	movw	r30, r24
  aa:	20 81       	ld	r18, Z
  ac:	31 81       	ldd	r19, Z+1	; 0x01
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	9a 81       	ldd	r25, Y+2	; 0x02
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	01 f4       	brne	.+0      	; 0xba <_Z10store_charhP11ring_buffer+0x46>
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	44 23       	and	r20, r20
  be:	01 f0       	breq	.+0      	; 0xc0 <_Z10store_charhP11ring_buffer+0x4c>
    buffer->buffer[buffer->head] = c;
  c0:	8c 81       	ldd	r24, Y+4	; 0x04
  c2:	9d 81       	ldd	r25, Y+5	; 0x05
  c4:	80 5c       	subi	r24, 0xC0	; 192
  c6:	9f 4f       	sbci	r25, 0xFF	; 255
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	91 81       	ldd	r25, Z+1	; 0x01
  ce:	2c 81       	ldd	r18, Y+4	; 0x04
  d0:	3d 81       	ldd	r19, Y+5	; 0x05
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	2b 81       	ldd	r18, Y+3	; 0x03
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
    buffer->head = i;
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	9d 81       	ldd	r25, Y+5	; 0x05
  e0:	80 5c       	subi	r24, 0xC0	; 192
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	29 81       	ldd	r18, Y+1	; 0x01
  e6:	3a 81       	ldd	r19, Y+2	; 0x02
  e8:	fc 01       	movw	r30, r24
  ea:	31 83       	std	Z+1, r19	; 0x01
  ec:	20 83       	st	Z, r18
  }
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

000000fe <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
  #if defined(UDR0)
    unsigned char c  =  UDR0;
 138:	86 ec       	ldi	r24, 0xC6	; 198
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	89 83       	std	Y+1, r24	; 0x01
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	b9 01       	movw	r22, r18
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  }
 14e:	0f 90       	pop	r0
 150:	cf 91       	pop	r28
 152:	df 91       	pop	r29
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <_Z14serialEventRunv>:
#elif defined(SIG_USART3_RECV)
  #error SIG_USART3_RECV
#endif

void serialEventRun(void)
{
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	01 f4       	brne	.+0      	; 0x18c <_Z14serialEventRunv+0x16>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	22 23       	and	r18, r18
 190:	01 f0       	breq	.+0      	; 0x192 <_Z14serialEventRunv+0x1c>
 192:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
  if (Serial2.available()) serialEvent2();
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
#endif
}
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
 1be:	df 93       	push	r29
 1c0:	cf 93       	push	r28
 1c2:	0f 92       	push	r0
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
  if (tx_buffer.head == tx_buffer.tail) {
 1c8:	20 91 00 00 	lds	r18, 0x0000
 1cc:	30 91 00 00 	lds	r19, 0x0000
 1d0:	80 91 00 00 	lds	r24, 0x0000
 1d4:	90 91 00 00 	lds	r25, 0x0000
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	28 17       	cp	r18, r24
 1dc:	39 07       	cpc	r19, r25
 1de:	01 f0       	breq	.+0      	; 0x1e0 <__vector_19+0x44>
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	44 23       	and	r20, r20
 1e4:	01 f0       	breq	.+0      	; 0x1e6 <__vector_19+0x4a>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 1e6:	81 ec       	ldi	r24, 0xC1	; 193
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	21 ec       	ldi	r18, 0xC1	; 193
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	f9 01       	movw	r30, r18
 1f0:	20 81       	ld	r18, Z
 1f2:	2f 7d       	andi	r18, 0xDF	; 223
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <__vector_19+0x5e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 1fa:	80 91 00 00 	lds	r24, 0x0000
 1fe:	90 91 00 00 	lds	r25, 0x0000
 202:	80 50       	subi	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	80 81       	ld	r24, Z
 20a:	89 83       	std	Y+1, r24	; 0x01
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 20c:	80 91 00 00 	lds	r24, 0x0000
 210:	90 91 00 00 	lds	r25, 0x0000
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	20 e4       	ldi	r18, 0x40	; 64
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 220:	90 93 00 00 	sts	0x0000, r25
 224:	80 93 00 00 	sts	0x0000, r24
	
  #if defined(UDR0)
    UDR0 = c;
 228:	86 ec       	ldi	r24, 0xC6	; 198
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	29 81       	ldd	r18, Y+1	; 0x01
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 232:	0f 90       	pop	r0
 234:	cf 91       	pop	r28
 236:	df 91       	pop	r29
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
 25a:	8f 92       	push	r8
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	61 97       	sbiw	r28, 0x11	; 17
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	9a 83       	std	Y+2, r25	; 0x02
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	7c 83       	std	Y+4, r23	; 0x04
 286:	6b 83       	std	Y+3, r22	; 0x03
 288:	5e 83       	std	Y+6, r21	; 0x06
 28a:	4d 83       	std	Y+5, r20	; 0x05
 28c:	38 87       	std	Y+8, r19	; 0x08
 28e:	2f 83       	std	Y+7, r18	; 0x07
 290:	1a 87       	std	Y+10, r17	; 0x0a
 292:	09 87       	std	Y+9, r16	; 0x09
 294:	fc 86       	std	Y+12, r15	; 0x0c
 296:	eb 86       	std	Y+11, r14	; 0x0b
 298:	de 86       	std	Y+14, r13	; 0x0e
 29a:	cd 86       	std	Y+13, r12	; 0x0d
 29c:	b8 8a       	std	Y+16, r11	; 0x10
 29e:	af 86       	std	Y+15, r10	; 0x0f
 2a0:	89 8a       	std	Y+17, r8	; 0x11
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	9a 81       	ldd	r25, Y+2	; 0x02
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	31 83       	std	Z+1, r19	; 0x01
 2b6:	20 83       	st	Z, r18
{
  _rx_buffer = rx_buffer;
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	9a 81       	ldd	r25, Y+2	; 0x02
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	3c 81       	ldd	r19, Y+4	; 0x04
 2c0:	fc 01       	movw	r30, r24
 2c2:	35 87       	std	Z+13, r19	; 0x0d
 2c4:	24 87       	std	Z+12, r18	; 0x0c
  _tx_buffer = tx_buffer;
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ca:	2d 81       	ldd	r18, Y+5	; 0x05
 2cc:	3e 81       	ldd	r19, Y+6	; 0x06
 2ce:	fc 01       	movw	r30, r24
 2d0:	37 87       	std	Z+15, r19	; 0x0f
 2d2:	26 87       	std	Z+14, r18	; 0x0e
  _ubrrh = ubrrh;
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	9a 81       	ldd	r25, Y+2	; 0x02
 2d8:	2f 81       	ldd	r18, Y+7	; 0x07
 2da:	38 85       	ldd	r19, Y+8	; 0x08
 2dc:	fc 01       	movw	r30, r24
 2de:	31 8b       	std	Z+17, r19	; 0x11
 2e0:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	29 85       	ldd	r18, Y+9	; 0x09
 2e8:	3a 85       	ldd	r19, Y+10	; 0x0a
 2ea:	fc 01       	movw	r30, r24
 2ec:	33 8b       	std	Z+19, r19	; 0x13
 2ee:	22 8b       	std	Z+18, r18	; 0x12
  _ucsra = ucsra;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	2b 85       	ldd	r18, Y+11	; 0x0b
 2f6:	3c 85       	ldd	r19, Y+12	; 0x0c
 2f8:	fc 01       	movw	r30, r24
 2fa:	35 8b       	std	Z+21, r19	; 0x15
 2fc:	24 8b       	std	Z+20, r18	; 0x14
  _ucsrb = ucsrb;
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	9a 81       	ldd	r25, Y+2	; 0x02
 302:	2d 85       	ldd	r18, Y+13	; 0x0d
 304:	3e 85       	ldd	r19, Y+14	; 0x0e
 306:	fc 01       	movw	r30, r24
 308:	37 8b       	std	Z+23, r19	; 0x17
 30a:	26 8b       	std	Z+22, r18	; 0x16
  _udr = udr;
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	2f 85       	ldd	r18, Y+15	; 0x0f
 312:	38 89       	ldd	r19, Y+16	; 0x10
 314:	fc 01       	movw	r30, r24
 316:	31 8f       	std	Z+25, r19	; 0x19
 318:	20 8f       	std	Z+24, r18	; 0x18
  _rxen = rxen;
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	9a 81       	ldd	r25, Y+2	; 0x02
 31e:	29 89       	ldd	r18, Y+17	; 0x11
 320:	fc 01       	movw	r30, r24
 322:	22 8f       	std	Z+26, r18	; 0x1a
  _txen = txen;
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	9a 81       	ldd	r25, Y+2	; 0x02
 328:	2f 8d       	ldd	r18, Y+31	; 0x1f
 32a:	fc 01       	movw	r30, r24
 32c:	23 8f       	std	Z+27, r18	; 0x1b
  _rxcie = rxcie;
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	28 a1       	ldd	r18, Y+32	; 0x20
 334:	fc 01       	movw	r30, r24
 336:	24 8f       	std	Z+28, r18	; 0x1c
  _udrie = udrie;
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	9a 81       	ldd	r25, Y+2	; 0x02
 33c:	29 a1       	ldd	r18, Y+33	; 0x21
 33e:	fc 01       	movw	r30, r24
 340:	25 8f       	std	Z+29, r18	; 0x1d
  _u2x = u2x;
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	2a a1       	ldd	r18, Y+34	; 0x22
 348:	fc 01       	movw	r30, r24
 34a:	26 8f       	std	Z+30, r18	; 0x1e
}
 34c:	61 96       	adiw	r28, 0x11	; 17
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	bf 90       	pop	r11
 36a:	af 90       	pop	r10
 36c:	8f 90       	pop	r8
 36e:	08 95       	ret

00000370 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
 370:	df 93       	push	r29
 372:	cf 93       	push	r28
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	29 97       	sbiw	r28, 0x09	; 9
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
 384:	9d 83       	std	Y+5, r25	; 0x05
 386:	8c 83       	std	Y+4, r24	; 0x04
 388:	4e 83       	std	Y+6, r20	; 0x06
 38a:	5f 83       	std	Y+7, r21	; 0x07
 38c:	68 87       	std	Y+8, r22	; 0x08
 38e:	79 87       	std	Y+9, r23	; 0x09
  uint16_t baud_setting;
  bool use_u2x = true;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	8b 83       	std	Y+3, r24	; 0x03

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
 394:	8e 81       	ldd	r24, Y+6	; 0x06
 396:	9f 81       	ldd	r25, Y+7	; 0x07
 398:	a8 85       	ldd	r26, Y+8	; 0x08
 39a:	b9 85       	ldd	r27, Y+9	; 0x09
 39c:	80 30       	cpi	r24, 0x00	; 0
 39e:	21 ee       	ldi	r18, 0xE1	; 225
 3a0:	92 07       	cpc	r25, r18
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	a2 07       	cpc	r26, r18
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	b2 07       	cpc	r27, r18
 3aa:	01 f4       	brne	.+0      	; 0x3ac <_ZN14HardwareSerial5beginEm+0x3c>
    use_u2x = false;
 3ac:	1b 82       	std	Y+3, r1	; 0x03
  }
#endif

try_again:
  
  if (use_u2x) {
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	88 23       	and	r24, r24
 3b2:	01 f0       	breq	.+0      	; 0x3b4 <_ZN14HardwareSerial5beginEm+0x44>
    *_ucsra = 1 << _u2x;
 3b4:	8c 81       	ldd	r24, Y+4	; 0x04
 3b6:	9d 81       	ldd	r25, Y+5	; 0x05
 3b8:	fc 01       	movw	r30, r24
 3ba:	84 89       	ldd	r24, Z+20	; 0x14
 3bc:	95 89       	ldd	r25, Z+21	; 0x15
 3be:	2c 81       	ldd	r18, Y+4	; 0x04
 3c0:	3d 81       	ldd	r19, Y+5	; 0x05
 3c2:	f9 01       	movw	r30, r18
 3c4:	26 8d       	ldd	r18, Z+30	; 0x1e
 3c6:	42 2f       	mov	r20, r18
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <_ZN14HardwareSerial5beginEm+0x60>
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	4a 95       	dec	r20
 3d6:	02 f4       	brpl	.+0      	; 0x3d8 <_ZN14HardwareSerial5beginEm+0x68>
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	99 e0       	ldi	r25, 0x09	; 9
 3e0:	ad e3       	ldi	r26, 0x3D	; 61
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	2e 81       	ldd	r18, Y+6	; 0x06
 3e6:	3f 81       	ldd	r19, Y+7	; 0x07
 3e8:	48 85       	ldd	r20, Y+8	; 0x08
 3ea:	59 85       	ldd	r21, Y+9	; 0x09
 3ec:	bc 01       	movw	r22, r24
 3ee:	cd 01       	movw	r24, r26
 3f0:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 3f4:	da 01       	movw	r26, r20
 3f6:	c9 01       	movw	r24, r18
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	a1 09       	sbc	r26, r1
 3fc:	b1 09       	sbc	r27, r1
 3fe:	b6 95       	lsr	r27
 400:	a7 95       	ror	r26
 402:	97 95       	ror	r25
 404:	87 95       	ror	r24
 406:	9a 83       	std	Y+2, r25	; 0x02
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	00 c0       	rjmp	.+0      	; 0x40c <_ZN14HardwareSerial5beginEm+0x9c>
  } else {
    *_ucsra = 0;
 40c:	8c 81       	ldd	r24, Y+4	; 0x04
 40e:	9d 81       	ldd	r25, Y+5	; 0x05
 410:	fc 01       	movw	r30, r24
 412:	84 89       	ldd	r24, Z+20	; 0x14
 414:	95 89       	ldd	r25, Z+21	; 0x15
 416:	fc 01       	movw	r30, r24
 418:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	94 e8       	ldi	r25, 0x84	; 132
 41e:	ae e1       	ldi	r26, 0x1E	; 30
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	2e 81       	ldd	r18, Y+6	; 0x06
 424:	3f 81       	ldd	r19, Y+7	; 0x07
 426:	48 85       	ldd	r20, Y+8	; 0x08
 428:	59 85       	ldd	r21, Y+9	; 0x09
 42a:	bc 01       	movw	r22, r24
 42c:	cd 01       	movw	r24, r26
 42e:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 432:	da 01       	movw	r26, r20
 434:	c9 01       	movw	r24, r18
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	a1 09       	sbc	r26, r1
 43a:	b1 09       	sbc	r27, r1
 43c:	b6 95       	lsr	r27
 43e:	a7 95       	ror	r26
 440:	97 95       	ror	r25
 442:	87 95       	ror	r24
 444:	9a 83       	std	Y+2, r25	; 0x02
 446:	89 83       	std	Y+1, r24	; 0x01
  }
  
  if ((baud_setting > 4095) && use_u2x)
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	9a 81       	ldd	r25, Y+2	; 0x02
 44c:	f0 e1       	ldi	r31, 0x10	; 16
 44e:	80 30       	cpi	r24, 0x00	; 0
 450:	9f 07       	cpc	r25, r31
 452:	00 f0       	brcs	.+0      	; 0x454 <_ZN14HardwareSerial5beginEm+0xe4>
 454:	8b 81       	ldd	r24, Y+3	; 0x03
 456:	88 23       	and	r24, r24
 458:	01 f0       	breq	.+0      	; 0x45a <_ZN14HardwareSerial5beginEm+0xea>
  {
    use_u2x = false;
 45a:	1b 82       	std	Y+3, r1	; 0x03
    goto try_again;
 45c:	00 c0       	rjmp	.+0      	; 0x45e <_ZN14HardwareSerial5beginEm+0xee>
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 45e:	8c 81       	ldd	r24, Y+4	; 0x04
 460:	9d 81       	ldd	r25, Y+5	; 0x05
 462:	fc 01       	movw	r30, r24
 464:	80 89       	ldd	r24, Z+16	; 0x10
 466:	91 89       	ldd	r25, Z+17	; 0x11
 468:	29 81       	ldd	r18, Y+1	; 0x01
 46a:	3a 81       	ldd	r19, Y+2	; 0x02
 46c:	23 2f       	mov	r18, r19
 46e:	33 27       	eor	r19, r19
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
  *_ubrrl = baud_setting;
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	9d 81       	ldd	r25, Y+5	; 0x05
 478:	fc 01       	movw	r30, r24
 47a:	82 89       	ldd	r24, Z+18	; 0x12
 47c:	93 89       	ldd	r25, Z+19	; 0x13
 47e:	29 81       	ldd	r18, Y+1	; 0x01
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
 484:	8c 81       	ldd	r24, Y+4	; 0x04
 486:	9d 81       	ldd	r25, Y+5	; 0x05
 488:	fc 01       	movw	r30, r24
 48a:	86 89       	ldd	r24, Z+22	; 0x16
 48c:	97 89       	ldd	r25, Z+23	; 0x17
 48e:	2c 81       	ldd	r18, Y+4	; 0x04
 490:	3d 81       	ldd	r19, Y+5	; 0x05
 492:	f9 01       	movw	r30, r18
 494:	26 89       	ldd	r18, Z+22	; 0x16
 496:	37 89       	ldd	r19, Z+23	; 0x17
 498:	f9 01       	movw	r30, r18
 49a:	20 81       	ld	r18, Z
 49c:	62 2f       	mov	r22, r18
 49e:	2c 81       	ldd	r18, Y+4	; 0x04
 4a0:	3d 81       	ldd	r19, Y+5	; 0x05
 4a2:	f9 01       	movw	r30, r18
 4a4:	22 8d       	ldd	r18, Z+26	; 0x1a
 4a6:	42 2f       	mov	r20, r18
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <_ZN14HardwareSerial5beginEm+0x140>
 4b0:	22 0f       	add	r18, r18
 4b2:	33 1f       	adc	r19, r19
 4b4:	4a 95       	dec	r20
 4b6:	02 f4       	brpl	.+0      	; 0x4b8 <_ZN14HardwareSerial5beginEm+0x148>
 4b8:	26 2b       	or	r18, r22
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
 4be:	8c 81       	ldd	r24, Y+4	; 0x04
 4c0:	9d 81       	ldd	r25, Y+5	; 0x05
 4c2:	fc 01       	movw	r30, r24
 4c4:	86 89       	ldd	r24, Z+22	; 0x16
 4c6:	97 89       	ldd	r25, Z+23	; 0x17
 4c8:	2c 81       	ldd	r18, Y+4	; 0x04
 4ca:	3d 81       	ldd	r19, Y+5	; 0x05
 4cc:	f9 01       	movw	r30, r18
 4ce:	26 89       	ldd	r18, Z+22	; 0x16
 4d0:	37 89       	ldd	r19, Z+23	; 0x17
 4d2:	f9 01       	movw	r30, r18
 4d4:	20 81       	ld	r18, Z
 4d6:	62 2f       	mov	r22, r18
 4d8:	2c 81       	ldd	r18, Y+4	; 0x04
 4da:	3d 81       	ldd	r19, Y+5	; 0x05
 4dc:	f9 01       	movw	r30, r18
 4de:	23 8d       	ldd	r18, Z+27	; 0x1b
 4e0:	42 2f       	mov	r20, r18
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <_ZN14HardwareSerial5beginEm+0x17a>
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	4a 95       	dec	r20
 4f0:	02 f4       	brpl	.+0      	; 0x4f2 <_ZN14HardwareSerial5beginEm+0x182>
 4f2:	26 2b       	or	r18, r22
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
 4f8:	8c 81       	ldd	r24, Y+4	; 0x04
 4fa:	9d 81       	ldd	r25, Y+5	; 0x05
 4fc:	fc 01       	movw	r30, r24
 4fe:	86 89       	ldd	r24, Z+22	; 0x16
 500:	97 89       	ldd	r25, Z+23	; 0x17
 502:	2c 81       	ldd	r18, Y+4	; 0x04
 504:	3d 81       	ldd	r19, Y+5	; 0x05
 506:	f9 01       	movw	r30, r18
 508:	26 89       	ldd	r18, Z+22	; 0x16
 50a:	37 89       	ldd	r19, Z+23	; 0x17
 50c:	f9 01       	movw	r30, r18
 50e:	20 81       	ld	r18, Z
 510:	62 2f       	mov	r22, r18
 512:	2c 81       	ldd	r18, Y+4	; 0x04
 514:	3d 81       	ldd	r19, Y+5	; 0x05
 516:	f9 01       	movw	r30, r18
 518:	24 8d       	ldd	r18, Z+28	; 0x1c
 51a:	42 2f       	mov	r20, r18
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	21 e0       	ldi	r18, 0x01	; 1
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	00 c0       	rjmp	.+0      	; 0x524 <_ZN14HardwareSerial5beginEm+0x1b4>
 524:	22 0f       	add	r18, r18
 526:	33 1f       	adc	r19, r19
 528:	4a 95       	dec	r20
 52a:	02 f4       	brpl	.+0      	; 0x52c <_ZN14HardwareSerial5beginEm+0x1bc>
 52c:	26 2b       	or	r18, r22
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
  cbi(*_ucsrb, _udrie);
 532:	8c 81       	ldd	r24, Y+4	; 0x04
 534:	9d 81       	ldd	r25, Y+5	; 0x05
 536:	fc 01       	movw	r30, r24
 538:	86 89       	ldd	r24, Z+22	; 0x16
 53a:	97 89       	ldd	r25, Z+23	; 0x17
 53c:	2c 81       	ldd	r18, Y+4	; 0x04
 53e:	3d 81       	ldd	r19, Y+5	; 0x05
 540:	f9 01       	movw	r30, r18
 542:	26 89       	ldd	r18, Z+22	; 0x16
 544:	37 89       	ldd	r19, Z+23	; 0x17
 546:	f9 01       	movw	r30, r18
 548:	20 81       	ld	r18, Z
 54a:	62 2f       	mov	r22, r18
 54c:	2c 81       	ldd	r18, Y+4	; 0x04
 54e:	3d 81       	ldd	r19, Y+5	; 0x05
 550:	f9 01       	movw	r30, r18
 552:	25 8d       	ldd	r18, Z+29	; 0x1d
 554:	42 2f       	mov	r20, r18
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	04 2e       	mov	r0, r20
 55e:	00 c0       	rjmp	.+0      	; 0x560 <_ZN14HardwareSerial5beginEm+0x1f0>
 560:	22 0f       	add	r18, r18
 562:	33 1f       	adc	r19, r19
 564:	0a 94       	dec	r0
 566:	02 f4       	brpl	.+0      	; 0x568 <_ZN14HardwareSerial5beginEm+0x1f8>
 568:	20 95       	com	r18
 56a:	26 23       	and	r18, r22
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
}
 570:	29 96       	adiw	r28, 0x09	; 9
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	de bf       	out	0x3e, r29	; 62
 578:	0f be       	out	0x3f, r0	; 63
 57a:	cd bf       	out	0x3d, r28	; 61
 57c:	cf 91       	pop	r28
 57e:	df 91       	pop	r29
 580:	08 95       	ret

00000582 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
 582:	df 93       	push	r29
 584:	cf 93       	push	r28
 586:	00 d0       	rcall	.+0      	; 0x588 <_ZN14HardwareSerial3endEv+0x6>
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	9a 83       	std	Y+2, r25	; 0x02
 58e:	89 83       	std	Y+1, r24	; 0x01
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	9a 81       	ldd	r25, Y+2	; 0x02
 594:	fc 01       	movw	r30, r24
 596:	86 85       	ldd	r24, Z+14	; 0x0e
 598:	97 85       	ldd	r25, Z+15	; 0x0f
 59a:	80 5c       	subi	r24, 0xC0	; 192
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	fc 01       	movw	r30, r24
 5a0:	20 81       	ld	r18, Z
 5a2:	31 81       	ldd	r19, Z+1	; 0x01
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	9a 81       	ldd	r25, Y+2	; 0x02
 5a8:	fc 01       	movw	r30, r24
 5aa:	86 85       	ldd	r24, Z+14	; 0x0e
 5ac:	97 85       	ldd	r25, Z+15	; 0x0f
 5ae:	8e 5b       	subi	r24, 0xBE	; 190
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	fc 01       	movw	r30, r24
 5b4:	80 81       	ld	r24, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	28 17       	cp	r18, r24
 5bc:	39 07       	cpc	r19, r25
 5be:	01 f4       	brne	.+0      	; 0x5c0 <_ZN14HardwareSerial3endEv+0x3e>
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	44 23       	and	r20, r20
 5c4:	01 f4       	brne	.+0      	; 0x5c6 <_ZN14HardwareSerial3endEv+0x44>
    ;

  cbi(*_ucsrb, _rxen);
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ca:	fc 01       	movw	r30, r24
 5cc:	86 89       	ldd	r24, Z+22	; 0x16
 5ce:	97 89       	ldd	r25, Z+23	; 0x17
 5d0:	29 81       	ldd	r18, Y+1	; 0x01
 5d2:	3a 81       	ldd	r19, Y+2	; 0x02
 5d4:	f9 01       	movw	r30, r18
 5d6:	26 89       	ldd	r18, Z+22	; 0x16
 5d8:	37 89       	ldd	r19, Z+23	; 0x17
 5da:	f9 01       	movw	r30, r18
 5dc:	20 81       	ld	r18, Z
 5de:	62 2f       	mov	r22, r18
 5e0:	29 81       	ldd	r18, Y+1	; 0x01
 5e2:	3a 81       	ldd	r19, Y+2	; 0x02
 5e4:	f9 01       	movw	r30, r18
 5e6:	22 8d       	ldd	r18, Z+26	; 0x1a
 5e8:	42 2f       	mov	r20, r18
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_ZN14HardwareSerial3endEv+0x70>
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	4a 95       	dec	r20
 5f8:	02 f4       	brpl	.+0      	; 0x5fa <_ZN14HardwareSerial3endEv+0x78>
 5fa:	20 95       	com	r18
 5fc:	26 23       	and	r18, r22
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
  cbi(*_ucsrb, _txen);
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	9a 81       	ldd	r25, Y+2	; 0x02
 606:	fc 01       	movw	r30, r24
 608:	86 89       	ldd	r24, Z+22	; 0x16
 60a:	97 89       	ldd	r25, Z+23	; 0x17
 60c:	29 81       	ldd	r18, Y+1	; 0x01
 60e:	3a 81       	ldd	r19, Y+2	; 0x02
 610:	f9 01       	movw	r30, r18
 612:	26 89       	ldd	r18, Z+22	; 0x16
 614:	37 89       	ldd	r19, Z+23	; 0x17
 616:	f9 01       	movw	r30, r18
 618:	20 81       	ld	r18, Z
 61a:	62 2f       	mov	r22, r18
 61c:	29 81       	ldd	r18, Y+1	; 0x01
 61e:	3a 81       	ldd	r19, Y+2	; 0x02
 620:	f9 01       	movw	r30, r18
 622:	23 8d       	ldd	r18, Z+27	; 0x1b
 624:	42 2f       	mov	r20, r18
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	00 c0       	rjmp	.+0      	; 0x62e <_ZN14HardwareSerial3endEv+0xac>
 62e:	22 0f       	add	r18, r18
 630:	33 1f       	adc	r19, r19
 632:	4a 95       	dec	r20
 634:	02 f4       	brpl	.+0      	; 0x636 <_ZN14HardwareSerial3endEv+0xb4>
 636:	20 95       	com	r18
 638:	26 23       	and	r18, r22
 63a:	fc 01       	movw	r30, r24
 63c:	20 83       	st	Z, r18
  cbi(*_ucsrb, _rxcie);  
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	9a 81       	ldd	r25, Y+2	; 0x02
 642:	fc 01       	movw	r30, r24
 644:	86 89       	ldd	r24, Z+22	; 0x16
 646:	97 89       	ldd	r25, Z+23	; 0x17
 648:	29 81       	ldd	r18, Y+1	; 0x01
 64a:	3a 81       	ldd	r19, Y+2	; 0x02
 64c:	f9 01       	movw	r30, r18
 64e:	26 89       	ldd	r18, Z+22	; 0x16
 650:	37 89       	ldd	r19, Z+23	; 0x17
 652:	f9 01       	movw	r30, r18
 654:	20 81       	ld	r18, Z
 656:	62 2f       	mov	r22, r18
 658:	29 81       	ldd	r18, Y+1	; 0x01
 65a:	3a 81       	ldd	r19, Y+2	; 0x02
 65c:	f9 01       	movw	r30, r18
 65e:	24 8d       	ldd	r18, Z+28	; 0x1c
 660:	42 2f       	mov	r20, r18
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	21 e0       	ldi	r18, 0x01	; 1
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	00 c0       	rjmp	.+0      	; 0x66a <_ZN14HardwareSerial3endEv+0xe8>
 66a:	22 0f       	add	r18, r18
 66c:	33 1f       	adc	r19, r19
 66e:	4a 95       	dec	r20
 670:	02 f4       	brpl	.+0      	; 0x672 <_ZN14HardwareSerial3endEv+0xf0>
 672:	20 95       	com	r18
 674:	26 23       	and	r18, r22
 676:	fc 01       	movw	r30, r24
 678:	20 83       	st	Z, r18
  cbi(*_ucsrb, _udrie);
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	9a 81       	ldd	r25, Y+2	; 0x02
 67e:	fc 01       	movw	r30, r24
 680:	86 89       	ldd	r24, Z+22	; 0x16
 682:	97 89       	ldd	r25, Z+23	; 0x17
 684:	29 81       	ldd	r18, Y+1	; 0x01
 686:	3a 81       	ldd	r19, Y+2	; 0x02
 688:	f9 01       	movw	r30, r18
 68a:	26 89       	ldd	r18, Z+22	; 0x16
 68c:	37 89       	ldd	r19, Z+23	; 0x17
 68e:	f9 01       	movw	r30, r18
 690:	20 81       	ld	r18, Z
 692:	62 2f       	mov	r22, r18
 694:	29 81       	ldd	r18, Y+1	; 0x01
 696:	3a 81       	ldd	r19, Y+2	; 0x02
 698:	f9 01       	movw	r30, r18
 69a:	25 8d       	ldd	r18, Z+29	; 0x1d
 69c:	42 2f       	mov	r20, r18
 69e:	50 e0       	ldi	r21, 0x00	; 0
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	04 2e       	mov	r0, r20
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <_ZN14HardwareSerial3endEv+0x126>
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	0a 94       	dec	r0
 6ae:	02 f4       	brpl	.+0      	; 0x6b0 <_ZN14HardwareSerial3endEv+0x12e>
 6b0:	20 95       	com	r18
 6b2:	26 23       	and	r18, r22
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
 6b8:	89 81       	ldd	r24, Y+1	; 0x01
 6ba:	9a 81       	ldd	r25, Y+2	; 0x02
 6bc:	fc 01       	movw	r30, r24
 6be:	84 85       	ldd	r24, Z+12	; 0x0c
 6c0:	95 85       	ldd	r25, Z+13	; 0x0d
 6c2:	29 81       	ldd	r18, Y+1	; 0x01
 6c4:	3a 81       	ldd	r19, Y+2	; 0x02
 6c6:	f9 01       	movw	r30, r18
 6c8:	24 85       	ldd	r18, Z+12	; 0x0c
 6ca:	35 85       	ldd	r19, Z+13	; 0x0d
 6cc:	2e 5b       	subi	r18, 0xBE	; 190
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	f9 01       	movw	r30, r18
 6d2:	20 81       	ld	r18, Z
 6d4:	31 81       	ldd	r19, Z+1	; 0x01
 6d6:	80 5c       	subi	r24, 0xC0	; 192
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	fc 01       	movw	r30, r24
 6dc:	31 83       	std	Z+1, r19	; 0x01
 6de:	20 83       	st	Z, r18
}
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	cf 91       	pop	r28
 6e6:	df 91       	pop	r29
 6e8:	08 95       	ret

000006ea <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <_ZN14HardwareSerial9availableEv+0x6>
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	9a 83       	std	Y+2, r25	; 0x02
 6f6:	89 83       	std	Y+1, r24	; 0x01
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	9a 81       	ldd	r25, Y+2	; 0x02
 6fc:	fc 01       	movw	r30, r24
 6fe:	84 85       	ldd	r24, Z+12	; 0x0c
 700:	95 85       	ldd	r25, Z+13	; 0x0d
 702:	80 5c       	subi	r24, 0xC0	; 192
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	fc 01       	movw	r30, r24
 708:	80 81       	ld	r24, Z
 70a:	91 81       	ldd	r25, Z+1	; 0x01
 70c:	9c 01       	movw	r18, r24
 70e:	20 5c       	subi	r18, 0xC0	; 192
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	9a 81       	ldd	r25, Y+2	; 0x02
 716:	fc 01       	movw	r30, r24
 718:	84 85       	ldd	r24, Z+12	; 0x0c
 71a:	95 85       	ldd	r25, Z+13	; 0x0d
 71c:	8e 5b       	subi	r24, 0xBE	; 190
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	fc 01       	movw	r30, r24
 722:	80 81       	ld	r24, Z
 724:	91 81       	ldd	r25, Z+1	; 0x01
 726:	a9 01       	movw	r20, r18
 728:	48 1b       	sub	r20, r24
 72a:	59 0b       	sbc	r21, r25
 72c:	ca 01       	movw	r24, r20
 72e:	8f 73       	andi	r24, 0x3F	; 63
 730:	90 70       	andi	r25, 0x00	; 0
}
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	cf 91       	pop	r28
 738:	df 91       	pop	r29
 73a:	08 95       	ret

0000073c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 73c:	df 93       	push	r29
 73e:	cf 93       	push	r28
 740:	00 d0       	rcall	.+0      	; 0x742 <_ZN14HardwareSerial4peekEv+0x6>
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
 746:	9a 83       	std	Y+2, r25	; 0x02
 748:	89 83       	std	Y+1, r24	; 0x01
  if (_rx_buffer->head == _rx_buffer->tail) {
 74a:	89 81       	ldd	r24, Y+1	; 0x01
 74c:	9a 81       	ldd	r25, Y+2	; 0x02
 74e:	fc 01       	movw	r30, r24
 750:	84 85       	ldd	r24, Z+12	; 0x0c
 752:	95 85       	ldd	r25, Z+13	; 0x0d
 754:	80 5c       	subi	r24, 0xC0	; 192
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	fc 01       	movw	r30, r24
 75a:	20 81       	ld	r18, Z
 75c:	31 81       	ldd	r19, Z+1	; 0x01
 75e:	89 81       	ldd	r24, Y+1	; 0x01
 760:	9a 81       	ldd	r25, Y+2	; 0x02
 762:	fc 01       	movw	r30, r24
 764:	84 85       	ldd	r24, Z+12	; 0x0c
 766:	95 85       	ldd	r25, Z+13	; 0x0d
 768:	8e 5b       	subi	r24, 0xBE	; 190
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	fc 01       	movw	r30, r24
 76e:	80 81       	ld	r24, Z
 770:	91 81       	ldd	r25, Z+1	; 0x01
 772:	41 e0       	ldi	r20, 0x01	; 1
 774:	28 17       	cp	r18, r24
 776:	39 07       	cpc	r19, r25
 778:	01 f0       	breq	.+0      	; 0x77a <_ZN14HardwareSerial4peekEv+0x3e>
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	44 23       	and	r20, r20
 77e:	01 f0       	breq	.+0      	; 0x780 <_ZN14HardwareSerial4peekEv+0x44>
    return -1;
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	9f ef       	ldi	r25, 0xFF	; 255
 784:	00 c0       	rjmp	.+0      	; 0x786 <_ZN14HardwareSerial4peekEv+0x4a>
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 786:	89 81       	ldd	r24, Y+1	; 0x01
 788:	9a 81       	ldd	r25, Y+2	; 0x02
 78a:	fc 01       	movw	r30, r24
 78c:	24 85       	ldd	r18, Z+12	; 0x0c
 78e:	35 85       	ldd	r19, Z+13	; 0x0d
 790:	89 81       	ldd	r24, Y+1	; 0x01
 792:	9a 81       	ldd	r25, Y+2	; 0x02
 794:	fc 01       	movw	r30, r24
 796:	84 85       	ldd	r24, Z+12	; 0x0c
 798:	95 85       	ldd	r25, Z+13	; 0x0d
 79a:	8e 5b       	subi	r24, 0xBE	; 190
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	fc 01       	movw	r30, r24
 7a0:	80 81       	ld	r24, Z
 7a2:	91 81       	ldd	r25, Z+1	; 0x01
 7a4:	82 0f       	add	r24, r18
 7a6:	93 1f       	adc	r25, r19
 7a8:	fc 01       	movw	r30, r24
 7aa:	80 81       	ld	r24, Z
 7ac:	88 2f       	mov	r24, r24
 7ae:	90 e0       	ldi	r25, 0x00	; 0
  }
}
 7b0:	0f 90       	pop	r0
 7b2:	0f 90       	pop	r0
 7b4:	cf 91       	pop	r28
 7b6:	df 91       	pop	r29
 7b8:	08 95       	ret

000007ba <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 7ba:	df 93       	push	r29
 7bc:	cf 93       	push	r28
 7be:	00 d0       	rcall	.+0      	; 0x7c0 <_ZN14HardwareSerial4readEv+0x6>
 7c0:	0f 92       	push	r0
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
 7c6:	9b 83       	std	Y+3, r25	; 0x03
 7c8:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	9b 81       	ldd	r25, Y+3	; 0x03
 7ce:	fc 01       	movw	r30, r24
 7d0:	84 85       	ldd	r24, Z+12	; 0x0c
 7d2:	95 85       	ldd	r25, Z+13	; 0x0d
 7d4:	80 5c       	subi	r24, 0xC0	; 192
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	fc 01       	movw	r30, r24
 7da:	20 81       	ld	r18, Z
 7dc:	31 81       	ldd	r19, Z+1	; 0x01
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	9b 81       	ldd	r25, Y+3	; 0x03
 7e2:	fc 01       	movw	r30, r24
 7e4:	84 85       	ldd	r24, Z+12	; 0x0c
 7e6:	95 85       	ldd	r25, Z+13	; 0x0d
 7e8:	8e 5b       	subi	r24, 0xBE	; 190
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	fc 01       	movw	r30, r24
 7ee:	80 81       	ld	r24, Z
 7f0:	91 81       	ldd	r25, Z+1	; 0x01
 7f2:	41 e0       	ldi	r20, 0x01	; 1
 7f4:	28 17       	cp	r18, r24
 7f6:	39 07       	cpc	r19, r25
 7f8:	01 f0       	breq	.+0      	; 0x7fa <_ZN14HardwareSerial4readEv+0x40>
 7fa:	40 e0       	ldi	r20, 0x00	; 0
 7fc:	44 23       	and	r20, r20
 7fe:	01 f0       	breq	.+0      	; 0x800 <_ZN14HardwareSerial4readEv+0x46>
    return -1;
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	00 c0       	rjmp	.+0      	; 0x806 <_ZN14HardwareSerial4readEv+0x4c>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 806:	8a 81       	ldd	r24, Y+2	; 0x02
 808:	9b 81       	ldd	r25, Y+3	; 0x03
 80a:	fc 01       	movw	r30, r24
 80c:	24 85       	ldd	r18, Z+12	; 0x0c
 80e:	35 85       	ldd	r19, Z+13	; 0x0d
 810:	8a 81       	ldd	r24, Y+2	; 0x02
 812:	9b 81       	ldd	r25, Y+3	; 0x03
 814:	fc 01       	movw	r30, r24
 816:	84 85       	ldd	r24, Z+12	; 0x0c
 818:	95 85       	ldd	r25, Z+13	; 0x0d
 81a:	8e 5b       	subi	r24, 0xBE	; 190
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	fc 01       	movw	r30, r24
 820:	80 81       	ld	r24, Z
 822:	91 81       	ldd	r25, Z+1	; 0x01
 824:	82 0f       	add	r24, r18
 826:	93 1f       	adc	r25, r19
 828:	fc 01       	movw	r30, r24
 82a:	80 81       	ld	r24, Z
 82c:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 82e:	8a 81       	ldd	r24, Y+2	; 0x02
 830:	9b 81       	ldd	r25, Y+3	; 0x03
 832:	fc 01       	movw	r30, r24
 834:	84 85       	ldd	r24, Z+12	; 0x0c
 836:	95 85       	ldd	r25, Z+13	; 0x0d
 838:	2a 81       	ldd	r18, Y+2	; 0x02
 83a:	3b 81       	ldd	r19, Y+3	; 0x03
 83c:	f9 01       	movw	r30, r18
 83e:	24 85       	ldd	r18, Z+12	; 0x0c
 840:	35 85       	ldd	r19, Z+13	; 0x0d
 842:	2e 5b       	subi	r18, 0xBE	; 190
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	f9 01       	movw	r30, r18
 848:	20 81       	ld	r18, Z
 84a:	31 81       	ldd	r19, Z+1	; 0x01
 84c:	2f 5f       	subi	r18, 0xFF	; 255
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	2f 73       	andi	r18, 0x3F	; 63
 852:	30 70       	andi	r19, 0x00	; 0
 854:	8e 5b       	subi	r24, 0xBE	; 190
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	fc 01       	movw	r30, r24
 85a:	31 83       	std	Z+1, r19	; 0x01
 85c:	20 83       	st	Z, r18
    return c;
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
  }
}
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	0f 90       	pop	r0
 86a:	cf 91       	pop	r28
 86c:	df 91       	pop	r29
 86e:	08 95       	ret

00000870 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
 870:	df 93       	push	r29
 872:	cf 93       	push	r28
 874:	00 d0       	rcall	.+0      	; 0x876 <_ZN14HardwareSerial5flushEv+0x6>
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
 87a:	9a 83       	std	Y+2, r25	; 0x02
 87c:	89 83       	std	Y+1, r24	; 0x01
  while (_tx_buffer->head != _tx_buffer->tail)
 87e:	89 81       	ldd	r24, Y+1	; 0x01
 880:	9a 81       	ldd	r25, Y+2	; 0x02
 882:	fc 01       	movw	r30, r24
 884:	86 85       	ldd	r24, Z+14	; 0x0e
 886:	97 85       	ldd	r25, Z+15	; 0x0f
 888:	80 5c       	subi	r24, 0xC0	; 192
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	fc 01       	movw	r30, r24
 88e:	20 81       	ld	r18, Z
 890:	31 81       	ldd	r19, Z+1	; 0x01
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	9a 81       	ldd	r25, Y+2	; 0x02
 896:	fc 01       	movw	r30, r24
 898:	86 85       	ldd	r24, Z+14	; 0x0e
 89a:	97 85       	ldd	r25, Z+15	; 0x0f
 89c:	8e 5b       	subi	r24, 0xBE	; 190
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	fc 01       	movw	r30, r24
 8a2:	80 81       	ld	r24, Z
 8a4:	91 81       	ldd	r25, Z+1	; 0x01
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	28 17       	cp	r18, r24
 8aa:	39 07       	cpc	r19, r25
 8ac:	01 f4       	brne	.+0      	; 0x8ae <_ZN14HardwareSerial5flushEv+0x3e>
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	44 23       	and	r20, r20
 8b2:	01 f4       	brne	.+0      	; 0x8b4 <_ZN14HardwareSerial5flushEv+0x44>
    ;
}
 8b4:	0f 90       	pop	r0
 8b6:	0f 90       	pop	r0
 8b8:	cf 91       	pop	r28
 8ba:	df 91       	pop	r29
 8bc:	08 95       	ret

000008be <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 8be:	df 93       	push	r29
 8c0:	cf 93       	push	r28
 8c2:	00 d0       	rcall	.+0      	; 0x8c4 <_ZN14HardwareSerial5writeEh+0x6>
 8c4:	00 d0       	rcall	.+0      	; 0x8c6 <_ZN14HardwareSerial5writeEh+0x8>
 8c6:	0f 92       	push	r0
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
 8cc:	9c 83       	std	Y+4, r25	; 0x04
 8ce:	8b 83       	std	Y+3, r24	; 0x03
 8d0:	6d 83       	std	Y+5, r22	; 0x05
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 8d2:	8b 81       	ldd	r24, Y+3	; 0x03
 8d4:	9c 81       	ldd	r25, Y+4	; 0x04
 8d6:	fc 01       	movw	r30, r24
 8d8:	86 85       	ldd	r24, Z+14	; 0x0e
 8da:	97 85       	ldd	r25, Z+15	; 0x0f
 8dc:	80 5c       	subi	r24, 0xC0	; 192
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	fc 01       	movw	r30, r24
 8e2:	80 81       	ld	r24, Z
 8e4:	91 81       	ldd	r25, Z+1	; 0x01
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	20 e4       	ldi	r18, 0x40	; 64
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	b9 01       	movw	r22, r18
 8ee:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 8f2:	9a 83       	std	Y+2, r25	; 0x02
 8f4:	89 83       	std	Y+1, r24	; 0x01
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	9c 81       	ldd	r25, Y+4	; 0x04
 8fa:	fc 01       	movw	r30, r24
 8fc:	86 85       	ldd	r24, Z+14	; 0x0e
 8fe:	97 85       	ldd	r25, Z+15	; 0x0f
 900:	8e 5b       	subi	r24, 0xBE	; 190
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	fc 01       	movw	r30, r24
 906:	20 81       	ld	r18, Z
 908:	31 81       	ldd	r19, Z+1	; 0x01
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	89 81       	ldd	r24, Y+1	; 0x01
 90e:	9a 81       	ldd	r25, Y+2	; 0x02
 910:	28 17       	cp	r18, r24
 912:	39 07       	cpc	r19, r25
 914:	01 f0       	breq	.+0      	; 0x916 <_ZN14HardwareSerial5writeEh+0x58>
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	44 23       	and	r20, r20
 91a:	01 f4       	brne	.+0      	; 0x91c <_ZN14HardwareSerial5writeEh+0x5e>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	9c 81       	ldd	r25, Y+4	; 0x04
 920:	fc 01       	movw	r30, r24
 922:	26 85       	ldd	r18, Z+14	; 0x0e
 924:	37 85       	ldd	r19, Z+15	; 0x0f
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	9c 81       	ldd	r25, Y+4	; 0x04
 92a:	fc 01       	movw	r30, r24
 92c:	86 85       	ldd	r24, Z+14	; 0x0e
 92e:	97 85       	ldd	r25, Z+15	; 0x0f
 930:	80 5c       	subi	r24, 0xC0	; 192
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	fc 01       	movw	r30, r24
 936:	80 81       	ld	r24, Z
 938:	91 81       	ldd	r25, Z+1	; 0x01
 93a:	82 0f       	add	r24, r18
 93c:	93 1f       	adc	r25, r19
 93e:	2d 81       	ldd	r18, Y+5	; 0x05
 940:	fc 01       	movw	r30, r24
 942:	20 83       	st	Z, r18
  _tx_buffer->head = i;
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	9c 81       	ldd	r25, Y+4	; 0x04
 948:	fc 01       	movw	r30, r24
 94a:	86 85       	ldd	r24, Z+14	; 0x0e
 94c:	97 85       	ldd	r25, Z+15	; 0x0f
 94e:	80 5c       	subi	r24, 0xC0	; 192
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	29 81       	ldd	r18, Y+1	; 0x01
 954:	3a 81       	ldd	r19, Y+2	; 0x02
 956:	fc 01       	movw	r30, r24
 958:	31 83       	std	Z+1, r19	; 0x01
 95a:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	9c 81       	ldd	r25, Y+4	; 0x04
 960:	fc 01       	movw	r30, r24
 962:	86 89       	ldd	r24, Z+22	; 0x16
 964:	97 89       	ldd	r25, Z+23	; 0x17
 966:	2b 81       	ldd	r18, Y+3	; 0x03
 968:	3c 81       	ldd	r19, Y+4	; 0x04
 96a:	f9 01       	movw	r30, r18
 96c:	26 89       	ldd	r18, Z+22	; 0x16
 96e:	37 89       	ldd	r19, Z+23	; 0x17
 970:	f9 01       	movw	r30, r18
 972:	20 81       	ld	r18, Z
 974:	62 2f       	mov	r22, r18
 976:	2b 81       	ldd	r18, Y+3	; 0x03
 978:	3c 81       	ldd	r19, Y+4	; 0x04
 97a:	f9 01       	movw	r30, r18
 97c:	25 8d       	ldd	r18, Z+29	; 0x1d
 97e:	42 2f       	mov	r20, r18
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	21 e0       	ldi	r18, 0x01	; 1
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	04 2e       	mov	r0, r20
 988:	00 c0       	rjmp	.+0      	; 0x98a <_ZN14HardwareSerial5writeEh+0xcc>
 98a:	22 0f       	add	r18, r18
 98c:	33 1f       	adc	r19, r19
 98e:	0a 94       	dec	r0
 990:	02 f4       	brpl	.+0      	; 0x992 <_ZN14HardwareSerial5writeEh+0xd4>
 992:	26 2b       	or	r18, r22
 994:	fc 01       	movw	r30, r24
 996:	20 83       	st	Z, r18
  
  return 1;
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
}
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	0f 90       	pop	r0
 9a4:	0f 90       	pop	r0
 9a6:	cf 91       	pop	r28
 9a8:	df 91       	pop	r29
 9aa:	08 95       	ret

000009ac <_Z41__static_initialization_and_destruction_0ii>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 9ac:	8f 92       	push	r8
 9ae:	af 92       	push	r10
 9b0:	bf 92       	push	r11
 9b2:	cf 92       	push	r12
 9b4:	df 92       	push	r13
 9b6:	ef 92       	push	r14
 9b8:	ff 92       	push	r15
 9ba:	0f 93       	push	r16
 9bc:	1f 93       	push	r17
 9be:	df 93       	push	r29
 9c0:	cf 93       	push	r28
 9c2:	00 d0       	rcall	.+0      	; 0x9c4 <_Z41__static_initialization_and_destruction_0ii+0x18>
 9c4:	00 d0       	rcall	.+0      	; 0x9c6 <_Z41__static_initialization_and_destruction_0ii+0x1a>
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	9a 83       	std	Y+2, r25	; 0x02
 9cc:	89 83       	std	Y+1, r24	; 0x01
 9ce:	7c 83       	std	Y+4, r23	; 0x04
 9d0:	6b 83       	std	Y+3, r22	; 0x03
 9d2:	89 81       	ldd	r24, Y+1	; 0x01
 9d4:	9a 81       	ldd	r25, Y+2	; 0x02
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	91 05       	cpc	r25, r1
 9da:	01 f0       	breq	.+0      	; 0x9dc <_Z41__static_initialization_and_destruction_0ii+0x30>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <_Z41__static_initialization_and_destruction_0ii+0x32>
 9de:	8b 81       	ldd	r24, Y+3	; 0x03
 9e0:	9c 81       	ldd	r25, Y+4	; 0x04
 9e2:	2f ef       	ldi	r18, 0xFF	; 255
 9e4:	8f 3f       	cpi	r24, 0xFF	; 255
 9e6:	92 07       	cpc	r25, r18
 9e8:	01 f4       	brne	.+0      	; 0x9ea <_Z41__static_initialization_and_destruction_0ii+0x3e>
 9ea:	00 d0       	rcall	.+0      	; 0x9ec <_Z41__static_initialization_and_destruction_0ii+0x40>
 9ec:	00 d0       	rcall	.+0      	; 0x9ee <_Z41__static_initialization_and_destruction_0ii+0x42>
 9ee:	8d b7       	in	r24, 0x3d	; 61
 9f0:	9e b7       	in	r25, 0x3e	; 62
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	40 e0       	ldi	r20, 0x00	; 0
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	e3 e0       	ldi	r30, 0x03	; 3
 a02:	dc 01       	movw	r26, r24
 a04:	ec 93       	st	X, r30
 a06:	e7 e0       	ldi	r30, 0x07	; 7
 a08:	dc 01       	movw	r26, r24
 a0a:	11 96       	adiw	r26, 0x01	; 1
 a0c:	ec 93       	st	X, r30
 a0e:	e5 e0       	ldi	r30, 0x05	; 5
 a10:	dc 01       	movw	r26, r24
 a12:	12 96       	adiw	r26, 0x02	; 2
 a14:	ec 93       	st	X, r30
 a16:	e1 e0       	ldi	r30, 0x01	; 1
 a18:	dc 01       	movw	r26, r24
 a1a:	13 96       	adiw	r26, 0x03	; 3
 a1c:	ec 93       	st	X, r30
 a1e:	cb 01       	movw	r24, r22
 a20:	ba 01       	movw	r22, r20
 a22:	a9 01       	movw	r20, r18
 a24:	25 ec       	ldi	r18, 0xC5	; 197
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	04 ec       	ldi	r16, 0xC4	; 196
 a2a:	10 e0       	ldi	r17, 0x00	; 0
 a2c:	0f 2e       	mov	r0, r31
 a2e:	f0 ec       	ldi	r31, 0xC0	; 192
 a30:	ef 2e       	mov	r14, r31
 a32:	ff 24       	eor	r15, r15
 a34:	f0 2d       	mov	r31, r0
 a36:	0f 2e       	mov	r0, r31
 a38:	f1 ec       	ldi	r31, 0xC1	; 193
 a3a:	cf 2e       	mov	r12, r31
 a3c:	dd 24       	eor	r13, r13
 a3e:	f0 2d       	mov	r31, r0
 a40:	0f 2e       	mov	r0, r31
 a42:	f6 ec       	ldi	r31, 0xC6	; 198
 a44:	af 2e       	mov	r10, r31
 a46:	bb 24       	eor	r11, r11
 a48:	f0 2d       	mov	r31, r0
 a4a:	88 24       	eor	r8, r8
 a4c:	68 94       	set
 a4e:	82 f8       	bld	r8, 2
 a50:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 a54:	0f 90       	pop	r0
 a56:	0f 90       	pop	r0
 a58:	0f 90       	pop	r0
 a5a:	0f 90       	pop	r0
 a5c:	0f 90       	pop	r0
 a5e:	0f 90       	pop	r0
 a60:	0f 90       	pop	r0
 a62:	0f 90       	pop	r0
 a64:	cf 91       	pop	r28
 a66:	df 91       	pop	r29
 a68:	1f 91       	pop	r17
 a6a:	0f 91       	pop	r16
 a6c:	ff 90       	pop	r15
 a6e:	ef 90       	pop	r14
 a70:	df 90       	pop	r13
 a72:	cf 90       	pop	r12
 a74:	bf 90       	pop	r11
 a76:	af 90       	pop	r10
 a78:	8f 90       	pop	r8
 a7a:	08 95       	ret

00000a7c <_GLOBAL__I_rx_buffer>:
 a7c:	df 93       	push	r29
 a7e:	cf 93       	push	r28
 a80:	cd b7       	in	r28, 0x3d	; 61
 a82:	de b7       	in	r29, 0x3e	; 62
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	6f ef       	ldi	r22, 0xFF	; 255
 a8a:	7f ef       	ldi	r23, 0xFF	; 255
 a8c:	0e 94 00 00 	call	0	; 0x0 <_ZN5PrintC2Ev>
 a90:	cf 91       	pop	r28
 a92:	df 91       	pop	r29
 a94:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000001b  00000000  00000000  00000392  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000006  00000000  00000000  000003ad  2**0
                  ALLOC
  3 .stab         000009c0  00000000  00000000  000003b0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000114b  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .ctors        00000002  00000000  00000000  00001ebb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN9PrintableC2Ev>:
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9PrintableC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	20 e0       	ldi	r18, 0x00	; 0
  14:	30 e0       	ldi	r19, 0x00	; 0
  16:	fc 01       	movw	r30, r24
  18:	31 83       	std	Z+1, r19	; 0x01
  1a:	20 83       	st	Z, r18
  1c:	0f 90       	pop	r0
  1e:	0f 90       	pop	r0
  20:	cf 91       	pop	r28
  22:	df 91       	pop	r29
  24:	08 95       	ret

00000026 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
  26:	df 93       	push	r29
  28:	cf 93       	push	r28
  2a:	00 d0       	rcall	.+0      	; 0x2c <_ZN9IPAddressC1Ev+0x6>
  2c:	cd b7       	in	r28, 0x3d	; 61
  2e:	de b7       	in	r29, 0x3e	; 62
  30:	9a 83       	std	Y+2, r25	; 0x02
  32:	89 83       	std	Y+1, r24	; 0x01
  34:	89 81       	ldd	r24, Y+1	; 0x01
  36:	9a 81       	ldd	r25, Y+2	; 0x02
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
  3c:	89 81       	ldd	r24, Y+1	; 0x01
  3e:	9a 81       	ldd	r25, Y+2	; 0x02
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	fc 01       	movw	r30, r24
  46:	31 83       	std	Z+1, r19	; 0x01
  48:	20 83       	st	Z, r18
{
    memset(_address, 0, sizeof(_address));
  4a:	89 81       	ldd	r24, Y+1	; 0x01
  4c:	9a 81       	ldd	r25, Y+2	; 0x02
  4e:	02 96       	adiw	r24, 0x02	; 2
  50:	60 e0       	ldi	r22, 0x00	; 0
  52:	70 e0       	ldi	r23, 0x00	; 0
  54:	44 e0       	ldi	r20, 0x04	; 4
  56:	50 e0       	ldi	r21, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
  5c:	0f 90       	pop	r0
  5e:	0f 90       	pop	r0
  60:	cf 91       	pop	r28
  62:	df 91       	pop	r29
  64:	08 95       	ret

00000066 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
  66:	0f 93       	push	r16
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	00 d0       	rcall	.+0      	; 0x6e <_ZN9IPAddressC1Ehhhh+0x8>
  6e:	00 d0       	rcall	.+0      	; 0x70 <_ZN9IPAddressC1Ehhhh+0xa>
  70:	00 d0       	rcall	.+0      	; 0x72 <_ZN9IPAddressC1Ehhhh+0xc>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04
  7e:	2d 83       	std	Y+5, r18	; 0x05
  80:	0e 83       	std	Y+6, r16	; 0x06
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	9a 81       	ldd	r25, Y+2	; 0x02
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	fc 01       	movw	r30, r24
  94:	31 83       	std	Z+1, r19	; 0x01
  96:	20 83       	st	Z, r18
{
    _address[0] = first_octet;
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	9a 81       	ldd	r25, Y+2	; 0x02
  9c:	2b 81       	ldd	r18, Y+3	; 0x03
  9e:	fc 01       	movw	r30, r24
  a0:	22 83       	std	Z+2, r18	; 0x02
    _address[1] = second_octet;
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	fc 01       	movw	r30, r24
  aa:	23 83       	std	Z+3, r18	; 0x03
    _address[2] = third_octet;
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	2d 81       	ldd	r18, Y+5	; 0x05
  b2:	fc 01       	movw	r30, r24
  b4:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	2e 81       	ldd	r18, Y+6	; 0x06
  bc:	fc 01       	movw	r30, r24
  be:	25 83       	std	Z+5, r18	; 0x05
}
  c0:	26 96       	adiw	r28, 0x06	; 6
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	0f 91       	pop	r16
  d2:	08 95       	ret

000000d4 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	00 d0       	rcall	.+0      	; 0xda <_ZN9IPAddressC1Em+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <_ZN9IPAddressC1Em+0x8>
  dc:	00 d0       	rcall	.+0      	; 0xde <_ZN9IPAddressC1Em+0xa>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	4b 83       	std	Y+3, r20	; 0x03
  e8:	5c 83       	std	Y+4, r21	; 0x04
  ea:	6d 83       	std	Y+5, r22	; 0x05
  ec:	7e 83       	std	Y+6, r23	; 0x06
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	31 83       	std	Z+1, r19	; 0x01
 102:	20 83       	st	Z, r18
{
    memcpy(_address, &address, sizeof(_address));
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	9a 81       	ldd	r25, Y+2	; 0x02
 108:	02 96       	adiw	r24, 0x02	; 2
 10a:	9e 01       	movw	r18, r28
 10c:	2d 5f       	subi	r18, 0xFD	; 253
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	b9 01       	movw	r22, r18
 112:	44 e0       	ldi	r20, 0x04	; 4
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 11a:	26 96       	adiw	r28, 0x06	; 6
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	cf 91       	pop	r28
 128:	df 91       	pop	r29
 12a:	08 95       	ret

0000012c <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	00 d0       	rcall	.+0      	; 0x132 <_ZN9IPAddressC1EPKh+0x6>
 132:	00 d0       	rcall	.+0      	; 0x134 <_ZN9IPAddressC1EPKh+0x8>
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	7c 83       	std	Y+4, r23	; 0x04
 13e:	6b 83       	std	Y+3, r22	; 0x03
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	31 83       	std	Z+1, r19	; 0x01
 154:	20 83       	st	Z, r18
{
    memcpy(_address, address, sizeof(_address));
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	02 96       	adiw	r24, 0x02	; 2
 15c:	2b 81       	ldd	r18, Y+3	; 0x03
 15e:	3c 81       	ldd	r19, Y+4	; 0x04
 160:	b9 01       	movw	r22, r18
 162:	44 e0       	ldi	r20, 0x04	; 4
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	cf 91       	pop	r28
 174:	df 91       	pop	r29
 176:	08 95       	ret

00000178 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	00 d0       	rcall	.+0      	; 0x17e <_ZN9IPAddressaSEPKh+0x6>
 17e:	00 d0       	rcall	.+0      	; 0x180 <_ZN9IPAddressaSEPKh+0x8>
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	7c 83       	std	Y+4, r23	; 0x04
 18a:	6b 83       	std	Y+3, r22	; 0x03
    memcpy(_address, address, sizeof(_address));
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	02 96       	adiw	r24, 0x02	; 2
 192:	2b 81       	ldd	r18, Y+3	; 0x03
 194:	3c 81       	ldd	r19, Y+4	; 0x04
 196:	b9 01       	movw	r22, r18
 198:	44 e0       	ldi	r20, 0x04	; 4
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
    return *this;
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	cf 91       	pop	r28
 1ae:	df 91       	pop	r29
 1b0:	08 95       	ret

000001b2 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
 1b2:	df 93       	push	r29
 1b4:	cf 93       	push	r28
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <_ZN9IPAddressaSEm+0x6>
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <_ZN9IPAddressaSEm+0x8>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <_ZN9IPAddressaSEm+0xa>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	4b 83       	std	Y+3, r20	; 0x03
 1c6:	5c 83       	std	Y+4, r21	; 0x04
 1c8:	6d 83       	std	Y+5, r22	; 0x05
 1ca:	7e 83       	std	Y+6, r23	; 0x06
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	02 96       	adiw	r24, 0x02	; 2
 1d2:	9e 01       	movw	r18, r28
 1d4:	2d 5f       	subi	r18, 0xFD	; 253
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	b9 01       	movw	r22, r18
 1da:	44 e0       	ldi	r20, 0x04	; 4
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
    return *this;
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1e6:	26 96       	adiw	r28, 0x06	; 6
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <_ZN9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr)
{
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <_ZN9IPAddresseqEPKh+0x6>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <_ZN9IPAddresseqEPKh+0x8>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	7c 83       	std	Y+4, r23	; 0x04
 20a:	6b 83       	std	Y+3, r22	; 0x03
    return memcmp(addr, _address, sizeof(_address)) == 0;
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	9c 01       	movw	r18, r24
 212:	2e 5f       	subi	r18, 0xFE	; 254
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	b9 01       	movw	r22, r18
 21c:	44 e0       	ldi	r20, 0x04	; 4
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	01 f0       	breq	.+0      	; 0x22a <_ZN9IPAddresseqEPKh+0x32>
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	82 2f       	mov	r24, r18
}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	cf 91       	pop	r28
 238:	df 91       	pop	r29
 23a:	08 95       	ret

0000023c <_ZNK9IPAddress7printToER5Print>:

size_t IPAddress::printTo(Print& p) const
{
 23c:	df 93       	push	r29
 23e:	cf 93       	push	r28
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	28 97       	sbiw	r28, 0x08	; 8
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	78 87       	std	Y+8, r23	; 0x08
 256:	6f 83       	std	Y+7, r22	; 0x07
    size_t n = 0;
 258:	1a 82       	std	Y+2, r1	; 0x02
 25a:	19 82       	std	Y+1, r1	; 0x01
    for (int i =0; i < 3; i++)
 25c:	1c 82       	std	Y+4, r1	; 0x04
 25e:	1b 82       	std	Y+3, r1	; 0x03
 260:	00 c0       	rjmp	.+0      	; 0x262 <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
 262:	2d 81       	ldd	r18, Y+5	; 0x05
 264:	3e 81       	ldd	r19, Y+6	; 0x06
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	9c 81       	ldd	r25, Y+4	; 0x04
 26a:	82 0f       	add	r24, r18
 26c:	93 1f       	adc	r25, r19
 26e:	02 96       	adiw	r24, 0x02	; 2
 270:	fc 01       	movw	r30, r24
 272:	20 81       	ld	r18, Z
 274:	8f 81       	ldd	r24, Y+7	; 0x07
 276:	98 85       	ldd	r25, Y+8	; 0x08
 278:	62 2f       	mov	r22, r18
 27a:	4a e0       	ldi	r20, 0x0A	; 10
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 282:	29 81       	ldd	r18, Y+1	; 0x01
 284:	3a 81       	ldd	r19, Y+2	; 0x02
 286:	82 0f       	add	r24, r18
 288:	93 1f       	adc	r25, r19
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	89 83       	std	Y+1, r24	; 0x01
        n += p.print('.');
 28e:	8f 81       	ldd	r24, Y+7	; 0x07
 290:	98 85       	ldd	r25, Y+8	; 0x08
 292:	6e e2       	ldi	r22, 0x2E	; 46
 294:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 298:	29 81       	ldd	r18, Y+1	; 0x01
 29a:	3a 81       	ldd	r19, Y+2	; 0x02
 29c:	82 0f       	add	r24, r18
 29e:	93 1f       	adc	r25, r19
 2a0:	9a 83       	std	Y+2, r25	; 0x02
 2a2:	89 83       	std	Y+1, r24	; 0x01
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	9c 81       	ldd	r25, Y+4	; 0x04
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	9c 83       	std	Y+4, r25	; 0x04
 2ac:	8b 83       	std	Y+3, r24	; 0x03
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	8b 81       	ldd	r24, Y+3	; 0x03
 2b2:	9c 81       	ldd	r25, Y+4	; 0x04
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	91 05       	cpc	r25, r1
 2b8:	04 f0       	brlt	.+0      	; 0x2ba <_ZNK9IPAddress7printToER5Print+0x7e>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	22 23       	and	r18, r18
 2be:	01 f4       	brne	.+0      	; 0x2c0 <_ZNK9IPAddress7printToER5Print+0x84>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
 2c0:	8d 81       	ldd	r24, Y+5	; 0x05
 2c2:	9e 81       	ldd	r25, Y+6	; 0x06
 2c4:	fc 01       	movw	r30, r24
 2c6:	25 81       	ldd	r18, Z+5	; 0x05
 2c8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ca:	98 85       	ldd	r25, Y+8	; 0x08
 2cc:	62 2f       	mov	r22, r18
 2ce:	4a e0       	ldi	r20, 0x0A	; 10
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 2d6:	29 81       	ldd	r18, Y+1	; 0x01
 2d8:	3a 81       	ldd	r19, Y+2	; 0x02
 2da:	82 0f       	add	r24, r18
 2dc:	93 1f       	adc	r25, r19
 2de:	9a 83       	std	Y+2, r25	; 0x02
 2e0:	89 83       	std	Y+1, r24	; 0x01
    return n;
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
 2e6:	28 96       	adiw	r28, 0x08	; 8
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	cf 91       	pop	r28
 2f4:	df 91       	pop	r29
 2f6:	08 95       	ret

000002f8 <_Z41__static_initialization_and_destruction_0ii>:
 2f8:	0f 93       	push	r16
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	00 d0       	rcall	.+0      	; 0x300 <_Z41__static_initialization_and_destruction_0ii+0x8>
 300:	00 d0       	rcall	.+0      	; 0x302 <_Z41__static_initialization_and_destruction_0ii+0xa>
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	7c 83       	std	Y+4, r23	; 0x04
 30c:	6b 83       	std	Y+3, r22	; 0x03
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	91 05       	cpc	r25, r1
 316:	01 f4       	brne	.+0      	; 0x318 <_Z41__static_initialization_and_destruction_0ii+0x20>
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	9c 81       	ldd	r25, Y+4	; 0x04
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	8f 3f       	cpi	r24, 0xFF	; 255
 320:	92 07       	cpc	r25, r18
 322:	01 f4       	brne	.+0      	; 0x324 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	00 e0       	ldi	r16, 0x00	; 0
 330:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	cf 91       	pop	r28
 33e:	df 91       	pop	r29
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <_GLOBAL__I__ZN9IPAddressC2Ev>:
 344:	df 93       	push	r29
 346:	cf 93       	push	r28
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	6f ef       	ldi	r22, 0xFF	; 255
 352:	7f ef       	ldi	r23, 0xFF	; 255
 354:	0e 94 00 00 	call	0	; 0x0 <_ZN9PrintableC2Ev>
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c9a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000019  00000000  00000000  00000cce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000000  00000000  00000000  00000ce7  2**0
                  ALLOC
  3 .stab         000015c0  00000000  00000000  00000ce8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001622  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6lengthEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	fc 01       	movw	r30, r24
  14:	84 81       	ldd	r24, Z+4	; 0x04
  16:	95 81       	ldd	r25, Z+5	; 0x05
  18:	0f 90       	pop	r0
  1a:	0f 90       	pop	r0
  1c:	cf 91       	pop	r28
  1e:	df 91       	pop	r29
  20:	08 95       	ret

00000022 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
  22:	0f 93       	push	r16
  24:	1f 93       	push	r17
  26:	df 93       	push	r29
  28:	cf 93       	push	r28
  2a:	00 d0       	rcall	.+0      	; 0x2c <_ZN5Print5writeEPKc+0xa>
  2c:	00 d0       	rcall	.+0      	; 0x2e <_ZN5Print5writeEPKc+0xc>
  2e:	cd b7       	in	r28, 0x3d	; 61
  30:	de b7       	in	r29, 0x3e	; 62
  32:	9a 83       	std	Y+2, r25	; 0x02
  34:	89 83       	std	Y+1, r24	; 0x01
  36:	7c 83       	std	Y+4, r23	; 0x04
  38:	6b 83       	std	Y+3, r22	; 0x03
  3a:	89 81       	ldd	r24, Y+1	; 0x01
  3c:	9a 81       	ldd	r25, Y+2	; 0x02
  3e:	fc 01       	movw	r30, r24
  40:	80 81       	ld	r24, Z
  42:	91 81       	ldd	r25, Z+1	; 0x01
  44:	02 96       	adiw	r24, 0x02	; 2
  46:	fc 01       	movw	r30, r24
  48:	00 81       	ld	r16, Z
  4a:	11 81       	ldd	r17, Z+1	; 0x01
  4c:	8b 81       	ldd	r24, Y+3	; 0x03
  4e:	9c 81       	ldd	r25, Y+4	; 0x04
  50:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  54:	9c 01       	movw	r18, r24
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	9a 81       	ldd	r25, Y+2	; 0x02
  5a:	4b 81       	ldd	r20, Y+3	; 0x03
  5c:	5c 81       	ldd	r21, Y+4	; 0x04
  5e:	ba 01       	movw	r22, r20
  60:	a9 01       	movw	r20, r18
  62:	f8 01       	movw	r30, r16
  64:	09 95       	icall
  66:	0f 90       	pop	r0
  68:	0f 90       	pop	r0
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	cf 91       	pop	r28
  70:	df 91       	pop	r29
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	08 95       	ret

00000078 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  78:	df 93       	push	r29
  7a:	cf 93       	push	r28
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	de b7       	in	r29, 0x3e	; 62
  80:	28 97       	sbiw	r28, 0x08	; 8
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	f8 94       	cli
  86:	de bf       	out	0x3e, r29	; 62
  88:	0f be       	out	0x3f, r0	; 63
  8a:	cd bf       	out	0x3d, r28	; 61
  8c:	9c 83       	std	Y+4, r25	; 0x04
  8e:	8b 83       	std	Y+3, r24	; 0x03
  90:	7e 83       	std	Y+6, r23	; 0x06
  92:	6d 83       	std	Y+5, r22	; 0x05
  94:	58 87       	std	Y+8, r21	; 0x08
  96:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = 0;
  98:	1a 82       	std	Y+2, r1	; 0x02
  9a:	19 82       	std	Y+1, r1	; 0x01
  while (size--) {
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZN5Print5writeEPKhj+0x26>
    n += write(*buffer++);
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	9c 81       	ldd	r25, Y+4	; 0x04
  a2:	fc 01       	movw	r30, r24
  a4:	80 81       	ld	r24, Z
  a6:	91 81       	ldd	r25, Z+1	; 0x01
  a8:	fc 01       	movw	r30, r24
  aa:	20 81       	ld	r18, Z
  ac:	31 81       	ldd	r19, Z+1	; 0x01
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	9e 81       	ldd	r25, Y+6	; 0x06
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	8d 81       	ldd	r24, Y+5	; 0x05
  b8:	9e 81       	ldd	r25, Y+6	; 0x06
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	9e 83       	std	Y+6, r25	; 0x06
  be:	8d 83       	std	Y+5, r24	; 0x05
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	9c 81       	ldd	r25, Y+4	; 0x04
  c4:	64 2f       	mov	r22, r20
  c6:	f9 01       	movw	r30, r18
  c8:	09 95       	icall
  ca:	29 81       	ldd	r18, Y+1	; 0x01
  cc:	3a 81       	ldd	r19, Y+2	; 0x02
  ce:	82 0f       	add	r24, r18
  d0:	93 1f       	adc	r25, r19
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	89 83       	std	Y+1, r24	; 0x01

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	8f 81       	ldd	r24, Y+7	; 0x07
  da:	98 85       	ldd	r25, Y+8	; 0x08
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	01 f4       	brne	.+0      	; 0xe0 <_ZN5Print5writeEPKhj+0x68>
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	8f 81       	ldd	r24, Y+7	; 0x07
  e4:	98 85       	ldd	r25, Y+8	; 0x08
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	98 87       	std	Y+8, r25	; 0x08
  ea:	8f 83       	std	Y+7, r24	; 0x07
  ec:	22 23       	and	r18, r18
  ee:	01 f4       	brne	.+0      	; 0xf0 <_ZN5Print5writeEPKhj+0x78>
    n += write(*buffer++);
  }
  return n;
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
  f4:	28 96       	adiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 106:	1f 93       	push	r17
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	2c 97       	sbiw	r28, 0x0c	; 12
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	9a 87       	std	Y+10, r25	; 0x0a
 11e:	89 87       	std	Y+9, r24	; 0x09
 120:	7c 87       	std	Y+12, r23	; 0x0c
 122:	6b 87       	std	Y+11, r22	; 0x0b
  const prog_char *p = (const prog_char *)ifsh;
 124:	8b 85       	ldd	r24, Y+11	; 0x0b
 126:	9c 85       	ldd	r25, Y+12	; 0x0c
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	89 83       	std	Y+1, r24	; 0x01
  size_t n = 0;
 12c:	1c 82       	std	Y+4, r1	; 0x04
 12e:	1b 82       	std	Y+3, r1	; 0x03
  while (1) {
    unsigned char c = pgm_read_byte(p++);
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	9a 81       	ldd	r25, Y+2	; 0x02
 134:	9e 83       	std	Y+6, r25	; 0x06
 136:	8d 83       	std	Y+5, r24	; 0x05
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	9a 81       	ldd	r25, Y+2	; 0x02
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	9a 83       	std	Y+2, r25	; 0x02
 140:	89 83       	std	Y+1, r24	; 0x01
 142:	8d 81       	ldd	r24, Y+5	; 0x05
 144:	9e 81       	ldd	r25, Y+6	; 0x06
 146:	fc 01       	movw	r30, r24
 148:	14 91       	lpm	r17, Z
 14a:	1f 83       	std	Y+7, r17	; 0x07
 14c:	8f 81       	ldd	r24, Y+7	; 0x07
 14e:	88 87       	std	Y+8, r24	; 0x08
    if (c == 0) break;
 150:	88 85       	ldd	r24, Y+8	; 0x08
 152:	88 23       	and	r24, r24
 154:	01 f4       	brne	.+0      	; 0x156 <_ZN5Print5printEPK19__FlashStringHelper+0x50>
    n += write(c);
  }
  return n;
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	9c 81       	ldd	r25, Y+4	; 0x04
}
 15a:	2c 96       	adiw	r28, 0x0c	; 12
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	cf 91       	pop	r28
 168:	df 91       	pop	r29
 16a:	1f 91       	pop	r17
 16c:	08 95       	ret
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
 16e:	89 85       	ldd	r24, Y+9	; 0x09
 170:	9a 85       	ldd	r25, Y+10	; 0x0a
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	31 81       	ldd	r19, Z+1	; 0x01
 17e:	89 85       	ldd	r24, Y+9	; 0x09
 180:	9a 85       	ldd	r25, Y+10	; 0x0a
 182:	68 85       	ldd	r22, Y+8	; 0x08
 184:	f9 01       	movw	r30, r18
 186:	09 95       	icall
 188:	2b 81       	ldd	r18, Y+3	; 0x03
 18a:	3c 81       	ldd	r19, Y+4	; 0x04
 18c:	82 0f       	add	r24, r18
 18e:	93 1f       	adc	r25, r19
 190:	9c 83       	std	Y+4, r25	; 0x04
 192:	8b 83       	std	Y+3, r24	; 0x03

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
 194:	00 c0       	rjmp	.+0      	; 0x196 <_ZN5Print5printERK6String>

00000196 <_ZN5Print5printERK6String>:
  }
  return n;
}

size_t Print::print(const String &s)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	df 93       	push	r29
 19c:	cf 93       	push	r28
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	28 97       	sbiw	r28, 0x08	; 8
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	9e 83       	std	Y+6, r25	; 0x06
 1b0:	8d 83       	std	Y+5, r24	; 0x05
 1b2:	78 87       	std	Y+8, r23	; 0x08
 1b4:	6f 83       	std	Y+7, r22	; 0x07
  size_t n = 0;
 1b6:	1a 82       	std	Y+2, r1	; 0x02
 1b8:	19 82       	std	Y+1, r1	; 0x01
  for (uint16_t i = 0; i < s.length(); i++) {
 1ba:	1c 82       	std	Y+4, r1	; 0x04
 1bc:	1b 82       	std	Y+3, r1	; 0x03
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <_ZN5Print5printERK6String+0x2a>
    n += write(s[i]);
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	fc 01       	movw	r30, r24
 1c6:	80 81       	ld	r24, Z
 1c8:	91 81       	ldd	r25, Z+1	; 0x01
 1ca:	fc 01       	movw	r30, r24
 1cc:	00 81       	ld	r16, Z
 1ce:	11 81       	ldd	r17, Z+1	; 0x01
 1d0:	8f 81       	ldd	r24, Y+7	; 0x07
 1d2:	98 85       	ldd	r25, Y+8	; 0x08
 1d4:	2b 81       	ldd	r18, Y+3	; 0x03
 1d6:	3c 81       	ldd	r19, Y+4	; 0x04
 1d8:	b9 01       	movw	r22, r18
 1da:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 1de:	28 2f       	mov	r18, r24
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	62 2f       	mov	r22, r18
 1e6:	f8 01       	movw	r30, r16
 1e8:	09 95       	icall
 1ea:	29 81       	ldd	r18, Y+1	; 0x01
 1ec:	3a 81       	ldd	r19, Y+2	; 0x02
 1ee:	82 0f       	add	r24, r18
 1f0:	93 1f       	adc	r25, r19
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	9c 81       	ldd	r25, Y+4	; 0x04
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	9c 83       	std	Y+4, r25	; 0x04
 1fe:	8b 83       	std	Y+3, r24	; 0x03
 200:	8f 81       	ldd	r24, Y+7	; 0x07
 202:	98 85       	ldd	r25, Y+8	; 0x08
 204:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 208:	9c 01       	movw	r18, r24
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	82 17       	cp	r24, r18
 212:	93 07       	cpc	r25, r19
 214:	00 f0       	brcs	.+0      	; 0x216 <_ZN5Print5printERK6String+0x80>
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	44 23       	and	r20, r20
 21a:	01 f4       	brne	.+0      	; 0x21c <_ZN5Print5printERK6String+0x86>
    n += write(s[i]);
  }
  return n;
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 220:	28 96       	adiw	r28, 0x08	; 8
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 236:	df 93       	push	r29
 238:	cf 93       	push	r28
 23a:	00 d0       	rcall	.+0      	; 0x23c <_ZN5Print5printEPKc+0x6>
 23c:	00 d0       	rcall	.+0      	; 0x23e <_ZN5Print5printEPKc+0x8>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	9a 83       	std	Y+2, r25	; 0x02
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	7c 83       	std	Y+4, r23	; 0x04
 248:	6b 83       	std	Y+3, r22	; 0x03
  return write(str);
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	2b 81       	ldd	r18, Y+3	; 0x03
 250:	3c 81       	ldd	r19, Y+4	; 0x04
 252:	b9 01       	movw	r22, r18
 254:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	cf 91       	pop	r28
 262:	df 91       	pop	r29
 264:	08 95       	ret

00000266 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	00 d0       	rcall	.+0      	; 0x26c <_ZN5Print5printEc+0x6>
 26c:	0f 92       	push	r0
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	6b 83       	std	Y+3, r22	; 0x03
  return write(c);
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 81       	ldd	r25, Y+2	; 0x02
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	fc 01       	movw	r30, r24
 284:	20 81       	ld	r18, Z
 286:	31 81       	ldd	r19, Z+1	; 0x01
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	6b 81       	ldd	r22, Y+3	; 0x03
 28e:	f9 01       	movw	r30, r18
 290:	09 95       	icall
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	08 95       	ret

0000029e <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <_ZN5Print5printEhi+0x6>
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <_ZN5Print5printEhi+0x8>
 2a6:	0f 92       	push	r0
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	9a 83       	std	Y+2, r25	; 0x02
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	6b 83       	std	Y+3, r22	; 0x03
 2b2:	5d 83       	std	Y+5, r21	; 0x05
 2b4:	4c 83       	std	Y+4, r20	; 0x04
  return print((unsigned long) b, base);
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	28 2f       	mov	r18, r24
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	ec 81       	ldd	r30, Y+4	; 0x04
 2c6:	fd 81       	ldd	r31, Y+5	; 0x05
 2c8:	ba 01       	movw	r22, r20
 2ca:	a9 01       	movw	r20, r18
 2cc:	9f 01       	movw	r18, r30
 2ce:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	cf 91       	pop	r28
 2de:	df 91       	pop	r29
 2e0:	08 95       	ret

000002e2 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 2e2:	df 93       	push	r29
 2e4:	cf 93       	push	r28
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZN5Print5printEii+0x6>
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <_ZN5Print5printEii+0x8>
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <_ZN5Print5printEii+0xa>
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	9a 83       	std	Y+2, r25	; 0x02
 2f2:	89 83       	std	Y+1, r24	; 0x01
 2f4:	7c 83       	std	Y+4, r23	; 0x04
 2f6:	6b 83       	std	Y+3, r22	; 0x03
 2f8:	5e 83       	std	Y+6, r21	; 0x06
 2fa:	4d 83       	std	Y+5, r20	; 0x05
  return print((long) n, base);
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	9c 81       	ldd	r25, Y+4	; 0x04
 300:	9c 01       	movw	r18, r24
 302:	44 27       	eor	r20, r20
 304:	37 fd       	sbrc	r19, 7
 306:	40 95       	com	r20
 308:	54 2f       	mov	r21, r20
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	ed 81       	ldd	r30, Y+5	; 0x05
 310:	fe 81       	ldd	r31, Y+6	; 0x06
 312:	ba 01       	movw	r22, r20
 314:	a9 01       	movw	r20, r18
 316:	9f 01       	movw	r18, r30
 318:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 31c:	26 96       	adiw	r28, 0x06	; 6
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <_ZN5Print5printEji>:

size_t Print::print(unsigned int n, int base)
{
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	00 d0       	rcall	.+0      	; 0x334 <_ZN5Print5printEji+0x6>
 334:	00 d0       	rcall	.+0      	; 0x336 <_ZN5Print5printEji+0x8>
 336:	00 d0       	rcall	.+0      	; 0x338 <_ZN5Print5printEji+0xa>
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	7c 83       	std	Y+4, r23	; 0x04
 342:	6b 83       	std	Y+3, r22	; 0x03
 344:	5e 83       	std	Y+6, r21	; 0x06
 346:	4d 83       	std	Y+5, r20	; 0x05
  return print((unsigned long) n, base);
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	9c 81       	ldd	r25, Y+4	; 0x04
 34c:	9c 01       	movw	r18, r24
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	9a 81       	ldd	r25, Y+2	; 0x02
 356:	ed 81       	ldd	r30, Y+5	; 0x05
 358:	fe 81       	ldd	r31, Y+6	; 0x06
 35a:	ba 01       	movw	r22, r20
 35c:	a9 01       	movw	r20, r18
 35e:	9f 01       	movw	r18, r30
 360:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 364:	26 96       	adiw	r28, 0x06	; 6
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	cf 91       	pop	r28
 372:	df 91       	pop	r29
 374:	08 95       	ret

00000376 <_ZN5Print5printEli>:

size_t Print::print(long n, int base)
{
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	2a 97       	sbiw	r28, 0x0a	; 10
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
 38a:	9c 83       	std	Y+4, r25	; 0x04
 38c:	8b 83       	std	Y+3, r24	; 0x03
 38e:	4d 83       	std	Y+5, r20	; 0x05
 390:	5e 83       	std	Y+6, r21	; 0x06
 392:	6f 83       	std	Y+7, r22	; 0x07
 394:	78 87       	std	Y+8, r23	; 0x08
 396:	3a 87       	std	Y+10, r19	; 0x0a
 398:	29 87       	std	Y+9, r18	; 0x09
  if (base == 0) {
 39a:	89 85       	ldd	r24, Y+9	; 0x09
 39c:	9a 85       	ldd	r25, Y+10	; 0x0a
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	01 f4       	brne	.+0      	; 0x3a2 <_ZN5Print5printEli+0x2c>
    return write(n);
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	9c 81       	ldd	r25, Y+4	; 0x04
 3a6:	fc 01       	movw	r30, r24
 3a8:	80 81       	ld	r24, Z
 3aa:	91 81       	ldd	r25, Z+1	; 0x01
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 81       	ld	r18, Z
 3b0:	31 81       	ldd	r19, Z+1	; 0x01
 3b2:	4d 81       	ldd	r20, Y+5	; 0x05
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	9c 81       	ldd	r25, Y+4	; 0x04
 3b8:	64 2f       	mov	r22, r20
 3ba:	f9 01       	movw	r30, r18
 3bc:	09 95       	icall
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <_ZN5Print5printEli+0x4a>
  } else if (base == 10) {
 3c0:	89 85       	ldd	r24, Y+9	; 0x09
 3c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3c4:	8a 30       	cpi	r24, 0x0A	; 10
 3c6:	91 05       	cpc	r25, r1
 3c8:	01 f4       	brne	.+0      	; 0x3ca <_ZN5Print5printEli+0x54>
    if (n < 0) {
 3ca:	8d 81       	ldd	r24, Y+5	; 0x05
 3cc:	9e 81       	ldd	r25, Y+6	; 0x06
 3ce:	af 81       	ldd	r26, Y+7	; 0x07
 3d0:	b8 85       	ldd	r27, Y+8	; 0x08
 3d2:	bb 23       	and	r27, r27
 3d4:	04 f4       	brge	.+0      	; 0x3d6 <_ZN5Print5printEli+0x60>
      int t = print('-');
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	9c 81       	ldd	r25, Y+4	; 0x04
 3da:	6d e2       	ldi	r22, 0x2D	; 45
 3dc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 3e0:	9a 83       	std	Y+2, r25	; 0x02
 3e2:	89 83       	std	Y+1, r24	; 0x01
      n = -n;
 3e4:	8d 81       	ldd	r24, Y+5	; 0x05
 3e6:	9e 81       	ldd	r25, Y+6	; 0x06
 3e8:	af 81       	ldd	r26, Y+7	; 0x07
 3ea:	b8 85       	ldd	r27, Y+8	; 0x08
 3ec:	b0 95       	com	r27
 3ee:	a0 95       	com	r26
 3f0:	90 95       	com	r25
 3f2:	81 95       	neg	r24
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	af 4f       	sbci	r26, 0xFF	; 255
 3f8:	bf 4f       	sbci	r27, 0xFF	; 255
 3fa:	8d 83       	std	Y+5, r24	; 0x05
 3fc:	9e 83       	std	Y+6, r25	; 0x06
 3fe:	af 83       	std	Y+7, r26	; 0x07
 400:	b8 87       	std	Y+8, r27	; 0x08
      return printNumber(n, 10) + t;
 402:	2d 81       	ldd	r18, Y+5	; 0x05
 404:	3e 81       	ldd	r19, Y+6	; 0x06
 406:	4f 81       	ldd	r20, Y+7	; 0x07
 408:	58 85       	ldd	r21, Y+8	; 0x08
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	9c 81       	ldd	r25, Y+4	; 0x04
 40e:	ba 01       	movw	r22, r20
 410:	a9 01       	movw	r20, r18
 412:	2a e0       	ldi	r18, 0x0A	; 10
 414:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 418:	9c 01       	movw	r18, r24
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	82 0f       	add	r24, r18
 420:	93 1f       	adc	r25, r19
 422:	00 c0       	rjmp	.+0      	; 0x424 <_ZN5Print5printEli+0xae>
    }
    return printNumber(n, 10);
 424:	2d 81       	ldd	r18, Y+5	; 0x05
 426:	3e 81       	ldd	r19, Y+6	; 0x06
 428:	4f 81       	ldd	r20, Y+7	; 0x07
 42a:	58 85       	ldd	r21, Y+8	; 0x08
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	9c 81       	ldd	r25, Y+4	; 0x04
 430:	ba 01       	movw	r22, r20
 432:	a9 01       	movw	r20, r18
 434:	2a e0       	ldi	r18, 0x0A	; 10
 436:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <_ZN5Print5printEli+0xc6>
  } else {
    return printNumber(n, base);
 43c:	2d 81       	ldd	r18, Y+5	; 0x05
 43e:	3e 81       	ldd	r19, Y+6	; 0x06
 440:	4f 81       	ldd	r20, Y+7	; 0x07
 442:	58 85       	ldd	r21, Y+8	; 0x08
 444:	e9 85       	ldd	r30, Y+9	; 0x09
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	9c 81       	ldd	r25, Y+4	; 0x04
 44a:	ba 01       	movw	r22, r20
 44c:	a9 01       	movw	r20, r18
 44e:	2e 2f       	mov	r18, r30
 450:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
}
 454:	2a 96       	adiw	r28, 0x0a	; 10
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	cf 91       	pop	r28
 462:	df 91       	pop	r29
 464:	08 95       	ret

00000466 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 466:	df 93       	push	r29
 468:	cf 93       	push	r28
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	28 97       	sbiw	r28, 0x08	; 8
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	9a 83       	std	Y+2, r25	; 0x02
 47c:	89 83       	std	Y+1, r24	; 0x01
 47e:	4b 83       	std	Y+3, r20	; 0x03
 480:	5c 83       	std	Y+4, r21	; 0x04
 482:	6d 83       	std	Y+5, r22	; 0x05
 484:	7e 83       	std	Y+6, r23	; 0x06
 486:	38 87       	std	Y+8, r19	; 0x08
 488:	2f 83       	std	Y+7, r18	; 0x07
  if (base == 0) return write(n);
 48a:	8f 81       	ldd	r24, Y+7	; 0x07
 48c:	98 85       	ldd	r25, Y+8	; 0x08
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	01 f4       	brne	.+0      	; 0x492 <_ZN5Print5printEmi+0x2c>
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	9a 81       	ldd	r25, Y+2	; 0x02
 496:	fc 01       	movw	r30, r24
 498:	80 81       	ld	r24, Z
 49a:	91 81       	ldd	r25, Z+1	; 0x01
 49c:	fc 01       	movw	r30, r24
 49e:	20 81       	ld	r18, Z
 4a0:	31 81       	ldd	r19, Z+1	; 0x01
 4a2:	4b 81       	ldd	r20, Y+3	; 0x03
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	9a 81       	ldd	r25, Y+2	; 0x02
 4a8:	64 2f       	mov	r22, r20
 4aa:	f9 01       	movw	r30, r18
 4ac:	09 95       	icall
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <_ZN5Print5printEmi+0x4a>
  else return printNumber(n, base);
 4b0:	ef 81       	ldd	r30, Y+7	; 0x07
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	9a 81       	ldd	r25, Y+2	; 0x02
 4b6:	2b 81       	ldd	r18, Y+3	; 0x03
 4b8:	3c 81       	ldd	r19, Y+4	; 0x04
 4ba:	4d 81       	ldd	r20, Y+5	; 0x05
 4bc:	5e 81       	ldd	r21, Y+6	; 0x06
 4be:	ba 01       	movw	r22, r20
 4c0:	a9 01       	movw	r20, r18
 4c2:	2e 2f       	mov	r18, r30
 4c4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 4c8:	28 96       	adiw	r28, 0x08	; 8
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	cf 91       	pop	r28
 4d6:	df 91       	pop	r29
 4d8:	08 95       	ret

000004da <_ZN5Print5printEdi>:

size_t Print::print(double n, int digits)
{
 4da:	df 93       	push	r29
 4dc:	cf 93       	push	r28
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	28 97       	sbiw	r28, 0x08	; 8
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
 4ee:	9a 83       	std	Y+2, r25	; 0x02
 4f0:	89 83       	std	Y+1, r24	; 0x01
 4f2:	4b 83       	std	Y+3, r20	; 0x03
 4f4:	5c 83       	std	Y+4, r21	; 0x04
 4f6:	6d 83       	std	Y+5, r22	; 0x05
 4f8:	7e 83       	std	Y+6, r23	; 0x06
 4fa:	38 87       	std	Y+8, r19	; 0x08
 4fc:	2f 83       	std	Y+7, r18	; 0x07
  return printFloat(n, digits);
 4fe:	ef 81       	ldd	r30, Y+7	; 0x07
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	9a 81       	ldd	r25, Y+2	; 0x02
 504:	2b 81       	ldd	r18, Y+3	; 0x03
 506:	3c 81       	ldd	r19, Y+4	; 0x04
 508:	4d 81       	ldd	r20, Y+5	; 0x05
 50a:	5e 81       	ldd	r21, Y+6	; 0x06
 50c:	ba 01       	movw	r22, r20
 50e:	a9 01       	movw	r20, r18
 510:	2e 2f       	mov	r18, r30
 512:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 516:	28 96       	adiw	r28, 0x08	; 8
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	cf 91       	pop	r28
 524:	df 91       	pop	r29
 526:	08 95       	ret

00000528 <_ZN5Print7printlnEPK19__FlashStringHelper>:

size_t Print::println(const __FlashStringHelper *ifsh)
{
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	00 d0       	rcall	.+0      	; 0x52e <_ZN5Print7printlnEPK19__FlashStringHelper+0x6>
 52e:	00 d0       	rcall	.+0      	; 0x530 <_ZN5Print7printlnEPK19__FlashStringHelper+0x8>
 530:	00 d0       	rcall	.+0      	; 0x532 <_ZN5Print7printlnEPK19__FlashStringHelper+0xa>
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	9c 83       	std	Y+4, r25	; 0x04
 538:	8b 83       	std	Y+3, r24	; 0x03
 53a:	7e 83       	std	Y+6, r23	; 0x06
 53c:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(ifsh);
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	9c 81       	ldd	r25, Y+4	; 0x04
 542:	2d 81       	ldd	r18, Y+5	; 0x05
 544:	3e 81       	ldd	r19, Y+6	; 0x06
 546:	b9 01       	movw	r22, r18
 548:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 54c:	9a 83       	std	Y+2, r25	; 0x02
 54e:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	9c 81       	ldd	r25, Y+4	; 0x04
 554:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 558:	29 81       	ldd	r18, Y+1	; 0x01
 55a:	3a 81       	ldd	r19, Y+2	; 0x02
 55c:	82 0f       	add	r24, r18
 55e:	93 1f       	adc	r25, r19
 560:	9a 83       	std	Y+2, r25	; 0x02
 562:	89 83       	std	Y+1, r24	; 0x01
  return n;
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	9a 81       	ldd	r25, Y+2	; 0x02
}
 568:	26 96       	adiw	r28, 0x06	; 6
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	cf 91       	pop	r28
 576:	df 91       	pop	r29
 578:	08 95       	ret

0000057a <_ZN5Print5printERK9Printable>:

size_t Print::print(const Printable& x)
{
 57a:	df 93       	push	r29
 57c:	cf 93       	push	r28
 57e:	00 d0       	rcall	.+0      	; 0x580 <_ZN5Print5printERK9Printable+0x6>
 580:	00 d0       	rcall	.+0      	; 0x582 <_ZN5Print5printERK9Printable+0x8>
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	9a 83       	std	Y+2, r25	; 0x02
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	7c 83       	std	Y+4, r23	; 0x04
 58c:	6b 83       	std	Y+3, r22	; 0x03
  return x.printTo(*this);
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	9c 81       	ldd	r25, Y+4	; 0x04
 592:	fc 01       	movw	r30, r24
 594:	80 81       	ld	r24, Z
 596:	91 81       	ldd	r25, Z+1	; 0x01
 598:	fc 01       	movw	r30, r24
 59a:	20 81       	ld	r18, Z
 59c:	31 81       	ldd	r19, Z+1	; 0x01
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	9c 81       	ldd	r25, Y+4	; 0x04
 5a2:	49 81       	ldd	r20, Y+1	; 0x01
 5a4:	5a 81       	ldd	r21, Y+2	; 0x02
 5a6:	ba 01       	movw	r22, r20
 5a8:	f9 01       	movw	r30, r18
 5aa:	09 95       	icall
}
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	cf 91       	pop	r28
 5b6:	df 91       	pop	r29
 5b8:	08 95       	ret

000005ba <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 5ba:	df 93       	push	r29
 5bc:	cf 93       	push	r28
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <_ZN5Print7printlnEv+0x6>
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <_ZN5Print7printlnEv+0x8>
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	9c 83       	std	Y+4, r25	; 0x04
 5c8:	8b 83       	std	Y+3, r24	; 0x03
  size_t n = print('\r');
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	9c 81       	ldd	r25, Y+4	; 0x04
 5ce:	6d e0       	ldi	r22, 0x0D	; 13
 5d0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 5d4:	9a 83       	std	Y+2, r25	; 0x02
 5d6:	89 83       	std	Y+1, r24	; 0x01
  n += print('\n');
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	9c 81       	ldd	r25, Y+4	; 0x04
 5dc:	6a e0       	ldi	r22, 0x0A	; 10
 5de:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 5e2:	29 81       	ldd	r18, Y+1	; 0x01
 5e4:	3a 81       	ldd	r19, Y+2	; 0x02
 5e6:	82 0f       	add	r24, r18
 5e8:	93 1f       	adc	r25, r19
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	89 83       	std	Y+1, r24	; 0x01
  return n;
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	cf 91       	pop	r28
 5fc:	df 91       	pop	r29
 5fe:	08 95       	ret

00000600 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
 600:	df 93       	push	r29
 602:	cf 93       	push	r28
 604:	00 d0       	rcall	.+0      	; 0x606 <_ZN5Print7printlnERK6String+0x6>
 606:	00 d0       	rcall	.+0      	; 0x608 <_ZN5Print7printlnERK6String+0x8>
 608:	00 d0       	rcall	.+0      	; 0x60a <_ZN5Print7printlnERK6String+0xa>
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	9c 83       	std	Y+4, r25	; 0x04
 610:	8b 83       	std	Y+3, r24	; 0x03
 612:	7e 83       	std	Y+6, r23	; 0x06
 614:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(s);
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	9c 81       	ldd	r25, Y+4	; 0x04
 61a:	2d 81       	ldd	r18, Y+5	; 0x05
 61c:	3e 81       	ldd	r19, Y+6	; 0x06
 61e:	b9 01       	movw	r22, r18
 620:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 624:	9a 83       	std	Y+2, r25	; 0x02
 626:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 628:	8b 81       	ldd	r24, Y+3	; 0x03
 62a:	9c 81       	ldd	r25, Y+4	; 0x04
 62c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 630:	29 81       	ldd	r18, Y+1	; 0x01
 632:	3a 81       	ldd	r19, Y+2	; 0x02
 634:	82 0f       	add	r24, r18
 636:	93 1f       	adc	r25, r19
 638:	9a 83       	std	Y+2, r25	; 0x02
 63a:	89 83       	std	Y+1, r24	; 0x01
  return n;
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 640:	26 96       	adiw	r28, 0x06	; 6
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	de bf       	out	0x3e, r29	; 62
 648:	0f be       	out	0x3f, r0	; 63
 64a:	cd bf       	out	0x3d, r28	; 61
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	08 95       	ret

00000652 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 652:	df 93       	push	r29
 654:	cf 93       	push	r28
 656:	00 d0       	rcall	.+0      	; 0x658 <_ZN5Print7printlnEPKc+0x6>
 658:	00 d0       	rcall	.+0      	; 0x65a <_ZN5Print7printlnEPKc+0x8>
 65a:	00 d0       	rcall	.+0      	; 0x65c <_ZN5Print7printlnEPKc+0xa>
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	9c 83       	std	Y+4, r25	; 0x04
 662:	8b 83       	std	Y+3, r24	; 0x03
 664:	7e 83       	std	Y+6, r23	; 0x06
 666:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(c);
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	9c 81       	ldd	r25, Y+4	; 0x04
 66c:	2d 81       	ldd	r18, Y+5	; 0x05
 66e:	3e 81       	ldd	r19, Y+6	; 0x06
 670:	b9 01       	movw	r22, r18
 672:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 676:	9a 83       	std	Y+2, r25	; 0x02
 678:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	9c 81       	ldd	r25, Y+4	; 0x04
 67e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 682:	29 81       	ldd	r18, Y+1	; 0x01
 684:	3a 81       	ldd	r19, Y+2	; 0x02
 686:	82 0f       	add	r24, r18
 688:	93 1f       	adc	r25, r19
 68a:	9a 83       	std	Y+2, r25	; 0x02
 68c:	89 83       	std	Y+1, r24	; 0x01
  return n;
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	9a 81       	ldd	r25, Y+2	; 0x02
}
 692:	26 96       	adiw	r28, 0x06	; 6
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	de bf       	out	0x3e, r29	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	cd bf       	out	0x3d, r28	; 61
 69e:	cf 91       	pop	r28
 6a0:	df 91       	pop	r29
 6a2:	08 95       	ret

000006a4 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 6a4:	df 93       	push	r29
 6a6:	cf 93       	push	r28
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <_ZN5Print7printlnEc+0x6>
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <_ZN5Print7printlnEc+0x8>
 6ac:	0f 92       	push	r0
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	9c 83       	std	Y+4, r25	; 0x04
 6b4:	8b 83       	std	Y+3, r24	; 0x03
 6b6:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(c);
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	9c 81       	ldd	r25, Y+4	; 0x04
 6bc:	6d 81       	ldd	r22, Y+5	; 0x05
 6be:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 6c2:	9a 83       	std	Y+2, r25	; 0x02
 6c4:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 6ce:	29 81       	ldd	r18, Y+1	; 0x01
 6d0:	3a 81       	ldd	r19, Y+2	; 0x02
 6d2:	82 0f       	add	r24, r18
 6d4:	93 1f       	adc	r25, r19
 6d6:	9a 83       	std	Y+2, r25	; 0x02
 6d8:	89 83       	std	Y+1, r24	; 0x01
  return n;
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <_ZN5Print7printlnEhi>:

size_t Print::println(unsigned char b, int base)
{
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	27 97       	sbiw	r28, 0x07	; 7
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
 702:	9c 83       	std	Y+4, r25	; 0x04
 704:	8b 83       	std	Y+3, r24	; 0x03
 706:	6d 83       	std	Y+5, r22	; 0x05
 708:	5f 83       	std	Y+7, r21	; 0x07
 70a:	4e 83       	std	Y+6, r20	; 0x06
  size_t n = print(b, base);
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	9c 81       	ldd	r25, Y+4	; 0x04
 710:	2e 81       	ldd	r18, Y+6	; 0x06
 712:	3f 81       	ldd	r19, Y+7	; 0x07
 714:	6d 81       	ldd	r22, Y+5	; 0x05
 716:	a9 01       	movw	r20, r18
 718:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 71c:	9a 83       	std	Y+2, r25	; 0x02
 71e:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	9c 81       	ldd	r25, Y+4	; 0x04
 724:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 728:	29 81       	ldd	r18, Y+1	; 0x01
 72a:	3a 81       	ldd	r19, Y+2	; 0x02
 72c:	82 0f       	add	r24, r18
 72e:	93 1f       	adc	r25, r19
 730:	9a 83       	std	Y+2, r25	; 0x02
 732:	89 83       	std	Y+1, r24	; 0x01
  return n;
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	9a 81       	ldd	r25, Y+2	; 0x02
}
 738:	27 96       	adiw	r28, 0x07	; 7
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	cf 91       	pop	r28
 746:	df 91       	pop	r29
 748:	08 95       	ret

0000074a <_ZN5Print7printlnEii>:

size_t Print::println(int num, int base)
{
 74a:	df 93       	push	r29
 74c:	cf 93       	push	r28
 74e:	cd b7       	in	r28, 0x3d	; 61
 750:	de b7       	in	r29, 0x3e	; 62
 752:	28 97       	sbiw	r28, 0x08	; 8
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	9c 83       	std	Y+4, r25	; 0x04
 760:	8b 83       	std	Y+3, r24	; 0x03
 762:	7e 83       	std	Y+6, r23	; 0x06
 764:	6d 83       	std	Y+5, r22	; 0x05
 766:	58 87       	std	Y+8, r21	; 0x08
 768:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = print(num, base);
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	9c 81       	ldd	r25, Y+4	; 0x04
 76e:	4d 81       	ldd	r20, Y+5	; 0x05
 770:	5e 81       	ldd	r21, Y+6	; 0x06
 772:	2f 81       	ldd	r18, Y+7	; 0x07
 774:	38 85       	ldd	r19, Y+8	; 0x08
 776:	ba 01       	movw	r22, r20
 778:	a9 01       	movw	r20, r18
 77a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 77e:	9a 83       	std	Y+2, r25	; 0x02
 780:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	9c 81       	ldd	r25, Y+4	; 0x04
 786:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 78a:	29 81       	ldd	r18, Y+1	; 0x01
 78c:	3a 81       	ldd	r19, Y+2	; 0x02
 78e:	82 0f       	add	r24, r18
 790:	93 1f       	adc	r25, r19
 792:	9a 83       	std	Y+2, r25	; 0x02
 794:	89 83       	std	Y+1, r24	; 0x01
  return n;
 796:	89 81       	ldd	r24, Y+1	; 0x01
 798:	9a 81       	ldd	r25, Y+2	; 0x02
}
 79a:	28 96       	adiw	r28, 0x08	; 8
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	de bf       	out	0x3e, r29	; 62
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	cd bf       	out	0x3d, r28	; 61
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	08 95       	ret

000007ac <_ZN5Print7printlnEji>:

size_t Print::println(unsigned int num, int base)
{
 7ac:	df 93       	push	r29
 7ae:	cf 93       	push	r28
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	28 97       	sbiw	r28, 0x08	; 8
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	f8 94       	cli
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	cd bf       	out	0x3d, r28	; 61
 7c0:	9c 83       	std	Y+4, r25	; 0x04
 7c2:	8b 83       	std	Y+3, r24	; 0x03
 7c4:	7e 83       	std	Y+6, r23	; 0x06
 7c6:	6d 83       	std	Y+5, r22	; 0x05
 7c8:	58 87       	std	Y+8, r21	; 0x08
 7ca:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = print(num, base);
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	9c 81       	ldd	r25, Y+4	; 0x04
 7d0:	4d 81       	ldd	r20, Y+5	; 0x05
 7d2:	5e 81       	ldd	r21, Y+6	; 0x06
 7d4:	2f 81       	ldd	r18, Y+7	; 0x07
 7d6:	38 85       	ldd	r19, Y+8	; 0x08
 7d8:	ba 01       	movw	r22, r20
 7da:	a9 01       	movw	r20, r18
 7dc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7e0:	9a 83       	std	Y+2, r25	; 0x02
 7e2:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	9c 81       	ldd	r25, Y+4	; 0x04
 7e8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7ec:	29 81       	ldd	r18, Y+1	; 0x01
 7ee:	3a 81       	ldd	r19, Y+2	; 0x02
 7f0:	82 0f       	add	r24, r18
 7f2:	93 1f       	adc	r25, r19
 7f4:	9a 83       	std	Y+2, r25	; 0x02
 7f6:	89 83       	std	Y+1, r24	; 0x01
  return n;
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
 7fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
 7fc:	28 96       	adiw	r28, 0x08	; 8
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	cf 91       	pop	r28
 80a:	df 91       	pop	r29
 80c:	08 95       	ret

0000080e <_ZN5Print7printlnEli>:

size_t Print::println(long num, int base)
{
 80e:	df 93       	push	r29
 810:	cf 93       	push	r28
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
 816:	2a 97       	sbiw	r28, 0x0a	; 10
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	0f be       	out	0x3f, r0	; 63
 820:	cd bf       	out	0x3d, r28	; 61
 822:	9c 83       	std	Y+4, r25	; 0x04
 824:	8b 83       	std	Y+3, r24	; 0x03
 826:	4d 83       	std	Y+5, r20	; 0x05
 828:	5e 83       	std	Y+6, r21	; 0x06
 82a:	6f 83       	std	Y+7, r22	; 0x07
 82c:	78 87       	std	Y+8, r23	; 0x08
 82e:	3a 87       	std	Y+10, r19	; 0x0a
 830:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, base);
 832:	8b 81       	ldd	r24, Y+3	; 0x03
 834:	9c 81       	ldd	r25, Y+4	; 0x04
 836:	2d 81       	ldd	r18, Y+5	; 0x05
 838:	3e 81       	ldd	r19, Y+6	; 0x06
 83a:	4f 81       	ldd	r20, Y+7	; 0x07
 83c:	58 85       	ldd	r21, Y+8	; 0x08
 83e:	e9 85       	ldd	r30, Y+9	; 0x09
 840:	fa 85       	ldd	r31, Y+10	; 0x0a
 842:	ba 01       	movw	r22, r20
 844:	a9 01       	movw	r20, r18
 846:	9f 01       	movw	r18, r30
 848:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 84c:	9a 83       	std	Y+2, r25	; 0x02
 84e:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 850:	8b 81       	ldd	r24, Y+3	; 0x03
 852:	9c 81       	ldd	r25, Y+4	; 0x04
 854:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 858:	29 81       	ldd	r18, Y+1	; 0x01
 85a:	3a 81       	ldd	r19, Y+2	; 0x02
 85c:	82 0f       	add	r24, r18
 85e:	93 1f       	adc	r25, r19
 860:	9a 83       	std	Y+2, r25	; 0x02
 862:	89 83       	std	Y+1, r24	; 0x01
  return n;
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	9a 81       	ldd	r25, Y+2	; 0x02
}
 868:	2a 96       	adiw	r28, 0x0a	; 10
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	f8 94       	cli
 86e:	de bf       	out	0x3e, r29	; 62
 870:	0f be       	out	0x3f, r0	; 63
 872:	cd bf       	out	0x3d, r28	; 61
 874:	cf 91       	pop	r28
 876:	df 91       	pop	r29
 878:	08 95       	ret

0000087a <_ZN5Print7printlnEmi>:

size_t Print::println(unsigned long num, int base)
{
 87a:	df 93       	push	r29
 87c:	cf 93       	push	r28
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	2a 97       	sbiw	r28, 0x0a	; 10
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
 88e:	9c 83       	std	Y+4, r25	; 0x04
 890:	8b 83       	std	Y+3, r24	; 0x03
 892:	4d 83       	std	Y+5, r20	; 0x05
 894:	5e 83       	std	Y+6, r21	; 0x06
 896:	6f 83       	std	Y+7, r22	; 0x07
 898:	78 87       	std	Y+8, r23	; 0x08
 89a:	3a 87       	std	Y+10, r19	; 0x0a
 89c:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, base);
 89e:	8b 81       	ldd	r24, Y+3	; 0x03
 8a0:	9c 81       	ldd	r25, Y+4	; 0x04
 8a2:	2d 81       	ldd	r18, Y+5	; 0x05
 8a4:	3e 81       	ldd	r19, Y+6	; 0x06
 8a6:	4f 81       	ldd	r20, Y+7	; 0x07
 8a8:	58 85       	ldd	r21, Y+8	; 0x08
 8aa:	e9 85       	ldd	r30, Y+9	; 0x09
 8ac:	fa 85       	ldd	r31, Y+10	; 0x0a
 8ae:	ba 01       	movw	r22, r20
 8b0:	a9 01       	movw	r20, r18
 8b2:	9f 01       	movw	r18, r30
 8b4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 8b8:	9a 83       	std	Y+2, r25	; 0x02
 8ba:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 8bc:	8b 81       	ldd	r24, Y+3	; 0x03
 8be:	9c 81       	ldd	r25, Y+4	; 0x04
 8c0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 8c4:	29 81       	ldd	r18, Y+1	; 0x01
 8c6:	3a 81       	ldd	r19, Y+2	; 0x02
 8c8:	82 0f       	add	r24, r18
 8ca:	93 1f       	adc	r25, r19
 8cc:	9a 83       	std	Y+2, r25	; 0x02
 8ce:	89 83       	std	Y+1, r24	; 0x01
  return n;
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 8d4:	2a 96       	adiw	r28, 0x0a	; 10
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	08 95       	ret

000008e6 <_ZN5Print7printlnEdi>:

size_t Print::println(double num, int digits)
{
 8e6:	df 93       	push	r29
 8e8:	cf 93       	push	r28
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
 8ee:	2a 97       	sbiw	r28, 0x0a	; 10
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	f8 94       	cli
 8f4:	de bf       	out	0x3e, r29	; 62
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	9c 83       	std	Y+4, r25	; 0x04
 8fc:	8b 83       	std	Y+3, r24	; 0x03
 8fe:	4d 83       	std	Y+5, r20	; 0x05
 900:	5e 83       	std	Y+6, r21	; 0x06
 902:	6f 83       	std	Y+7, r22	; 0x07
 904:	78 87       	std	Y+8, r23	; 0x08
 906:	3a 87       	std	Y+10, r19	; 0x0a
 908:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, digits);
 90a:	8b 81       	ldd	r24, Y+3	; 0x03
 90c:	9c 81       	ldd	r25, Y+4	; 0x04
 90e:	2d 81       	ldd	r18, Y+5	; 0x05
 910:	3e 81       	ldd	r19, Y+6	; 0x06
 912:	4f 81       	ldd	r20, Y+7	; 0x07
 914:	58 85       	ldd	r21, Y+8	; 0x08
 916:	e9 85       	ldd	r30, Y+9	; 0x09
 918:	fa 85       	ldd	r31, Y+10	; 0x0a
 91a:	ba 01       	movw	r22, r20
 91c:	a9 01       	movw	r20, r18
 91e:	9f 01       	movw	r18, r30
 920:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 924:	9a 83       	std	Y+2, r25	; 0x02
 926:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 928:	8b 81       	ldd	r24, Y+3	; 0x03
 92a:	9c 81       	ldd	r25, Y+4	; 0x04
 92c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 930:	29 81       	ldd	r18, Y+1	; 0x01
 932:	3a 81       	ldd	r19, Y+2	; 0x02
 934:	82 0f       	add	r24, r18
 936:	93 1f       	adc	r25, r19
 938:	9a 83       	std	Y+2, r25	; 0x02
 93a:	89 83       	std	Y+1, r24	; 0x01
  return n;
 93c:	89 81       	ldd	r24, Y+1	; 0x01
 93e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 940:	2a 96       	adiw	r28, 0x0a	; 10
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	de bf       	out	0x3e, r29	; 62
 948:	0f be       	out	0x3f, r0	; 63
 94a:	cd bf       	out	0x3d, r28	; 61
 94c:	cf 91       	pop	r28
 94e:	df 91       	pop	r29
 950:	08 95       	ret

00000952 <_ZN5Print7printlnERK9Printable>:

size_t Print::println(const Printable& x)
{
 952:	df 93       	push	r29
 954:	cf 93       	push	r28
 956:	00 d0       	rcall	.+0      	; 0x958 <_ZN5Print7printlnERK9Printable+0x6>
 958:	00 d0       	rcall	.+0      	; 0x95a <_ZN5Print7printlnERK9Printable+0x8>
 95a:	00 d0       	rcall	.+0      	; 0x95c <_ZN5Print7printlnERK9Printable+0xa>
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	9c 83       	std	Y+4, r25	; 0x04
 962:	8b 83       	std	Y+3, r24	; 0x03
 964:	7e 83       	std	Y+6, r23	; 0x06
 966:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(x);
 968:	8b 81       	ldd	r24, Y+3	; 0x03
 96a:	9c 81       	ldd	r25, Y+4	; 0x04
 96c:	2d 81       	ldd	r18, Y+5	; 0x05
 96e:	3e 81       	ldd	r19, Y+6	; 0x06
 970:	b9 01       	movw	r22, r18
 972:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 976:	9a 83       	std	Y+2, r25	; 0x02
 978:	89 83       	std	Y+1, r24	; 0x01
  n += println();
 97a:	8b 81       	ldd	r24, Y+3	; 0x03
 97c:	9c 81       	ldd	r25, Y+4	; 0x04
 97e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 982:	29 81       	ldd	r18, Y+1	; 0x01
 984:	3a 81       	ldd	r19, Y+2	; 0x02
 986:	82 0f       	add	r24, r18
 988:	93 1f       	adc	r25, r19
 98a:	9a 83       	std	Y+2, r25	; 0x02
 98c:	89 83       	std	Y+1, r24	; 0x01
  return n;
 98e:	89 81       	ldd	r24, Y+1	; 0x01
 990:	9a 81       	ldd	r25, Y+2	; 0x02
}
 992:	26 96       	adiw	r28, 0x06	; 6
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	f8 94       	cli
 998:	de bf       	out	0x3e, r29	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	cd bf       	out	0x3d, r28	; 61
 99e:	cf 91       	pop	r28
 9a0:	df 91       	pop	r29
 9a2:	08 95       	ret

000009a4 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
 9ac:	af 97       	sbiw	r28, 0x2f	; 47
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	9a a7       	std	Y+42, r25	; 0x2a
 9ba:	89 a7       	std	Y+41, r24	; 0x29
 9bc:	4b a7       	std	Y+43, r20	; 0x2b
 9be:	5c a7       	std	Y+44, r21	; 0x2c
 9c0:	6d a7       	std	Y+45, r22	; 0x2d
 9c2:	7e a7       	std	Y+46, r23	; 0x2e
 9c4:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 9c6:	ce 01       	movw	r24, r28
 9c8:	08 96       	adiw	r24, 0x08	; 8
 9ca:	80 96       	adiw	r24, 0x20	; 32
 9cc:	9a 83       	std	Y+2, r25	; 0x02
 9ce:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
 9d0:	89 81       	ldd	r24, Y+1	; 0x01
 9d2:	9a 81       	ldd	r25, Y+2	; 0x02
 9d4:	fc 01       	movw	r30, r24
 9d6:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 9d8:	8f a5       	ldd	r24, Y+47	; 0x2f
 9da:	82 30       	cpi	r24, 0x02	; 2
 9dc:	00 f4       	brcc	.+0      	; 0x9de <_ZN5Print11printNumberEmh+0x3a>
 9de:	8a e0       	ldi	r24, 0x0A	; 10
 9e0:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
 9e2:	8b a5       	ldd	r24, Y+43	; 0x2b
 9e4:	9c a5       	ldd	r25, Y+44	; 0x2c
 9e6:	ad a5       	ldd	r26, Y+45	; 0x2d
 9e8:	be a5       	ldd	r27, Y+46	; 0x2e
 9ea:	8b 83       	std	Y+3, r24	; 0x03
 9ec:	9c 83       	std	Y+4, r25	; 0x04
 9ee:	ad 83       	std	Y+5, r26	; 0x05
 9f0:	be 83       	std	Y+6, r27	; 0x06
    n /= base;
 9f2:	8f a5       	ldd	r24, Y+47	; 0x2f
 9f4:	28 2f       	mov	r18, r24
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	40 e0       	ldi	r20, 0x00	; 0
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	8b a5       	ldd	r24, Y+43	; 0x2b
 9fe:	9c a5       	ldd	r25, Y+44	; 0x2c
 a00:	ad a5       	ldd	r26, Y+45	; 0x2d
 a02:	be a5       	ldd	r27, Y+46	; 0x2e
 a04:	bc 01       	movw	r22, r24
 a06:	cd 01       	movw	r24, r26
 a08:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 a0c:	2b a7       	std	Y+43, r18	; 0x2b
 a0e:	3c a7       	std	Y+44, r19	; 0x2c
 a10:	4d a7       	std	Y+45, r20	; 0x2d
 a12:	5e a7       	std	Y+46, r21	; 0x2e
    char c = m - base * n;
 a14:	9b 81       	ldd	r25, Y+3	; 0x03
 a16:	2b a5       	ldd	r18, Y+43	; 0x2b
 a18:	8f a5       	ldd	r24, Y+47	; 0x2f
 a1a:	28 9f       	mul	r18, r24
 a1c:	80 2d       	mov	r24, r0
 a1e:	11 24       	eor	r1, r1
 a20:	f9 2f       	mov	r31, r25
 a22:	f8 1b       	sub	r31, r24
 a24:	8f 2f       	mov	r24, r31
 a26:	8f 83       	std	Y+7, r24	; 0x07
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	9a 81       	ldd	r25, Y+2	; 0x02
 a2c:	01 97       	sbiw	r24, 0x01	; 1
 a2e:	9a 83       	std	Y+2, r25	; 0x02
 a30:	89 83       	std	Y+1, r24	; 0x01
 a32:	8f 81       	ldd	r24, Y+7	; 0x07
 a34:	8a 30       	cpi	r24, 0x0A	; 10
 a36:	00 f4       	brcc	.+0      	; 0xa38 <_ZN5Print11printNumberEmh+0x94>
 a38:	8f 81       	ldd	r24, Y+7	; 0x07
 a3a:	28 2f       	mov	r18, r24
 a3c:	20 5d       	subi	r18, 0xD0	; 208
 a3e:	00 c0       	rjmp	.+0      	; 0xa40 <_ZN5Print11printNumberEmh+0x9c>
 a40:	8f 81       	ldd	r24, Y+7	; 0x07
 a42:	28 2f       	mov	r18, r24
 a44:	29 5c       	subi	r18, 0xC9	; 201
 a46:	89 81       	ldd	r24, Y+1	; 0x01
 a48:	9a 81       	ldd	r25, Y+2	; 0x02
 a4a:	fc 01       	movw	r30, r24
 a4c:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 a4e:	21 e0       	ldi	r18, 0x01	; 1
 a50:	8b a5       	ldd	r24, Y+43	; 0x2b
 a52:	9c a5       	ldd	r25, Y+44	; 0x2c
 a54:	ad a5       	ldd	r26, Y+45	; 0x2d
 a56:	be a5       	ldd	r27, Y+46	; 0x2e
 a58:	00 97       	sbiw	r24, 0x00	; 0
 a5a:	a1 05       	cpc	r26, r1
 a5c:	b1 05       	cpc	r27, r1
 a5e:	01 f4       	brne	.+0      	; 0xa60 <_ZN5Print11printNumberEmh+0xbc>
 a60:	20 e0       	ldi	r18, 0x00	; 0
 a62:	22 23       	and	r18, r18
 a64:	01 f0       	breq	.+0      	; 0xa66 <_ZN5Print11printNumberEmh+0xc2>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <_ZN5Print11printNumberEmh+0xc4>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 a68:	89 a5       	ldd	r24, Y+41	; 0x29
 a6a:	9a a5       	ldd	r25, Y+42	; 0x2a
 a6c:	29 81       	ldd	r18, Y+1	; 0x01
 a6e:	3a 81       	ldd	r19, Y+2	; 0x02
 a70:	b9 01       	movw	r22, r18
 a72:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 a76:	af 96       	adiw	r28, 0x2f	; 47
 a78:	0f b6       	in	r0, 0x3f	; 63
 a7a:	f8 94       	cli
 a7c:	de bf       	out	0x3e, r29	; 62
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	cd bf       	out	0x3d, r28	; 61
 a82:	cf 91       	pop	r28
 a84:	df 91       	pop	r29
 a86:	08 95       	ret

00000a88 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits) 
{ 
 a88:	1f 93       	push	r17
 a8a:	df 93       	push	r29
 a8c:	cf 93       	push	r28
 a8e:	cd b7       	in	r28, 0x3d	; 61
 a90:	de b7       	in	r29, 0x3e	; 62
 a92:	68 97       	sbiw	r28, 0x18	; 24
 a94:	0f b6       	in	r0, 0x3f	; 63
 a96:	f8 94       	cli
 a98:	de bf       	out	0x3e, r29	; 62
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	cd bf       	out	0x3d, r28	; 61
 a9e:	9b 8b       	std	Y+19, r25	; 0x13
 aa0:	8a 8b       	std	Y+18, r24	; 0x12
 aa2:	4c 8b       	std	Y+20, r20	; 0x14
 aa4:	5d 8b       	std	Y+21, r21	; 0x15
 aa6:	6e 8b       	std	Y+22, r22	; 0x16
 aa8:	7f 8b       	std	Y+23, r23	; 0x17
 aaa:	28 8f       	std	Y+24, r18	; 0x18
  size_t n = 0;
 aac:	1a 82       	std	Y+2, r1	; 0x02
 aae:	19 82       	std	Y+1, r1	; 0x01
  
  // Handle negative numbers
  if (number < 0.0)
 ab0:	11 e0       	ldi	r17, 0x01	; 1
 ab2:	6c 89       	ldd	r22, Y+20	; 0x14
 ab4:	7d 89       	ldd	r23, Y+21	; 0x15
 ab6:	8e 89       	ldd	r24, Y+22	; 0x16
 ab8:	9f 89       	ldd	r25, Y+23	; 0x17
 aba:	20 e0       	ldi	r18, 0x00	; 0
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	40 e0       	ldi	r20, 0x00	; 0
 ac0:	50 e0       	ldi	r21, 0x00	; 0
 ac2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 ac6:	88 23       	and	r24, r24
 ac8:	04 f0       	brlt	.+0      	; 0xaca <_ZN5Print10printFloatEdh+0x42>
 aca:	10 e0       	ldi	r17, 0x00	; 0
 acc:	11 23       	and	r17, r17
 ace:	01 f0       	breq	.+0      	; 0xad0 <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
 ad0:	8a 89       	ldd	r24, Y+18	; 0x12
 ad2:	9b 89       	ldd	r25, Y+19	; 0x13
 ad4:	6d e2       	ldi	r22, 0x2D	; 45
 ad6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 ada:	29 81       	ldd	r18, Y+1	; 0x01
 adc:	3a 81       	ldd	r19, Y+2	; 0x02
 ade:	82 0f       	add	r24, r18
 ae0:	93 1f       	adc	r25, r19
 ae2:	9a 83       	std	Y+2, r25	; 0x02
 ae4:	89 83       	std	Y+1, r24	; 0x01
     number = -number;
 ae6:	8c 89       	ldd	r24, Y+20	; 0x14
 ae8:	9d 89       	ldd	r25, Y+21	; 0x15
 aea:	ae 89       	ldd	r26, Y+22	; 0x16
 aec:	bf 89       	ldd	r27, Y+23	; 0x17
 aee:	b0 58       	subi	r27, 0x80	; 128
 af0:	8c 8b       	std	Y+20, r24	; 0x14
 af2:	9d 8b       	std	Y+21, r25	; 0x15
 af4:	ae 8b       	std	Y+22, r26	; 0x16
 af6:	bf 8b       	std	Y+23, r27	; 0x17
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	a0 e0       	ldi	r26, 0x00	; 0
 afe:	bf e3       	ldi	r27, 0x3F	; 63
 b00:	8b 83       	std	Y+3, r24	; 0x03
 b02:	9c 83       	std	Y+4, r25	; 0x04
 b04:	ad 83       	std	Y+5, r26	; 0x05
 b06:	be 83       	std	Y+6, r27	; 0x06
  for (uint8_t i=0; i<digits; ++i)
 b08:	1f 82       	std	Y+7, r1	; 0x07
 b0a:	00 c0       	rjmp	.+0      	; 0xb0c <_ZN5Print10printFloatEdh+0x84>
    rounding /= 10.0;
 b0c:	6b 81       	ldd	r22, Y+3	; 0x03
 b0e:	7c 81       	ldd	r23, Y+4	; 0x04
 b10:	8d 81       	ldd	r24, Y+5	; 0x05
 b12:	9e 81       	ldd	r25, Y+6	; 0x06
 b14:	20 e0       	ldi	r18, 0x00	; 0
 b16:	30 e0       	ldi	r19, 0x00	; 0
 b18:	40 e2       	ldi	r20, 0x20	; 32
 b1a:	51 e4       	ldi	r21, 0x41	; 65
 b1c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b20:	dc 01       	movw	r26, r24
 b22:	cb 01       	movw	r24, r22
 b24:	8b 83       	std	Y+3, r24	; 0x03
 b26:	9c 83       	std	Y+4, r25	; 0x04
 b28:	ad 83       	std	Y+5, r26	; 0x05
 b2a:	be 83       	std	Y+6, r27	; 0x06
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
 b2c:	8f 81       	ldd	r24, Y+7	; 0x07
 b2e:	8f 5f       	subi	r24, 0xFF	; 255
 b30:	8f 83       	std	Y+7, r24	; 0x07
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	2f 81       	ldd	r18, Y+7	; 0x07
 b36:	98 8d       	ldd	r25, Y+24	; 0x18
 b38:	29 17       	cp	r18, r25
 b3a:	00 f0       	brcs	.+0      	; 0xb3c <_ZN5Print10printFloatEdh+0xb4>
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	88 23       	and	r24, r24
 b40:	01 f4       	brne	.+0      	; 0xb42 <_ZN5Print10printFloatEdh+0xba>
    rounding /= 10.0;
  
  number += rounding;
 b42:	6c 89       	ldd	r22, Y+20	; 0x14
 b44:	7d 89       	ldd	r23, Y+21	; 0x15
 b46:	8e 89       	ldd	r24, Y+22	; 0x16
 b48:	9f 89       	ldd	r25, Y+23	; 0x17
 b4a:	2b 81       	ldd	r18, Y+3	; 0x03
 b4c:	3c 81       	ldd	r19, Y+4	; 0x04
 b4e:	4d 81       	ldd	r20, Y+5	; 0x05
 b50:	5e 81       	ldd	r21, Y+6	; 0x06
 b52:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b56:	dc 01       	movw	r26, r24
 b58:	cb 01       	movw	r24, r22
 b5a:	8c 8b       	std	Y+20, r24	; 0x14
 b5c:	9d 8b       	std	Y+21, r25	; 0x15
 b5e:	ae 8b       	std	Y+22, r26	; 0x16
 b60:	bf 8b       	std	Y+23, r27	; 0x17

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 b62:	6c 89       	ldd	r22, Y+20	; 0x14
 b64:	7d 89       	ldd	r23, Y+21	; 0x15
 b66:	8e 89       	ldd	r24, Y+22	; 0x16
 b68:	9f 89       	ldd	r25, Y+23	; 0x17
 b6a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b6e:	dc 01       	movw	r26, r24
 b70:	cb 01       	movw	r24, r22
 b72:	8c 87       	std	Y+12, r24	; 0x0c
 b74:	9d 87       	std	Y+13, r25	; 0x0d
 b76:	ae 87       	std	Y+14, r26	; 0x0e
 b78:	bf 87       	std	Y+15, r27	; 0x0f
  double remainder = number - (double)int_part;
 b7a:	6c 85       	ldd	r22, Y+12	; 0x0c
 b7c:	7d 85       	ldd	r23, Y+13	; 0x0d
 b7e:	8e 85       	ldd	r24, Y+14	; 0x0e
 b80:	9f 85       	ldd	r25, Y+15	; 0x0f
 b82:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b86:	9b 01       	movw	r18, r22
 b88:	ac 01       	movw	r20, r24
 b8a:	6c 89       	ldd	r22, Y+20	; 0x14
 b8c:	7d 89       	ldd	r23, Y+21	; 0x15
 b8e:	8e 89       	ldd	r24, Y+22	; 0x16
 b90:	9f 89       	ldd	r25, Y+23	; 0x17
 b92:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 b96:	dc 01       	movw	r26, r24
 b98:	cb 01       	movw	r24, r22
 b9a:	88 87       	std	Y+8, r24	; 0x08
 b9c:	99 87       	std	Y+9, r25	; 0x09
 b9e:	aa 87       	std	Y+10, r26	; 0x0a
 ba0:	bb 87       	std	Y+11, r27	; 0x0b
  n += print(int_part);
 ba2:	8a 89       	ldd	r24, Y+18	; 0x12
 ba4:	9b 89       	ldd	r25, Y+19	; 0x13
 ba6:	2c 85       	ldd	r18, Y+12	; 0x0c
 ba8:	3d 85       	ldd	r19, Y+13	; 0x0d
 baa:	4e 85       	ldd	r20, Y+14	; 0x0e
 bac:	5f 85       	ldd	r21, Y+15	; 0x0f
 bae:	ba 01       	movw	r22, r20
 bb0:	a9 01       	movw	r20, r18
 bb2:	2a e0       	ldi	r18, 0x0A	; 10
 bb4:	30 e0       	ldi	r19, 0x00	; 0
 bb6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 bba:	29 81       	ldd	r18, Y+1	; 0x01
 bbc:	3a 81       	ldd	r19, Y+2	; 0x02
 bbe:	82 0f       	add	r24, r18
 bc0:	93 1f       	adc	r25, r19
 bc2:	9a 83       	std	Y+2, r25	; 0x02
 bc4:	89 83       	std	Y+1, r24	; 0x01

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 bc6:	88 8d       	ldd	r24, Y+24	; 0x18
 bc8:	88 23       	and	r24, r24
 bca:	01 f4       	brne	.+0      	; 0xbcc <_ZN5Print10printFloatEdh+0x144>
 bcc:	00 c0       	rjmp	.+0      	; 0xbce <_ZN5Print10printFloatEdh+0x146>
    n += print("."); 
 bce:	8a 89       	ldd	r24, Y+18	; 0x12
 bd0:	9b 89       	ldd	r25, Y+19	; 0x13
 bd2:	20 e0       	ldi	r18, 0x00	; 0
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	b9 01       	movw	r22, r18
 bd8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 bdc:	29 81       	ldd	r18, Y+1	; 0x01
 bde:	3a 81       	ldd	r19, Y+2	; 0x02
 be0:	82 0f       	add	r24, r18
 be2:	93 1f       	adc	r25, r19
 be4:	9a 83       	std	Y+2, r25	; 0x02
 be6:	89 83       	std	Y+1, r24	; 0x01
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 be8:	00 c0       	rjmp	.+0      	; 0xbea <_ZN5Print10printFloatEdh+0x162>
  {
    remainder *= 10.0;
 bea:	68 85       	ldd	r22, Y+8	; 0x08
 bec:	79 85       	ldd	r23, Y+9	; 0x09
 bee:	8a 85       	ldd	r24, Y+10	; 0x0a
 bf0:	9b 85       	ldd	r25, Y+11	; 0x0b
 bf2:	20 e0       	ldi	r18, 0x00	; 0
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	40 e2       	ldi	r20, 0x20	; 32
 bf8:	51 e4       	ldi	r21, 0x41	; 65
 bfa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 bfe:	dc 01       	movw	r26, r24
 c00:	cb 01       	movw	r24, r22
 c02:	88 87       	std	Y+8, r24	; 0x08
 c04:	99 87       	std	Y+9, r25	; 0x09
 c06:	aa 87       	std	Y+10, r26	; 0x0a
 c08:	bb 87       	std	Y+11, r27	; 0x0b
    int toPrint = int(remainder);
 c0a:	68 85       	ldd	r22, Y+8	; 0x08
 c0c:	79 85       	ldd	r23, Y+9	; 0x09
 c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
 c10:	9b 85       	ldd	r25, Y+11	; 0x0b
 c12:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 c16:	dc 01       	movw	r26, r24
 c18:	cb 01       	movw	r24, r22
 c1a:	99 8b       	std	Y+17, r25	; 0x11
 c1c:	88 8b       	std	Y+16, r24	; 0x10
    n += print(toPrint);
 c1e:	8a 89       	ldd	r24, Y+18	; 0x12
 c20:	9b 89       	ldd	r25, Y+19	; 0x13
 c22:	28 89       	ldd	r18, Y+16	; 0x10
 c24:	39 89       	ldd	r19, Y+17	; 0x11
 c26:	b9 01       	movw	r22, r18
 c28:	4a e0       	ldi	r20, 0x0A	; 10
 c2a:	50 e0       	ldi	r21, 0x00	; 0
 c2c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 c30:	29 81       	ldd	r18, Y+1	; 0x01
 c32:	3a 81       	ldd	r19, Y+2	; 0x02
 c34:	82 0f       	add	r24, r18
 c36:	93 1f       	adc	r25, r19
 c38:	9a 83       	std	Y+2, r25	; 0x02
 c3a:	89 83       	std	Y+1, r24	; 0x01
    remainder -= toPrint; 
 c3c:	88 89       	ldd	r24, Y+16	; 0x10
 c3e:	99 89       	ldd	r25, Y+17	; 0x11
 c40:	aa 27       	eor	r26, r26
 c42:	97 fd       	sbrc	r25, 7
 c44:	a0 95       	com	r26
 c46:	ba 2f       	mov	r27, r26
 c48:	bc 01       	movw	r22, r24
 c4a:	cd 01       	movw	r24, r26
 c4c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	68 85       	ldd	r22, Y+8	; 0x08
 c56:	79 85       	ldd	r23, Y+9	; 0x09
 c58:	8a 85       	ldd	r24, Y+10	; 0x0a
 c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
 c5c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 c60:	dc 01       	movw	r26, r24
 c62:	cb 01       	movw	r24, r22
 c64:	88 87       	std	Y+8, r24	; 0x08
 c66:	99 87       	std	Y+9, r25	; 0x09
 c68:	aa 87       	std	Y+10, r26	; 0x0a
 c6a:	bb 87       	std	Y+11, r27	; 0x0b
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 c6c:	81 e0       	ldi	r24, 0x01	; 1
 c6e:	98 8d       	ldd	r25, Y+24	; 0x18
 c70:	99 23       	and	r25, r25
 c72:	01 f4       	brne	.+0      	; 0xc74 <_ZN5Print10printFloatEdh+0x1ec>
 c74:	80 e0       	ldi	r24, 0x00	; 0
 c76:	98 8d       	ldd	r25, Y+24	; 0x18
 c78:	91 50       	subi	r25, 0x01	; 1
 c7a:	98 8f       	std	Y+24, r25	; 0x18
 c7c:	88 23       	and	r24, r24
 c7e:	01 f0       	breq	.+0      	; 0xc80 <_ZN5Print10printFloatEdh+0x1f8>
 c80:	00 c0       	rjmp	.+0      	; 0xc82 <_ZN5Print10printFloatEdh+0x1fa>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
 c82:	89 81       	ldd	r24, Y+1	; 0x01
 c84:	9a 81       	ldd	r25, Y+2	; 0x02
}
 c86:	68 96       	adiw	r28, 0x18	; 24
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	cf 91       	pop	r28
 c94:	df 91       	pop	r29
 c96:	1f 91       	pop	r17
 c98:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000860  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000008a3  2**0
                  ALLOC
  3 .stab         00001044  00000000  00000000  000008a4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000111f  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream9timedReadEv+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6Stream9timedReadEv+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9c 83       	std	Y+4, r25	; 0x04
   e:	8b 83       	std	Y+3, r24	; 0x03
  int c;
  _startMillis = millis();
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  14:	dc 01       	movw	r26, r24
  16:	cb 01       	movw	r24, r22
  18:	2b 81       	ldd	r18, Y+3	; 0x03
  1a:	3c 81       	ldd	r19, Y+4	; 0x04
  1c:	f9 01       	movw	r30, r18
  1e:	80 87       	std	Z+8, r24	; 0x08
  20:	91 87       	std	Z+9, r25	; 0x09
  22:	a2 87       	std	Z+10, r26	; 0x0a
  24:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = read();
  26:	8b 81       	ldd	r24, Y+3	; 0x03
  28:	9c 81       	ldd	r25, Y+4	; 0x04
  2a:	fc 01       	movw	r30, r24
  2c:	80 81       	ld	r24, Z
  2e:	91 81       	ldd	r25, Z+1	; 0x01
  30:	06 96       	adiw	r24, 0x06	; 6
  32:	fc 01       	movw	r30, r24
  34:	20 81       	ld	r18, Z
  36:	31 81       	ldd	r19, Z+1	; 0x01
  38:	8b 81       	ldd	r24, Y+3	; 0x03
  3a:	9c 81       	ldd	r25, Y+4	; 0x04
  3c:	f9 01       	movw	r30, r18
  3e:	09 95       	icall
  40:	9a 83       	std	Y+2, r25	; 0x02
  42:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
  44:	89 81       	ldd	r24, Y+1	; 0x01
  46:	9a 81       	ldd	r25, Y+2	; 0x02
  48:	99 23       	and	r25, r25
  4a:	04 f0       	brlt	.+0      	; 0x4c <_ZN6Stream9timedReadEv+0x4c>
  4c:	89 81       	ldd	r24, Y+1	; 0x01
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN6Stream9timedReadEv+0x52>
  } while(millis() - _startMillis < _timeout);
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  56:	9b 01       	movw	r18, r22
  58:	ac 01       	movw	r20, r24
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
  5a:	8b 81       	ldd	r24, Y+3	; 0x03
  5c:	9c 81       	ldd	r25, Y+4	; 0x04
  5e:	fc 01       	movw	r30, r24
  60:	80 85       	ldd	r24, Z+8	; 0x08
  62:	91 85       	ldd	r25, Z+9	; 0x09
  64:	a2 85       	ldd	r26, Z+10	; 0x0a
  66:	b3 85       	ldd	r27, Z+11	; 0x0b
  68:	28 1b       	sub	r18, r24
  6a:	39 0b       	sbc	r19, r25
  6c:	4a 0b       	sbc	r20, r26
  6e:	5b 0b       	sbc	r21, r27
  70:	8b 81       	ldd	r24, Y+3	; 0x03
  72:	9c 81       	ldd	r25, Y+4	; 0x04
  74:	fc 01       	movw	r30, r24
  76:	84 81       	ldd	r24, Z+4	; 0x04
  78:	95 81       	ldd	r25, Z+5	; 0x05
  7a:	a6 81       	ldd	r26, Z+6	; 0x06
  7c:	b7 81       	ldd	r27, Z+7	; 0x07
  7e:	61 e0       	ldi	r22, 0x01	; 1
  80:	28 17       	cp	r18, r24
  82:	39 07       	cpc	r19, r25
  84:	4a 07       	cpc	r20, r26
  86:	5b 07       	cpc	r21, r27
  88:	00 f0       	brcs	.+0      	; 0x8a <_ZN6Stream9timedReadEv+0x8a>
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	66 23       	and	r22, r22
  8e:	01 f4       	brne	.+0      	; 0x90 <_ZN6Stream9timedReadEv+0x90>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	9f ef       	ldi	r25, 0xFF	; 255
}
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	0f 90       	pop	r0
  9a:	0f 90       	pop	r0
  9c:	cf 91       	pop	r28
  9e:	df 91       	pop	r29
  a0:	08 95       	ret

000000a2 <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	00 d0       	rcall	.+0      	; 0xa8 <_ZN6Stream9timedPeekEv+0x6>
  a8:	00 d0       	rcall	.+0      	; 0xaa <_ZN6Stream9timedPeekEv+0x8>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	9c 83       	std	Y+4, r25	; 0x04
  b0:	8b 83       	std	Y+3, r24	; 0x03
  int c;
  _startMillis = millis();
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  b6:	dc 01       	movw	r26, r24
  b8:	cb 01       	movw	r24, r22
  ba:	2b 81       	ldd	r18, Y+3	; 0x03
  bc:	3c 81       	ldd	r19, Y+4	; 0x04
  be:	f9 01       	movw	r30, r18
  c0:	80 87       	std	Z+8, r24	; 0x08
  c2:	91 87       	std	Z+9, r25	; 0x09
  c4:	a2 87       	std	Z+10, r26	; 0x0a
  c6:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = peek();
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	9c 81       	ldd	r25, Y+4	; 0x04
  cc:	fc 01       	movw	r30, r24
  ce:	80 81       	ld	r24, Z
  d0:	91 81       	ldd	r25, Z+1	; 0x01
  d2:	08 96       	adiw	r24, 0x08	; 8
  d4:	fc 01       	movw	r30, r24
  d6:	20 81       	ld	r18, Z
  d8:	31 81       	ldd	r19, Z+1	; 0x01
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	9c 81       	ldd	r25, Y+4	; 0x04
  de:	f9 01       	movw	r30, r18
  e0:	09 95       	icall
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	99 23       	and	r25, r25
  ec:	04 f0       	brlt	.+0      	; 0xee <_ZN6Stream9timedPeekEv+0x4c>
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN6Stream9timedPeekEv+0x52>
  } while(millis() - _startMillis < _timeout);
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  f8:	9b 01       	movw	r18, r22
  fa:	ac 01       	movw	r20, r24
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
  fc:	8b 81       	ldd	r24, Y+3	; 0x03
  fe:	9c 81       	ldd	r25, Y+4	; 0x04
 100:	fc 01       	movw	r30, r24
 102:	80 85       	ldd	r24, Z+8	; 0x08
 104:	91 85       	ldd	r25, Z+9	; 0x09
 106:	a2 85       	ldd	r26, Z+10	; 0x0a
 108:	b3 85       	ldd	r27, Z+11	; 0x0b
 10a:	28 1b       	sub	r18, r24
 10c:	39 0b       	sbc	r19, r25
 10e:	4a 0b       	sbc	r20, r26
 110:	5b 0b       	sbc	r21, r27
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	9c 81       	ldd	r25, Y+4	; 0x04
 116:	fc 01       	movw	r30, r24
 118:	84 81       	ldd	r24, Z+4	; 0x04
 11a:	95 81       	ldd	r25, Z+5	; 0x05
 11c:	a6 81       	ldd	r26, Z+6	; 0x06
 11e:	b7 81       	ldd	r27, Z+7	; 0x07
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	28 17       	cp	r18, r24
 124:	39 07       	cpc	r19, r25
 126:	4a 07       	cpc	r20, r26
 128:	5b 07       	cpc	r21, r27
 12a:	00 f0       	brcs	.+0      	; 0x12c <_ZN6Stream9timedPeekEv+0x8a>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	66 23       	and	r22, r22
 130:	01 f4       	brne	.+0      	; 0x132 <_ZN6Stream9timedPeekEv+0x90>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	9f ef       	ldi	r25, 0xFF	; 255
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	08 95       	ret

00000144 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	00 d0       	rcall	.+0      	; 0x14a <_ZN6Stream13peekNextDigitEv+0x6>
 14a:	00 d0       	rcall	.+0      	; 0x14c <_ZN6Stream13peekNextDigitEv+0x8>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	9c 83       	std	Y+4, r25	; 0x04
 152:	8b 83       	std	Y+3, r24	; 0x03
  int c;
  while (1) {
    c = timedPeek();
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	9c 81       	ldd	r25, Y+4	; 0x04
 158:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
    if (c < 0) return c;  // timeout
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	9a 81       	ldd	r25, Y+2	; 0x02
 164:	99 23       	and	r25, r25
 166:	04 f4       	brge	.+0      	; 0x168 <_ZN6Stream13peekNextDigitEv+0x24>
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	9a 81       	ldd	r25, Y+2	; 0x02
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_ZN6Stream13peekNextDigitEv+0x2a>
    if (c == '-') return c;
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	8d 32       	cpi	r24, 0x2D	; 45
 174:	91 05       	cpc	r25, r1
 176:	01 f4       	brne	.+0      	; 0x178 <_ZN6Stream13peekNextDigitEv+0x34>
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	00 c0       	rjmp	.+0      	; 0x17e <_ZN6Stream13peekNextDigitEv+0x3a>
    if (c >= '0' && c <= '9') return c;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	80 33       	cpi	r24, 0x30	; 48
 184:	91 05       	cpc	r25, r1
 186:	04 f0       	brlt	.+0      	; 0x188 <_ZN6Stream13peekNextDigitEv+0x44>
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	8a 33       	cpi	r24, 0x3A	; 58
 18e:	91 05       	cpc	r25, r1
 190:	04 f4       	brge	.+0      	; 0x192 <_ZN6Stream13peekNextDigitEv+0x4e>
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	00 c0       	rjmp	.+0      	; 0x198 <_ZN6Stream13peekNextDigitEv+0x54>
    read();  // discard non-numeric
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	9c 81       	ldd	r25, Y+4	; 0x04
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
 1a0:	91 81       	ldd	r25, Z+1	; 0x01
 1a2:	06 96       	adiw	r24, 0x06	; 6
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 81       	ld	r18, Z
 1a8:	31 81       	ldd	r19, Z+1	; 0x01
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	9c 81       	ldd	r25, Y+4	; 0x04
 1ae:	f9 01       	movw	r30, r18
 1b0:	09 95       	icall
// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN6Stream13peekNextDigitEv+0x70>
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	cf 91       	pop	r28
 1be:	df 91       	pop	r29
 1c0:	08 95       	ret

000001c2 <_ZN6Stream10setTimeoutEm>:

// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <_ZN6Stream10setTimeoutEm+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <_ZN6Stream10setTimeoutEm+0x8>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <_ZN6Stream10setTimeoutEm+0xa>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	4b 83       	std	Y+3, r20	; 0x03
 1d6:	5c 83       	std	Y+4, r21	; 0x04
 1d8:	6d 83       	std	Y+5, r22	; 0x05
 1da:	7e 83       	std	Y+6, r23	; 0x06
  _timeout = timeout;
 1dc:	29 81       	ldd	r18, Y+1	; 0x01
 1de:	3a 81       	ldd	r19, Y+2	; 0x02
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	ad 81       	ldd	r26, Y+5	; 0x05
 1e6:	be 81       	ldd	r27, Y+6	; 0x06
 1e8:	f9 01       	movw	r30, r18
 1ea:	84 83       	std	Z+4, r24	; 0x04
 1ec:	95 83       	std	Z+5, r25	; 0x05
 1ee:	a6 83       	std	Z+6, r26	; 0x06
 1f0:	b7 83       	std	Z+7, r27	; 0x07
}
 1f2:	26 96       	adiw	r28, 0x06	; 6
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <_ZN6Stream4findEPc>:

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	00 d0       	rcall	.+0      	; 0x20a <_ZN6Stream4findEPc+0x6>
 20a:	00 d0       	rcall	.+0      	; 0x20c <_ZN6Stream4findEPc+0x8>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	7c 83       	std	Y+4, r23	; 0x04
 216:	6b 83       	std	Y+3, r22	; 0x03
  return findUntil(target, NULL);
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	2b 81       	ldd	r18, Y+3	; 0x03
 21e:	3c 81       	ldd	r19, Y+4	; 0x04
 220:	b9 01       	movw	r22, r18
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
}
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	df 93       	push	r29
 23e:	cf 93       	push	r28
 240:	00 d0       	rcall	.+0      	; 0x242 <_ZN6Stream4findEPcj+0xa>
 242:	00 d0       	rcall	.+0      	; 0x244 <_ZN6Stream4findEPcj+0xc>
 244:	00 d0       	rcall	.+0      	; 0x246 <_ZN6Stream4findEPcj+0xe>
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	7c 83       	std	Y+4, r23	; 0x04
 250:	6b 83       	std	Y+3, r22	; 0x03
 252:	5e 83       	std	Y+6, r21	; 0x06
 254:	4d 83       	std	Y+5, r20	; 0x05
  return findUntil(target, length, NULL, 0);
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	4b 81       	ldd	r20, Y+3	; 0x03
 25c:	5c 81       	ldd	r21, Y+4	; 0x04
 25e:	2d 81       	ldd	r18, Y+5	; 0x05
 260:	3e 81       	ldd	r19, Y+6	; 0x06
 262:	ba 01       	movw	r22, r20
 264:	a9 01       	movw	r20, r18
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	00 e0       	ldi	r16, 0x00	; 0
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
}
 272:	26 96       	adiw	r28, 0x06	; 6
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	cf 91       	pop	r28
 280:	df 91       	pop	r29
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <_ZN6Stream9findUntilEPcS0_>:

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	df 93       	push	r29
 28e:	cf 93       	push	r28
 290:	00 d0       	rcall	.+0      	; 0x292 <_ZN6Stream9findUntilEPcS0_+0xa>
 292:	00 d0       	rcall	.+0      	; 0x294 <_ZN6Stream9findUntilEPcS0_+0xc>
 294:	00 d0       	rcall	.+0      	; 0x296 <_ZN6Stream9findUntilEPcS0_+0xe>
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	7c 83       	std	Y+4, r23	; 0x04
 2a0:	6b 83       	std	Y+3, r22	; 0x03
 2a2:	5e 83       	std	Y+6, r21	; 0x06
 2a4:	4d 83       	std	Y+5, r20	; 0x05
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 2a6:	8b 81       	ldd	r24, Y+3	; 0x03
 2a8:	9c 81       	ldd	r25, Y+4	; 0x04
 2aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 2ae:	8c 01       	movw	r16, r24
 2b0:	8d 81       	ldd	r24, Y+5	; 0x05
 2b2:	9e 81       	ldd	r25, Y+6	; 0x06
 2b4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 2b8:	fc 01       	movw	r30, r24
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	9a 81       	ldd	r25, Y+2	; 0x02
 2be:	4b 81       	ldd	r20, Y+3	; 0x03
 2c0:	5c 81       	ldd	r21, Y+4	; 0x04
 2c2:	2d 81       	ldd	r18, Y+5	; 0x05
 2c4:	3e 81       	ldd	r19, Y+6	; 0x06
 2c6:	ba 01       	movw	r22, r20
 2c8:	a8 01       	movw	r20, r16
 2ca:	8f 01       	movw	r16, r30
 2cc:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
}
 2d0:	26 96       	adiw	r28, 0x06	; 6
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	cf 91       	pop	r28
 2de:	df 91       	pop	r29
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	df 93       	push	r29
 2ec:	cf 93       	push	r28
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	60 97       	sbiw	r28, 0x10	; 16
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	98 87       	std	Y+8, r25	; 0x08
 300:	8f 83       	std	Y+7, r24	; 0x07
 302:	7a 87       	std	Y+10, r23	; 0x0a
 304:	69 87       	std	Y+9, r22	; 0x09
 306:	5c 87       	std	Y+12, r21	; 0x0c
 308:	4b 87       	std	Y+11, r20	; 0x0b
 30a:	3e 87       	std	Y+14, r19	; 0x0e
 30c:	2d 87       	std	Y+13, r18	; 0x0d
 30e:	18 8b       	std	Y+16, r17	; 0x10
 310:	0f 87       	std	Y+15, r16	; 0x0f
  size_t index = 0;  // maximum target string length is 64k bytes!
 312:	1a 82       	std	Y+2, r1	; 0x02
 314:	19 82       	std	Y+1, r1	; 0x01
  size_t termIndex = 0;
 316:	1c 82       	std	Y+4, r1	; 0x04
 318:	1b 82       	std	Y+3, r1	; 0x03
  int c;

  if( *target == 0)
 31a:	89 85       	ldd	r24, Y+9	; 0x09
 31c:	9a 85       	ldd	r25, Y+10	; 0x0a
 31e:	fc 01       	movw	r30, r24
 320:	80 81       	ld	r24, Z
 322:	88 23       	and	r24, r24
 324:	01 f0       	breq	.+0      	; 0x326 <_ZN6Stream9findUntilEPcjS0_j+0x40>
 326:	00 c0       	rjmp	.+0      	; 0x328 <_ZN6Stream9findUntilEPcjS0_j+0x42>
     return true;   // return true if target is a null string
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	00 c0       	rjmp	.+0      	; 0x32c <_ZN6Stream9findUntilEPcjS0_j+0x46>
  while( (c = timedRead()) > 0){
    if( c == target[index]){
 32c:	29 85       	ldd	r18, Y+9	; 0x09
 32e:	3a 85       	ldd	r19, Y+10	; 0x0a
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	82 0f       	add	r24, r18
 336:	93 1f       	adc	r25, r19
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	8d 81       	ldd	r24, Y+5	; 0x05
 342:	9e 81       	ldd	r25, Y+6	; 0x06
 344:	28 17       	cp	r18, r24
 346:	39 07       	cpc	r19, r25
 348:	01 f4       	brne	.+0      	; 0x34a <_ZN6Stream9findUntilEPcjS0_j+0x64>
    //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	9a 81       	ldd	r25, Y+2	; 0x02
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	9a 83       	std	Y+2, r25	; 0x02
 352:	89 83       	std	Y+1, r24	; 0x01
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	29 81       	ldd	r18, Y+1	; 0x01
 358:	3a 81       	ldd	r19, Y+2	; 0x02
 35a:	8b 85       	ldd	r24, Y+11	; 0x0b
 35c:	9c 85       	ldd	r25, Y+12	; 0x0c
 35e:	28 17       	cp	r18, r24
 360:	39 07       	cpc	r19, r25
 362:	00 f4       	brcc	.+0      	; 0x364 <_ZN6Stream9findUntilEPcjS0_j+0x7e>
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	44 23       	and	r20, r20
 368:	01 f0       	breq	.+0      	; 0x36a <_ZN6Stream9findUntilEPcjS0_j+0x84>
        return true;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	00 c0       	rjmp	.+0      	; 0x36e <_ZN6Stream9findUntilEPcjS0_j+0x88>
      }
    }
    else{
      index = 0;  // reset index if any char does not match
 36e:	1a 82       	std	Y+2, r1	; 0x02
 370:	19 82       	std	Y+1, r1	; 0x01
 372:	00 c0       	rjmp	.+0      	; 0x374 <_ZN6Stream9findUntilEPcjS0_j+0x8e>
     return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    if( c == target[index]){
    //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
 374:	00 00       	nop
      }
    }
    else{
      index = 0;  // reset index if any char does not match
    }
    if(termLen > 0 && c == terminator[termIndex]){
 376:	8f 85       	ldd	r24, Y+15	; 0x0f
 378:	98 89       	ldd	r25, Y+16	; 0x10
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	01 f0       	breq	.+0      	; 0x37e <_ZN6Stream9findUntilEPcjS0_j+0x98>
 37e:	2d 85       	ldd	r18, Y+13	; 0x0d
 380:	3e 85       	ldd	r19, Y+14	; 0x0e
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	9c 81       	ldd	r25, Y+4	; 0x04
 386:	82 0f       	add	r24, r18
 388:	93 1f       	adc	r25, r19
 38a:	fc 01       	movw	r30, r24
 38c:	80 81       	ld	r24, Z
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	8d 81       	ldd	r24, Y+5	; 0x05
 394:	9e 81       	ldd	r25, Y+6	; 0x06
 396:	28 17       	cp	r18, r24
 398:	39 07       	cpc	r19, r25
 39a:	01 f4       	brne	.+0      	; 0x39c <_ZN6Stream9findUntilEPcjS0_j+0xb6>
       if(++termIndex >= termLen)
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	9c 81       	ldd	r25, Y+4	; 0x04
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	9c 83       	std	Y+4, r25	; 0x04
 3a4:	8b 83       	std	Y+3, r24	; 0x03
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	2b 81       	ldd	r18, Y+3	; 0x03
 3aa:	3c 81       	ldd	r19, Y+4	; 0x04
 3ac:	8f 85       	ldd	r24, Y+15	; 0x0f
 3ae:	98 89       	ldd	r25, Y+16	; 0x10
 3b0:	28 17       	cp	r18, r24
 3b2:	39 07       	cpc	r19, r25
 3b4:	00 f4       	brcc	.+0      	; 0x3b6 <_ZN6Stream9findUntilEPcjS0_j+0xd0>
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	44 23       	and	r20, r20
 3ba:	01 f0       	breq	.+0      	; 0x3bc <_ZN6Stream9findUntilEPcjS0_j+0xd6>
         return false;       // return false if terminate string found before target string
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <_ZN6Stream9findUntilEPcjS0_j+0xda>
    }
    else
        termIndex = 0;
 3c0:	1c 82       	std	Y+4, r1	; 0x04
 3c2:	1b 82       	std	Y+3, r1	; 0x03
  size_t termIndex = 0;
  int c;

  if( *target == 0)
     return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
 3c4:	8f 81       	ldd	r24, Y+7	; 0x07
 3c6:	98 85       	ldd	r25, Y+8	; 0x08
 3c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 3cc:	9e 83       	std	Y+6, r25	; 0x06
 3ce:	8d 83       	std	Y+5, r24	; 0x05
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	8d 81       	ldd	r24, Y+5	; 0x05
 3d4:	9e 81       	ldd	r25, Y+6	; 0x06
 3d6:	18 16       	cp	r1, r24
 3d8:	19 06       	cpc	r1, r25
 3da:	04 f0       	brlt	.+0      	; 0x3dc <_ZN6Stream9findUntilEPcjS0_j+0xf6>
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	22 23       	and	r18, r18
 3e0:	01 f0       	breq	.+0      	; 0x3e2 <_ZN6Stream9findUntilEPcjS0_j+0xfc>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_ZN6Stream9findUntilEPcjS0_j+0xfe>
         return false;       // return false if terminate string found before target string
    }
    else
        termIndex = 0;
  }
  return false;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
}
 3e6:	60 96       	adiw	r28, 0x10	; 16
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <_ZN6Stream8parseIntEv>:

// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <_ZN6Stream8parseIntEv+0x6>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	9a 83       	std	Y+2, r25	; 0x02
 408:	89 83       	std	Y+1, r24	; 0x01
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	9a 81       	ldd	r25, Y+2	; 0x02
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 414:	dc 01       	movw	r26, r24
 416:	cb 01       	movw	r24, r22
}
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	cf 91       	pop	r28
 422:	df 91       	pop	r29
 424:	08 95       	ret

00000426 <_ZN6Stream8parseIntEc>:

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
 426:	df 93       	push	r29
 428:	cf 93       	push	r28
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	2a 97       	sbiw	r28, 0x0a	; 10
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	99 87       	std	Y+9, r25	; 0x09
 43c:	88 87       	std	Y+8, r24	; 0x08
 43e:	6a 87       	std	Y+10, r22	; 0x0a
  boolean isNegative = false;
 440:	19 82       	std	Y+1, r1	; 0x01
  long value = 0;
 442:	1a 82       	std	Y+2, r1	; 0x02
 444:	1b 82       	std	Y+3, r1	; 0x03
 446:	1c 82       	std	Y+4, r1	; 0x04
 448:	1d 82       	std	Y+5, r1	; 0x05
  int c;

  c = peekNextDigit();
 44a:	88 85       	ldd	r24, Y+8	; 0x08
 44c:	99 85       	ldd	r25, Y+9	; 0x09
 44e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 452:	9f 83       	std	Y+7, r25	; 0x07
 454:	8e 83       	std	Y+6, r24	; 0x06
  // ignore non numeric leading characters
  if(c < 0)
 456:	8e 81       	ldd	r24, Y+6	; 0x06
 458:	9f 81       	ldd	r25, Y+7	; 0x07
 45a:	99 23       	and	r25, r25
 45c:	04 f4       	brge	.+0      	; 0x45e <_ZN6Stream8parseIntEc+0x38>
    return 0; // zero returned if timeout
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	a0 e0       	ldi	r26, 0x00	; 0
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	00 c0       	rjmp	.+0      	; 0x468 <_ZN6Stream8parseIntEc+0x42>

  do{
    if(c == skipChar)
 468:	8a 85       	ldd	r24, Y+10	; 0x0a
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	8e 81       	ldd	r24, Y+6	; 0x06
 470:	9f 81       	ldd	r25, Y+7	; 0x07
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	01 f0       	breq	.+0      	; 0x478 <_ZN6Stream8parseIntEc+0x52>
      ; // ignore this charactor
    else if(c == '-')
 478:	8e 81       	ldd	r24, Y+6	; 0x06
 47a:	9f 81       	ldd	r25, Y+7	; 0x07
 47c:	8d 32       	cpi	r24, 0x2D	; 45
 47e:	91 05       	cpc	r25, r1
 480:	01 f4       	brne	.+0      	; 0x482 <_ZN6Stream8parseIntEc+0x5c>
      isNegative = true;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	00 c0       	rjmp	.+0      	; 0x488 <_ZN6Stream8parseIntEc+0x62>
    else if(c >= '0' && c <= '9')        // is c a digit?
 488:	8e 81       	ldd	r24, Y+6	; 0x06
 48a:	9f 81       	ldd	r25, Y+7	; 0x07
 48c:	80 33       	cpi	r24, 0x30	; 48
 48e:	91 05       	cpc	r25, r1
 490:	04 f0       	brlt	.+0      	; 0x492 <_ZN6Stream8parseIntEc+0x6c>
 492:	8e 81       	ldd	r24, Y+6	; 0x06
 494:	9f 81       	ldd	r25, Y+7	; 0x07
 496:	8a 33       	cpi	r24, 0x3A	; 58
 498:	91 05       	cpc	r25, r1
 49a:	04 f4       	brge	.+0      	; 0x49c <_ZN6Stream8parseIntEc+0x76>
      value = value * 10 + c - '0';
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	9b 81       	ldd	r25, Y+3	; 0x03
 4a0:	ac 81       	ldd	r26, Y+4	; 0x04
 4a2:	bd 81       	ldd	r27, Y+5	; 0x05
 4a4:	2a e0       	ldi	r18, 0x0A	; 10
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	bc 01       	movw	r22, r24
 4ae:	cd 01       	movw	r24, r26
 4b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 4b4:	9b 01       	movw	r18, r22
 4b6:	ac 01       	movw	r20, r24
 4b8:	8e 81       	ldd	r24, Y+6	; 0x06
 4ba:	9f 81       	ldd	r25, Y+7	; 0x07
 4bc:	aa 27       	eor	r26, r26
 4be:	97 fd       	sbrc	r25, 7
 4c0:	a0 95       	com	r26
 4c2:	ba 2f       	mov	r27, r26
 4c4:	82 0f       	add	r24, r18
 4c6:	93 1f       	adc	r25, r19
 4c8:	a4 1f       	adc	r26, r20
 4ca:	b5 1f       	adc	r27, r21
 4cc:	c0 97       	sbiw	r24, 0x30	; 48
 4ce:	a1 09       	sbc	r26, r1
 4d0:	b1 09       	sbc	r27, r1
 4d2:	8a 83       	std	Y+2, r24	; 0x02
 4d4:	9b 83       	std	Y+3, r25	; 0x03
 4d6:	ac 83       	std	Y+4, r26	; 0x04
 4d8:	bd 83       	std	Y+5, r27	; 0x05
    read();  // consume the character we got with peek
 4da:	88 85       	ldd	r24, Y+8	; 0x08
 4dc:	99 85       	ldd	r25, Y+9	; 0x09
 4de:	fc 01       	movw	r30, r24
 4e0:	80 81       	ld	r24, Z
 4e2:	91 81       	ldd	r25, Z+1	; 0x01
 4e4:	06 96       	adiw	r24, 0x06	; 6
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 81       	ld	r18, Z
 4ea:	31 81       	ldd	r19, Z+1	; 0x01
 4ec:	88 85       	ldd	r24, Y+8	; 0x08
 4ee:	99 85       	ldd	r25, Y+9	; 0x09
 4f0:	f9 01       	movw	r30, r18
 4f2:	09 95       	icall
    c = timedPeek();
 4f4:	88 85       	ldd	r24, Y+8	; 0x08
 4f6:	99 85       	ldd	r25, Y+9	; 0x09
 4f8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 4fc:	9f 83       	std	Y+7, r25	; 0x07
 4fe:	8e 83       	std	Y+6, r24	; 0x06
  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
 500:	8e 81       	ldd	r24, Y+6	; 0x06
 502:	9f 81       	ldd	r25, Y+7	; 0x07
 504:	80 33       	cpi	r24, 0x30	; 48
 506:	91 05       	cpc	r25, r1
 508:	04 f0       	brlt	.+0      	; 0x50a <_ZN6Stream8parseIntEc+0xe4>
 50a:	8e 81       	ldd	r24, Y+6	; 0x06
 50c:	9f 81       	ldd	r25, Y+7	; 0x07
 50e:	8a 33       	cpi	r24, 0x3A	; 58
 510:	91 05       	cpc	r25, r1
 512:	04 f0       	brlt	.+0      	; 0x514 <_ZN6Stream8parseIntEc+0xee>
 514:	8a 85       	ldd	r24, Y+10	; 0x0a
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	8e 81       	ldd	r24, Y+6	; 0x06
 51c:	9f 81       	ldd	r25, Y+7	; 0x07
 51e:	28 17       	cp	r18, r24
 520:	39 07       	cpc	r19, r25
 522:	01 f4       	brne	.+0      	; 0x524 <_ZN6Stream8parseIntEc+0xfe>
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	00 c0       	rjmp	.+0      	; 0x528 <_ZN6Stream8parseIntEc+0x102>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	88 23       	and	r24, r24
 52c:	01 f0       	breq	.+0      	; 0x52e <_ZN6Stream8parseIntEc+0x108>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <_ZN6Stream8parseIntEc+0x10a>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	88 23       	and	r24, r24
 534:	01 f0       	breq	.+0      	; 0x536 <_ZN6Stream8parseIntEc+0x110>
    value = -value;
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	9b 81       	ldd	r25, Y+3	; 0x03
 53a:	ac 81       	ldd	r26, Y+4	; 0x04
 53c:	bd 81       	ldd	r27, Y+5	; 0x05
 53e:	b0 95       	com	r27
 540:	a0 95       	com	r26
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	af 4f       	sbci	r26, 0xFF	; 255
 54a:	bf 4f       	sbci	r27, 0xFF	; 255
 54c:	8a 83       	std	Y+2, r24	; 0x02
 54e:	9b 83       	std	Y+3, r25	; 0x03
 550:	ac 83       	std	Y+4, r26	; 0x04
 552:	bd 83       	std	Y+5, r27	; 0x05
  return value;
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	9b 81       	ldd	r25, Y+3	; 0x03
 558:	ac 81       	ldd	r26, Y+4	; 0x04
 55a:	bd 81       	ldd	r27, Y+5	; 0x05
}
 55c:	bc 01       	movw	r22, r24
 55e:	cd 01       	movw	r24, r26
 560:	2a 96       	adiw	r28, 0x0a	; 10
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	cf 91       	pop	r28
 56e:	df 91       	pop	r29
 570:	08 95       	ret

00000572 <_ZN6Stream10parseFloatEv>:


// as parseInt but returns a floating point value
float Stream::parseFloat()
{
 572:	df 93       	push	r29
 574:	cf 93       	push	r28
 576:	00 d0       	rcall	.+0      	; 0x578 <_ZN6Stream10parseFloatEv+0x6>
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	9a 83       	std	Y+2, r25	; 0x02
 57e:	89 83       	std	Y+1, r24	; 0x01
  return parseFloat(NO_SKIP_CHAR);
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	9a 81       	ldd	r25, Y+2	; 0x02
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 58a:	dc 01       	movw	r26, r24
 58c:	cb 01       	movw	r24, r22
}
 58e:	bc 01       	movw	r22, r24
 590:	cd 01       	movw	r24, r26
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	cf 91       	pop	r28
 598:	df 91       	pop	r29
 59a:	08 95       	ret

0000059c <_ZN6Stream10parseFloatEc>:

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
 59c:	df 93       	push	r29
 59e:	cf 93       	push	r28
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
 5a4:	2e 97       	sbiw	r28, 0x0e	; 14
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	9d 87       	std	Y+13, r25	; 0x0d
 5b2:	8c 87       	std	Y+12, r24	; 0x0c
 5b4:	6e 87       	std	Y+14, r22	; 0x0e
  boolean isNegative = false;
 5b6:	19 82       	std	Y+1, r1	; 0x01
  boolean isFraction = false;
 5b8:	1a 82       	std	Y+2, r1	; 0x02
  long value = 0;
 5ba:	1b 82       	std	Y+3, r1	; 0x03
 5bc:	1c 82       	std	Y+4, r1	; 0x04
 5be:	1d 82       	std	Y+5, r1	; 0x05
 5c0:	1e 82       	std	Y+6, r1	; 0x06
  char c;
  float fraction = 1.0;
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	a0 e8       	ldi	r26, 0x80	; 128
 5c8:	bf e3       	ldi	r27, 0x3F	; 63
 5ca:	88 87       	std	Y+8, r24	; 0x08
 5cc:	99 87       	std	Y+9, r25	; 0x09
 5ce:	aa 87       	std	Y+10, r26	; 0x0a
 5d0:	bb 87       	std	Y+11, r27	; 0x0b

  c = peekNextDigit();
 5d2:	8c 85       	ldd	r24, Y+12	; 0x0c
 5d4:	9d 85       	ldd	r25, Y+13	; 0x0d
 5d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 5da:	8f 83       	std	Y+7, r24	; 0x07
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
 5dc:	9f 81       	ldd	r25, Y+7	; 0x07
 5de:	8e 85       	ldd	r24, Y+14	; 0x0e
 5e0:	98 17       	cp	r25, r24
 5e2:	01 f4       	brne	.+0      	; 0x5e4 <_ZN6Stream10parseFloatEc+0x48>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <_ZN6Stream10parseFloatEc+0x4a>
      ; // ignore
    else if(c == '-')
 5e6:	8f 81       	ldd	r24, Y+7	; 0x07
 5e8:	8d 32       	cpi	r24, 0x2D	; 45
 5ea:	01 f4       	brne	.+0      	; 0x5ec <_ZN6Stream10parseFloatEc+0x50>
      isNegative = true;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	89 83       	std	Y+1, r24	; 0x01
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_ZN6Stream10parseFloatEc+0x56>
    else if (c == '.')
 5f2:	8f 81       	ldd	r24, Y+7	; 0x07
 5f4:	8e 32       	cpi	r24, 0x2E	; 46
 5f6:	01 f4       	brne	.+0      	; 0x5f8 <_ZN6Stream10parseFloatEc+0x5c>
      isFraction = true;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	8a 83       	std	Y+2, r24	; 0x02
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <_ZN6Stream10parseFloatEc+0x62>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
 5fe:	8f 81       	ldd	r24, Y+7	; 0x07
 600:	80 33       	cpi	r24, 0x30	; 48
 602:	00 f0       	brcs	.+0      	; 0x604 <_ZN6Stream10parseFloatEc+0x68>
 604:	8f 81       	ldd	r24, Y+7	; 0x07
 606:	8a 33       	cpi	r24, 0x3A	; 58
 608:	00 f4       	brcc	.+0      	; 0x60a <_ZN6Stream10parseFloatEc+0x6e>
      value = value * 10 + c - '0';
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	9c 81       	ldd	r25, Y+4	; 0x04
 60e:	ad 81       	ldd	r26, Y+5	; 0x05
 610:	be 81       	ldd	r27, Y+6	; 0x06
 612:	2a e0       	ldi	r18, 0x0A	; 10
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	bc 01       	movw	r22, r24
 61c:	cd 01       	movw	r24, r26
 61e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 622:	9b 01       	movw	r18, r22
 624:	ac 01       	movw	r20, r24
 626:	8f 81       	ldd	r24, Y+7	; 0x07
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	a0 e0       	ldi	r26, 0x00	; 0
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	82 0f       	add	r24, r18
 632:	93 1f       	adc	r25, r19
 634:	a4 1f       	adc	r26, r20
 636:	b5 1f       	adc	r27, r21
 638:	c0 97       	sbiw	r24, 0x30	; 48
 63a:	a1 09       	sbc	r26, r1
 63c:	b1 09       	sbc	r27, r1
 63e:	8b 83       	std	Y+3, r24	; 0x03
 640:	9c 83       	std	Y+4, r25	; 0x04
 642:	ad 83       	std	Y+5, r26	; 0x05
 644:	be 83       	std	Y+6, r27	; 0x06
      if(isFraction)
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	88 23       	and	r24, r24
 64a:	01 f0       	breq	.+0      	; 0x64c <_ZN6Stream10parseFloatEc+0xb0>
         fraction *= 0.1;
 64c:	68 85       	ldd	r22, Y+8	; 0x08
 64e:	79 85       	ldd	r23, Y+9	; 0x09
 650:	8a 85       	ldd	r24, Y+10	; 0x0a
 652:	9b 85       	ldd	r25, Y+11	; 0x0b
 654:	2d ec       	ldi	r18, 0xCD	; 205
 656:	3c ec       	ldi	r19, 0xCC	; 204
 658:	4c ec       	ldi	r20, 0xCC	; 204
 65a:	5d e3       	ldi	r21, 0x3D	; 61
 65c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 660:	dc 01       	movw	r26, r24
 662:	cb 01       	movw	r24, r22
 664:	88 87       	std	Y+8, r24	; 0x08
 666:	99 87       	std	Y+9, r25	; 0x09
 668:	aa 87       	std	Y+10, r26	; 0x0a
 66a:	bb 87       	std	Y+11, r27	; 0x0b
    }
    read();  // consume the character we got with peek
 66c:	8c 85       	ldd	r24, Y+12	; 0x0c
 66e:	9d 85       	ldd	r25, Y+13	; 0x0d
 670:	fc 01       	movw	r30, r24
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	06 96       	adiw	r24, 0x06	; 6
 678:	fc 01       	movw	r30, r24
 67a:	20 81       	ld	r18, Z
 67c:	31 81       	ldd	r19, Z+1	; 0x01
 67e:	8c 85       	ldd	r24, Y+12	; 0x0c
 680:	9d 85       	ldd	r25, Y+13	; 0x0d
 682:	f9 01       	movw	r30, r18
 684:	09 95       	icall
    c = timedPeek();
 686:	8c 85       	ldd	r24, Y+12	; 0x0c
 688:	9d 85       	ldd	r25, Y+13	; 0x0d
 68a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 68e:	8f 83       	std	Y+7, r24	; 0x07
  c = peekNextDigit();
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
 690:	8f 81       	ldd	r24, Y+7	; 0x07
 692:	80 33       	cpi	r24, 0x30	; 48
 694:	00 f0       	brcs	.+0      	; 0x696 <_ZN6Stream10parseFloatEc+0xfa>
 696:	8f 81       	ldd	r24, Y+7	; 0x07
 698:	8a 33       	cpi	r24, 0x3A	; 58
 69a:	00 f0       	brcs	.+0      	; 0x69c <_ZN6Stream10parseFloatEc+0x100>
 69c:	8f 81       	ldd	r24, Y+7	; 0x07
 69e:	8e 32       	cpi	r24, 0x2E	; 46
 6a0:	01 f0       	breq	.+0      	; 0x6a2 <_ZN6Stream10parseFloatEc+0x106>
 6a2:	9f 81       	ldd	r25, Y+7	; 0x07
 6a4:	8e 85       	ldd	r24, Y+14	; 0x0e
 6a6:	98 17       	cp	r25, r24
 6a8:	01 f4       	brne	.+0      	; 0x6aa <_ZN6Stream10parseFloatEc+0x10e>
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <_ZN6Stream10parseFloatEc+0x112>
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	88 23       	and	r24, r24
 6b2:	01 f0       	breq	.+0      	; 0x6b4 <_ZN6Stream10parseFloatEc+0x118>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <_ZN6Stream10parseFloatEc+0x11a>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );

  if(isNegative)
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	88 23       	and	r24, r24
 6ba:	01 f0       	breq	.+0      	; 0x6bc <_ZN6Stream10parseFloatEc+0x120>
    value = -value;
 6bc:	8b 81       	ldd	r24, Y+3	; 0x03
 6be:	9c 81       	ldd	r25, Y+4	; 0x04
 6c0:	ad 81       	ldd	r26, Y+5	; 0x05
 6c2:	be 81       	ldd	r27, Y+6	; 0x06
 6c4:	b0 95       	com	r27
 6c6:	a0 95       	com	r26
 6c8:	90 95       	com	r25
 6ca:	81 95       	neg	r24
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	af 4f       	sbci	r26, 0xFF	; 255
 6d0:	bf 4f       	sbci	r27, 0xFF	; 255
 6d2:	8b 83       	std	Y+3, r24	; 0x03
 6d4:	9c 83       	std	Y+4, r25	; 0x04
 6d6:	ad 83       	std	Y+5, r26	; 0x05
 6d8:	be 83       	std	Y+6, r27	; 0x06
  if(isFraction)
 6da:	8a 81       	ldd	r24, Y+2	; 0x02
 6dc:	88 23       	and	r24, r24
 6de:	01 f0       	breq	.+0      	; 0x6e0 <_ZN6Stream10parseFloatEc+0x144>
    return value * fraction;
 6e0:	6b 81       	ldd	r22, Y+3	; 0x03
 6e2:	7c 81       	ldd	r23, Y+4	; 0x04
 6e4:	8d 81       	ldd	r24, Y+5	; 0x05
 6e6:	9e 81       	ldd	r25, Y+6	; 0x06
 6e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 6ec:	dc 01       	movw	r26, r24
 6ee:	cb 01       	movw	r24, r22
 6f0:	bc 01       	movw	r22, r24
 6f2:	cd 01       	movw	r24, r26
 6f4:	28 85       	ldd	r18, Y+8	; 0x08
 6f6:	39 85       	ldd	r19, Y+9	; 0x09
 6f8:	4a 85       	ldd	r20, Y+10	; 0x0a
 6fa:	5b 85       	ldd	r21, Y+11	; 0x0b
 6fc:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 700:	dc 01       	movw	r26, r24
 702:	cb 01       	movw	r24, r22
 704:	00 c0       	rjmp	.+0      	; 0x706 <_ZN6Stream10parseFloatEc+0x16a>
  else
    return value;
 706:	6b 81       	ldd	r22, Y+3	; 0x03
 708:	7c 81       	ldd	r23, Y+4	; 0x04
 70a:	8d 81       	ldd	r24, Y+5	; 0x05
 70c:	9e 81       	ldd	r25, Y+6	; 0x06
 70e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 712:	dc 01       	movw	r26, r24
 714:	cb 01       	movw	r24, r22
}
 716:	bc 01       	movw	r22, r24
 718:	cd 01       	movw	r24, r26
 71a:	2e 96       	adiw	r28, 0x0e	; 14
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	cf 91       	pop	r28
 728:	df 91       	pop	r29
 72a:	08 95       	ret

0000072c <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 72c:	df 93       	push	r29
 72e:	cf 93       	push	r28
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	2a 97       	sbiw	r28, 0x0a	; 10
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	9e 83       	std	Y+6, r25	; 0x06
 742:	8d 83       	std	Y+5, r24	; 0x05
 744:	78 87       	std	Y+8, r23	; 0x08
 746:	6f 83       	std	Y+7, r22	; 0x07
 748:	5a 87       	std	Y+10, r21	; 0x0a
 74a:	49 87       	std	Y+9, r20	; 0x09
  size_t count = 0;
 74c:	1a 82       	std	Y+2, r1	; 0x02
 74e:	19 82       	std	Y+1, r1	; 0x01
  while (count < length) {
 750:	00 c0       	rjmp	.+0      	; 0x752 <_ZN6Stream9readBytesEPcj+0x26>
    int c = timedRead();
 752:	8d 81       	ldd	r24, Y+5	; 0x05
 754:	9e 81       	ldd	r25, Y+6	; 0x06
 756:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 75a:	9c 83       	std	Y+4, r25	; 0x04
 75c:	8b 83       	std	Y+3, r24	; 0x03
    if (c < 0) break;
 75e:	8b 81       	ldd	r24, Y+3	; 0x03
 760:	9c 81       	ldd	r25, Y+4	; 0x04
 762:	99 23       	and	r25, r25
 764:	04 f0       	brlt	.+0      	; 0x766 <_ZN6Stream9readBytesEPcj+0x3a>
    *buffer++ = (char)c;
 766:	2b 81       	ldd	r18, Y+3	; 0x03
 768:	8f 81       	ldd	r24, Y+7	; 0x07
 76a:	98 85       	ldd	r25, Y+8	; 0x08
 76c:	fc 01       	movw	r30, r24
 76e:	20 83       	st	Z, r18
 770:	8f 81       	ldd	r24, Y+7	; 0x07
 772:	98 85       	ldd	r25, Y+8	; 0x08
 774:	01 96       	adiw	r24, 0x01	; 1
 776:	98 87       	std	Y+8, r25	; 0x08
 778:	8f 83       	std	Y+7, r24	; 0x07
    count++;
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	9a 81       	ldd	r25, Y+2	; 0x02
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	9a 83       	std	Y+2, r25	; 0x02
 782:	89 83       	std	Y+1, r24	; 0x01
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	29 81       	ldd	r18, Y+1	; 0x01
 788:	3a 81       	ldd	r19, Y+2	; 0x02
 78a:	89 85       	ldd	r24, Y+9	; 0x09
 78c:	9a 85       	ldd	r25, Y+10	; 0x0a
 78e:	28 17       	cp	r18, r24
 790:	39 07       	cpc	r19, r25
 792:	00 f0       	brcs	.+0      	; 0x794 <_ZN6Stream9readBytesEPcj+0x68>
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	44 23       	and	r20, r20
 798:	01 f4       	brne	.+0      	; 0x79a <_ZN6Stream9readBytesEPcj+0x6e>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <_ZN6Stream9readBytesEPcj+0x70>
    int c = timedRead();
    if (c < 0) break;
 79c:	00 00       	nop
    *buffer++ = (char)c;
    count++;
  }
  return count;
 79e:	89 81       	ldd	r24, Y+1	; 0x01
 7a0:	9a 81       	ldd	r25, Y+2	; 0x02
}
 7a2:	2a 96       	adiw	r28, 0x0a	; 10
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	cf 91       	pop	r28
 7b0:	df 91       	pop	r29
 7b2:	08 95       	ret

000007b4 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 7b4:	df 93       	push	r29
 7b6:	cf 93       	push	r28
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	2b 97       	sbiw	r28, 0x0b	; 11
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	de bf       	out	0x3e, r29	; 62
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	cd bf       	out	0x3d, r28	; 61
 7c8:	9e 83       	std	Y+6, r25	; 0x06
 7ca:	8d 83       	std	Y+5, r24	; 0x05
 7cc:	6f 83       	std	Y+7, r22	; 0x07
 7ce:	59 87       	std	Y+9, r21	; 0x09
 7d0:	48 87       	std	Y+8, r20	; 0x08
 7d2:	3b 87       	std	Y+11, r19	; 0x0b
 7d4:	2a 87       	std	Y+10, r18	; 0x0a
  if (length < 1) return 0;
 7d6:	8a 85       	ldd	r24, Y+10	; 0x0a
 7d8:	9b 85       	ldd	r25, Y+11	; 0x0b
 7da:	00 97       	sbiw	r24, 0x00	; 0
 7dc:	01 f4       	brne	.+0      	; 0x7de <_ZN6Stream14readBytesUntilEcPcj+0x2a>
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <_ZN6Stream14readBytesUntilEcPcj+0x30>
  size_t index = 0;
 7e4:	1a 82       	std	Y+2, r1	; 0x02
 7e6:	19 82       	std	Y+1, r1	; 0x01
  while (index < length) {
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <_ZN6Stream14readBytesUntilEcPcj+0x36>
    int c = timedRead();
 7ea:	8d 81       	ldd	r24, Y+5	; 0x05
 7ec:	9e 81       	ldd	r25, Y+6	; 0x06
 7ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
 7f2:	9c 83       	std	Y+4, r25	; 0x04
 7f4:	8b 83       	std	Y+3, r24	; 0x03
    if (c < 0 || c == terminator) break;
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	9c 81       	ldd	r25, Y+4	; 0x04
 7fa:	99 23       	and	r25, r25
 7fc:	04 f0       	brlt	.+0      	; 0x7fe <_ZN6Stream14readBytesUntilEcPcj+0x4a>
 7fe:	8f 81       	ldd	r24, Y+7	; 0x07
 800:	28 2f       	mov	r18, r24
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	9c 81       	ldd	r25, Y+4	; 0x04
 808:	28 17       	cp	r18, r24
 80a:	39 07       	cpc	r19, r25
 80c:	01 f0       	breq	.+0      	; 0x80e <_ZN6Stream14readBytesUntilEcPcj+0x5a>
    *buffer++ = (char)c;
 80e:	2b 81       	ldd	r18, Y+3	; 0x03
 810:	88 85       	ldd	r24, Y+8	; 0x08
 812:	99 85       	ldd	r25, Y+9	; 0x09
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
 818:	88 85       	ldd	r24, Y+8	; 0x08
 81a:	99 85       	ldd	r25, Y+9	; 0x09
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	99 87       	std	Y+9, r25	; 0x09
 820:	88 87       	std	Y+8, r24	; 0x08
    index++;
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	9a 81       	ldd	r25, Y+2	; 0x02
 826:	01 96       	adiw	r24, 0x01	; 1
 828:	9a 83       	std	Y+2, r25	; 0x02
 82a:	89 83       	std	Y+1, r24	; 0x01

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	29 81       	ldd	r18, Y+1	; 0x01
 830:	3a 81       	ldd	r19, Y+2	; 0x02
 832:	8a 85       	ldd	r24, Y+10	; 0x0a
 834:	9b 85       	ldd	r25, Y+11	; 0x0b
 836:	28 17       	cp	r18, r24
 838:	39 07       	cpc	r19, r25
 83a:	00 f0       	brcs	.+0      	; 0x83c <_ZN6Stream14readBytesUntilEcPcj+0x88>
 83c:	40 e0       	ldi	r20, 0x00	; 0
 83e:	44 23       	and	r20, r20
 840:	01 f4       	brne	.+0      	; 0x842 <_ZN6Stream14readBytesUntilEcPcj+0x8e>
 842:	00 c0       	rjmp	.+0      	; 0x844 <_ZN6Stream14readBytesUntilEcPcj+0x90>
    int c = timedRead();
    if (c < 0 || c == terminator) break;
 844:	00 00       	nop
 846:	00 c0       	rjmp	.+0      	; 0x848 <_ZN6Stream14readBytesUntilEcPcj+0x94>
 848:	00 00       	nop
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
 84a:	89 81       	ldd	r24, Y+1	; 0x01
 84c:	9a 81       	ldd	r25, Y+2	; 0x02
}
 84e:	2b 96       	adiw	r28, 0x0b	; 11
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	cf 91       	pop	r28
 85c:	df 91       	pop	r29
 85e:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000010  00000000  00000000  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00000000  00000000  0000097e  2**0
                  ALLOC
  3 .stab         00001008  00000000  00000000  00000980  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000108e  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000001  00000000  00000000  00002a16  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text:

00000000 <_ZL9toneBeginh>:
#endif



static int8_t toneBegin(uint8_t _pin)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	aa 97       	sbiw	r28, 0x2a	; 42
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8a a7       	std	Y+42, r24	; 0x2a
  int8_t _timer = -1;
  1e:	8f ef       	ldi	r24, 0xFF	; 255
  20:	89 83       	std	Y+1, r24	; 0x01

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  22:	1b 82       	std	Y+3, r1	; 0x03
  24:	1a 82       	std	Y+2, r1	; 0x02
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZL9toneBeginh+0x28>
    if (tone_pins[i] == _pin) {
  28:	8a 81       	ldd	r24, Y+2	; 0x02
  2a:	9b 81       	ldd	r25, Y+3	; 0x03
  2c:	80 50       	subi	r24, 0x00	; 0
  2e:	90 40       	sbci	r25, 0x00	; 0
  30:	fc 01       	movw	r30, r24
  32:	90 81       	ld	r25, Z
  34:	8a a5       	ldd	r24, Y+42	; 0x2a
  36:	98 17       	cp	r25, r24
  38:	01 f4       	brne	.+0      	; 0x3a <_ZL9toneBeginh+0x3a>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3a:	8a 81       	ldd	r24, Y+2	; 0x02
  3c:	9b 81       	ldd	r25, Y+3	; 0x03
  3e:	80 50       	subi	r24, 0x00	; 0
  40:	90 40       	sbci	r25, 0x00	; 0
  42:	9f 83       	std	Y+7, r25	; 0x07
  44:	8e 83       	std	Y+6, r24	; 0x06
  46:	8e 81       	ldd	r24, Y+6	; 0x06
  48:	9f 81       	ldd	r25, Y+7	; 0x07
  4a:	fc 01       	movw	r30, r24
  4c:	14 91       	lpm	r17, Z
  4e:	18 87       	std	Y+8, r17	; 0x08
  50:	88 85       	ldd	r24, Y+8	; 0x08
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZL9toneBeginh+0x54>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  54:	8a 81       	ldd	r24, Y+2	; 0x02
  56:	9b 81       	ldd	r25, Y+3	; 0x03
  58:	01 96       	adiw	r24, 0x01	; 1
  5a:	9b 83       	std	Y+3, r25	; 0x03
  5c:	8a 83       	std	Y+2, r24	; 0x02
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	8a 81       	ldd	r24, Y+2	; 0x02
  62:	9b 81       	ldd	r25, Y+3	; 0x03
  64:	18 16       	cp	r1, r24
  66:	19 06       	cpc	r1, r25
  68:	04 f4       	brge	.+0      	; 0x6a <_ZL9toneBeginh+0x6a>
  6a:	20 e0       	ldi	r18, 0x00	; 0
  6c:	22 23       	and	r18, r18
  6e:	01 f4       	brne	.+0      	; 0x70 <_ZL9toneBeginh+0x70>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  70:	1d 82       	std	Y+5, r1	; 0x05
  72:	1c 82       	std	Y+4, r1	; 0x04
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZL9toneBeginh+0x76>
    if (tone_pins[i] == 255) {
  76:	8c 81       	ldd	r24, Y+4	; 0x04
  78:	9d 81       	ldd	r25, Y+5	; 0x05
  7a:	80 50       	subi	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	fc 01       	movw	r30, r24
  80:	80 81       	ld	r24, Z
  82:	8f 3f       	cpi	r24, 0xFF	; 255
  84:	01 f4       	brne	.+0      	; 0x86 <_ZL9toneBeginh+0x86>
      tone_pins[i] = _pin;
  86:	8c 81       	ldd	r24, Y+4	; 0x04
  88:	9d 81       	ldd	r25, Y+5	; 0x05
  8a:	80 50       	subi	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	2a a5       	ldd	r18, Y+42	; 0x2a
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  94:	8c 81       	ldd	r24, Y+4	; 0x04
  96:	9d 81       	ldd	r25, Y+5	; 0x05
  98:	80 50       	subi	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	9a 87       	std	Y+10, r25	; 0x0a
  9e:	89 87       	std	Y+9, r24	; 0x09
  a0:	89 85       	ldd	r24, Y+9	; 0x09
  a2:	9a 85       	ldd	r25, Y+10	; 0x0a
  a4:	fc 01       	movw	r30, r24
  a6:	14 91       	lpm	r17, Z
  a8:	1b 87       	std	Y+11, r17	; 0x0b
  aa:	8b 85       	ldd	r24, Y+11	; 0x0b
  ac:	89 83       	std	Y+1, r24	; 0x01
      break;
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZL9toneBeginh+0xb0>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	9d 83       	std	Y+5, r25	; 0x05
  b8:	8c 83       	std	Y+4, r24	; 0x04
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	8c 81       	ldd	r24, Y+4	; 0x04
  be:	9d 81       	ldd	r25, Y+5	; 0x05
  c0:	18 16       	cp	r1, r24
  c2:	19 06       	cpc	r1, r25
  c4:	04 f4       	brge	.+0      	; 0xc6 <_ZL9toneBeginh+0xc6>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	22 23       	and	r18, r18
  ca:	01 f4       	brne	.+0      	; 0xcc <_ZL9toneBeginh+0xcc>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	8f 3f       	cpi	r24, 0xFF	; 255
  d0:	01 f4       	brne	.+0      	; 0xd2 <_ZL9toneBeginh+0xd2>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZL9toneBeginh+0xd4>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	99 27       	eor	r25, r25
  d8:	87 fd       	sbrc	r24, 7
  da:	90 95       	com	r25
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 05       	cpc	r25, r1
  e0:	01 f4       	brne	.+0      	; 0xe2 <_ZL9toneBeginh+0xe2>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_ZL9toneBeginh+0xe4>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	91 05       	cpc	r25, r1
  e8:	01 f4       	brne	.+0      	; 0xea <_ZL9toneBeginh+0xea>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZL9toneBeginh+0xec>
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	01 f0       	breq	.+0      	; 0xf0 <_ZL9toneBeginh+0xf0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZL9toneBeginh+0xf2>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  f2:	84 e4       	ldi	r24, 0x44	; 68
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	10 82       	st	Z, r1
        TCCR0B = 0;
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
        bitWrite(TCCR0A, WGM01, 1);
 102:	84 e4       	ldi	r24, 0x44	; 68
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	24 e4       	ldi	r18, 0x44	; 68
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	22 60       	ori	r18, 0x02	; 2
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
        bitWrite(TCCR0B, CS00, 1);
 114:	85 e4       	ldi	r24, 0x45	; 69
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	25 e4       	ldi	r18, 0x45	; 69
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	21 60       	ori	r18, 0x01	; 1
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
 126:	8a a5       	ldd	r24, Y+42	; 0x2a
 128:	88 2f       	mov	r24, r24
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	80 50       	subi	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	9d 87       	std	Y+13, r25	; 0x0d
 132:	8c 87       	std	Y+12, r24	; 0x0c
 134:	8c 85       	ldd	r24, Y+12	; 0x0c
 136:	9d 85       	ldd	r25, Y+13	; 0x0d
 138:	fc 01       	movw	r30, r24
 13a:	14 91       	lpm	r17, Z
 13c:	1e 87       	std	Y+14, r17	; 0x0e
 13e:	8e 85       	ldd	r24, Y+14	; 0x0e
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	80 50       	subi	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	98 8b       	std	Y+16, r25	; 0x10
 14e:	8f 87       	std	Y+15, r24	; 0x0f
 150:	8f 85       	ldd	r24, Y+15	; 0x0f
 152:	98 89       	ldd	r25, Y+16	; 0x10
 154:	8c 01       	movw	r16, r24
 156:	f8 01       	movw	r30, r16
 158:	e5 90       	lpm	r14, Z+
 15a:	f4 90       	lpm	r15, Z
 15c:	8f 01       	movw	r16, r30
 15e:	fa 8a       	std	Y+18, r15	; 0x12
 160:	e9 8a       	std	Y+17, r14	; 0x11
 162:	18 8b       	std	Y+16, r17	; 0x10
 164:	0f 87       	std	Y+15, r16	; 0x0f
 166:	89 89       	ldd	r24, Y+17	; 0x11
 168:	9a 89       	ldd	r25, Y+18	; 0x12
 16a:	90 93 00 00 	sts	0x0000, r25
 16e:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
 172:	8a a5       	ldd	r24, Y+42	; 0x2a
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	80 50       	subi	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	9c 8b       	std	Y+20, r25	; 0x14
 17e:	8b 8b       	std	Y+19, r24	; 0x13
 180:	8b 89       	ldd	r24, Y+19	; 0x13
 182:	9c 89       	ldd	r25, Y+20	; 0x14
 184:	fc 01       	movw	r30, r24
 186:	14 91       	lpm	r17, Z
 188:	1d 8b       	std	Y+21, r17	; 0x15
 18a:	8d 89       	ldd	r24, Y+21	; 0x15
 18c:	80 93 00 00 	sts	0x0000, r24
        break;
 190:	00 c0       	rjmp	.+0      	; 0x192 <_ZL9toneBeginh+0x192>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	10 82       	st	Z, r1
        TCCR1B = 0;
 19a:	81 e8       	ldi	r24, 0x81	; 129
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
 1a2:	81 e8       	ldi	r24, 0x81	; 129
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	21 e8       	ldi	r18, 0x81	; 129
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	28 60       	ori	r18, 0x08	; 8
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
        bitWrite(TCCR1B, CS10, 1);
 1b4:	81 e8       	ldi	r24, 0x81	; 129
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	21 e8       	ldi	r18, 0x81	; 129
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	20 81       	ld	r18, Z
 1c0:	21 60       	ori	r18, 0x01	; 1
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
 1c6:	8a a5       	ldd	r24, Y+42	; 0x2a
 1c8:	88 2f       	mov	r24, r24
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	80 50       	subi	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	9f 8b       	std	Y+23, r25	; 0x17
 1d2:	8e 8b       	std	Y+22, r24	; 0x16
 1d4:	8e 89       	ldd	r24, Y+22	; 0x16
 1d6:	9f 89       	ldd	r25, Y+23	; 0x17
 1d8:	fc 01       	movw	r30, r24
 1da:	14 91       	lpm	r17, Z
 1dc:	18 8f       	std	Y+24, r17	; 0x18
 1de:	88 8d       	ldd	r24, Y+24	; 0x18
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	80 50       	subi	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	9a 8f       	std	Y+26, r25	; 0x1a
 1ee:	89 8f       	std	Y+25, r24	; 0x19
 1f0:	89 8d       	ldd	r24, Y+25	; 0x19
 1f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1f4:	8c 01       	movw	r16, r24
 1f6:	f8 01       	movw	r30, r16
 1f8:	e5 90       	lpm	r14, Z+
 1fa:	f4 90       	lpm	r15, Z
 1fc:	8f 01       	movw	r16, r30
 1fe:	fc 8e       	std	Y+28, r15	; 0x1c
 200:	eb 8e       	std	Y+27, r14	; 0x1b
 202:	1a 8f       	std	Y+26, r17	; 0x1a
 204:	09 8f       	std	Y+25, r16	; 0x19
 206:	8b 8d       	ldd	r24, Y+27	; 0x1b
 208:	9c 8d       	ldd	r25, Y+28	; 0x1c
 20a:	90 93 00 00 	sts	0x0000, r25
 20e:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
 212:	8a a5       	ldd	r24, Y+42	; 0x2a
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	80 50       	subi	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	9e 8f       	std	Y+30, r25	; 0x1e
 21e:	8d 8f       	std	Y+29, r24	; 0x1d
 220:	8d 8d       	ldd	r24, Y+29	; 0x1d
 222:	9e 8d       	ldd	r25, Y+30	; 0x1e
 224:	fc 01       	movw	r30, r24
 226:	14 91       	lpm	r17, Z
 228:	1f 8f       	std	Y+31, r17	; 0x1f
 22a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 22c:	80 93 00 00 	sts	0x0000, r24
        break;
 230:	00 c0       	rjmp	.+0      	; 0x232 <_ZL9toneBeginh+0x232>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
 232:	80 eb       	ldi	r24, 0xB0	; 176
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	10 82       	st	Z, r1
        TCCR2B = 0;
 23a:	81 eb       	ldi	r24, 0xB1	; 177
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
 242:	80 eb       	ldi	r24, 0xB0	; 176
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	20 eb       	ldi	r18, 0xB0	; 176
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	20 81       	ld	r18, Z
 24e:	22 60       	ori	r18, 0x02	; 2
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
        bitWrite(TCCR2B, CS20, 1);
 254:	81 eb       	ldi	r24, 0xB1	; 177
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	21 eb       	ldi	r18, 0xB1	; 177
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	21 60       	ori	r18, 0x01	; 1
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 266:	8a a5       	ldd	r24, Y+42	; 0x2a
 268:	88 2f       	mov	r24, r24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	80 50       	subi	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	99 a3       	std	Y+33, r25	; 0x21
 272:	88 a3       	std	Y+32, r24	; 0x20
 274:	88 a1       	ldd	r24, Y+32	; 0x20
 276:	99 a1       	ldd	r25, Y+33	; 0x21
 278:	fc 01       	movw	r30, r24
 27a:	14 91       	lpm	r17, Z
 27c:	1a a3       	std	Y+34, r17	; 0x22
 27e:	8a a1       	ldd	r24, Y+34	; 0x22
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	80 50       	subi	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	9c a3       	std	Y+36, r25	; 0x24
 28e:	8b a3       	std	Y+35, r24	; 0x23
 290:	8b a1       	ldd	r24, Y+35	; 0x23
 292:	9c a1       	ldd	r25, Y+36	; 0x24
 294:	8c 01       	movw	r16, r24
 296:	f8 01       	movw	r30, r16
 298:	e5 90       	lpm	r14, Z+
 29a:	f4 90       	lpm	r15, Z
 29c:	8f 01       	movw	r16, r30
 29e:	fe a2       	std	Y+38, r15	; 0x26
 2a0:	ed a2       	std	Y+37, r14	; 0x25
 2a2:	1c a3       	std	Y+36, r17	; 0x24
 2a4:	0b a3       	std	Y+35, r16	; 0x23
 2a6:	8d a1       	ldd	r24, Y+37	; 0x25
 2a8:	9e a1       	ldd	r25, Y+38	; 0x26
 2aa:	90 93 00 00 	sts	0x0000, r25
 2ae:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 2b2:	8a a5       	ldd	r24, Y+42	; 0x2a
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	80 50       	subi	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	98 a7       	std	Y+40, r25	; 0x28
 2be:	8f a3       	std	Y+39, r24	; 0x27
 2c0:	8f a1       	ldd	r24, Y+39	; 0x27
 2c2:	98 a5       	ldd	r25, Y+40	; 0x28
 2c4:	fc 01       	movw	r30, r24
 2c6:	14 91       	lpm	r17, Z
 2c8:	19 a7       	std	Y+41, r17	; 0x29
 2ca:	89 a5       	ldd	r24, Y+41	; 0x29
 2cc:	80 93 00 00 	sts	0x0000, r24
        break;
 2d0:	00 00       	nop
        break;
      #endif
    }
  }

  return _timer;
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2d4:	aa 96       	adiw	r28, 0x2a	; 42
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	cf 91       	pop	r28
 2e2:	df 91       	pop	r29
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	61 97       	sbiw	r28, 0x11	; 17
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	8b 87       	std	Y+11, r24	; 0x0b
 304:	7d 87       	std	Y+13, r23	; 0x0d
 306:	6c 87       	std	Y+12, r22	; 0x0c
 308:	2e 87       	std	Y+14, r18	; 0x0e
 30a:	3f 87       	std	Y+15, r19	; 0x0f
 30c:	48 8b       	std	Y+16, r20	; 0x10
 30e:	59 8b       	std	Y+17, r21	; 0x11
  uint8_t prescalarbits = 0b001;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	89 83       	std	Y+1, r24	; 0x01
  long toggle_count = 0;
 314:	1a 82       	std	Y+2, r1	; 0x02
 316:	1b 82       	std	Y+3, r1	; 0x03
 318:	1c 82       	std	Y+4, r1	; 0x04
 31a:	1d 82       	std	Y+5, r1	; 0x05
  uint32_t ocr = 0;
 31c:	1e 82       	std	Y+6, r1	; 0x06
 31e:	1f 82       	std	Y+7, r1	; 0x07
 320:	18 86       	std	Y+8, r1	; 0x08
 322:	19 86       	std	Y+9, r1	; 0x09
  int8_t _timer;

  _timer = toneBegin(_pin);
 324:	8b 85       	ldd	r24, Y+11	; 0x0b
 326:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 32a:	8a 87       	std	Y+10, r24	; 0x0a

  if (_timer >= 0)
 32c:	8a 85       	ldd	r24, Y+10	; 0x0a
 32e:	88 23       	and	r24, r24
 330:	04 f4       	brge	.+0      	; 0x332 <_Z4tonehjm+0x44>
 332:	00 c0       	rjmp	.+0      	; 0x334 <_Z4tonehjm+0x46>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 334:	8b 85       	ldd	r24, Y+11	; 0x0b
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 33c:	8a 85       	ldd	r24, Y+10	; 0x0a
 33e:	88 23       	and	r24, r24
 340:	01 f0       	breq	.+0      	; 0x342 <_Z4tonehjm+0x54>
 342:	8a 85       	ldd	r24, Y+10	; 0x0a
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	01 f0       	breq	.+0      	; 0x348 <_Z4tonehjm+0x5a>
 348:	00 c0       	rjmp	.+0      	; 0x34a <_Z4tonehjm+0x5c>
    {
      ocr = F_CPU / frequency / 2 - 1;
 34a:	8c 85       	ldd	r24, Y+12	; 0x0c
 34c:	9d 85       	ldd	r25, Y+13	; 0x0d
 34e:	9c 01       	movw	r18, r24
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	92 e1       	ldi	r25, 0x12	; 18
 358:	aa e7       	ldi	r26, 0x7A	; 122
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	bc 01       	movw	r22, r24
 35e:	cd 01       	movw	r24, r26
 360:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 364:	da 01       	movw	r26, r20
 366:	c9 01       	movw	r24, r18
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	a1 09       	sbc	r26, r1
 36c:	b1 09       	sbc	r27, r1
 36e:	8e 83       	std	Y+6, r24	; 0x06
 370:	9f 83       	std	Y+7, r25	; 0x07
 372:	a8 87       	std	Y+8, r26	; 0x08
 374:	b9 87       	std	Y+9, r27	; 0x09
      prescalarbits = 0b001;  // ck/1: same for both timers
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	89 83       	std	Y+1, r24	; 0x01
      if (ocr > 255)
 37a:	8e 81       	ldd	r24, Y+6	; 0x06
 37c:	9f 81       	ldd	r25, Y+7	; 0x07
 37e:	a8 85       	ldd	r26, Y+8	; 0x08
 380:	b9 85       	ldd	r27, Y+9	; 0x09
 382:	8f 3f       	cpi	r24, 0xFF	; 255
 384:	91 05       	cpc	r25, r1
 386:	a1 05       	cpc	r26, r1
 388:	b1 05       	cpc	r27, r1
 38a:	01 f0       	breq	.+0      	; 0x38c <_Z4tonehjm+0x9e>
 38c:	00 f4       	brcc	.+0      	; 0x38e <_Z4tonehjm+0xa0>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <_Z4tonehjm+0xa2>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 390:	8c 85       	ldd	r24, Y+12	; 0x0c
 392:	9d 85       	ldd	r25, Y+13	; 0x0d
 394:	9c 01       	movw	r18, r24
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	80 e4       	ldi	r24, 0x40	; 64
 39c:	92 e4       	ldi	r25, 0x42	; 66
 39e:	af e0       	ldi	r26, 0x0F	; 15
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	bc 01       	movw	r22, r24
 3a4:	cd 01       	movw	r24, r26
 3a6:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 3aa:	da 01       	movw	r26, r20
 3ac:	c9 01       	movw	r24, r18
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b1 09       	sbc	r27, r1
 3b4:	8e 83       	std	Y+6, r24	; 0x06
 3b6:	9f 83       	std	Y+7, r25	; 0x07
 3b8:	a8 87       	std	Y+8, r26	; 0x08
 3ba:	b9 87       	std	Y+9, r27	; 0x09
        prescalarbits = 0b010;  // ck/8: same for both timers
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	89 83       	std	Y+1, r24	; 0x01

        if (_timer == 2 && ocr > 255)
 3c0:	8a 85       	ldd	r24, Y+10	; 0x0a
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	01 f4       	brne	.+0      	; 0x3c6 <_Z4tonehjm+0xd8>
 3c6:	8e 81       	ldd	r24, Y+6	; 0x06
 3c8:	9f 81       	ldd	r25, Y+7	; 0x07
 3ca:	a8 85       	ldd	r26, Y+8	; 0x08
 3cc:	b9 85       	ldd	r27, Y+9	; 0x09
 3ce:	8f 3f       	cpi	r24, 0xFF	; 255
 3d0:	91 05       	cpc	r25, r1
 3d2:	a1 05       	cpc	r26, r1
 3d4:	b1 05       	cpc	r27, r1
 3d6:	01 f0       	breq	.+0      	; 0x3d8 <_Z4tonehjm+0xea>
 3d8:	00 f0       	brcs	.+0      	; 0x3da <_Z4tonehjm+0xec>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 3da:	8c 85       	ldd	r24, Y+12	; 0x0c
 3dc:	9d 85       	ldd	r25, Y+13	; 0x0d
 3de:	9c 01       	movw	r18, r24
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	80 e9       	ldi	r24, 0x90	; 144
 3e6:	90 ed       	ldi	r25, 0xD0	; 208
 3e8:	a3 e0       	ldi	r26, 0x03	; 3
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	bc 01       	movw	r22, r24
 3ee:	cd 01       	movw	r24, r26
 3f0:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 3f4:	da 01       	movw	r26, r20
 3f6:	c9 01       	movw	r24, r18
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	a1 09       	sbc	r26, r1
 3fc:	b1 09       	sbc	r27, r1
 3fe:	8e 83       	std	Y+6, r24	; 0x06
 400:	9f 83       	std	Y+7, r25	; 0x07
 402:	a8 87       	std	Y+8, r26	; 0x08
 404:	b9 87       	std	Y+9, r27	; 0x09
          prescalarbits = 0b011;
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	89 83       	std	Y+1, r24	; 0x01
        }

        if (ocr > 255)
 40a:	8e 81       	ldd	r24, Y+6	; 0x06
 40c:	9f 81       	ldd	r25, Y+7	; 0x07
 40e:	a8 85       	ldd	r26, Y+8	; 0x08
 410:	b9 85       	ldd	r27, Y+9	; 0x09
 412:	8f 3f       	cpi	r24, 0xFF	; 255
 414:	91 05       	cpc	r25, r1
 416:	a1 05       	cpc	r26, r1
 418:	b1 05       	cpc	r27, r1
 41a:	01 f0       	breq	.+0      	; 0x41c <_Z4tonehjm+0x12e>
 41c:	00 f4       	brcc	.+0      	; 0x41e <_Z4tonehjm+0x130>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <_Z4tonehjm+0x132>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 420:	8c 85       	ldd	r24, Y+12	; 0x0c
 422:	9d 85       	ldd	r25, Y+13	; 0x0d
 424:	9c 01       	movw	r18, r24
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	88 e4       	ldi	r24, 0x48	; 72
 42c:	98 ee       	ldi	r25, 0xE8	; 232
 42e:	a1 e0       	ldi	r26, 0x01	; 1
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	bc 01       	movw	r22, r24
 434:	cd 01       	movw	r24, r26
 436:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 43a:	da 01       	movw	r26, r20
 43c:	c9 01       	movw	r24, r18
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	a1 09       	sbc	r26, r1
 442:	b1 09       	sbc	r27, r1
 444:	8e 83       	std	Y+6, r24	; 0x06
 446:	9f 83       	std	Y+7, r25	; 0x07
 448:	a8 87       	std	Y+8, r26	; 0x08
 44a:	b9 87       	std	Y+9, r27	; 0x09
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 44c:	8a 85       	ldd	r24, Y+10	; 0x0a
 44e:	88 23       	and	r24, r24
 450:	01 f4       	brne	.+0      	; 0x452 <_Z4tonehjm+0x164>
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	00 c0       	rjmp	.+0      	; 0x456 <_Z4tonehjm+0x168>
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	89 83       	std	Y+1, r24	; 0x01

          if (_timer == 2 && ocr > 255)
 45a:	8a 85       	ldd	r24, Y+10	; 0x0a
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	01 f4       	brne	.+0      	; 0x460 <_Z4tonehjm+0x172>
 460:	8e 81       	ldd	r24, Y+6	; 0x06
 462:	9f 81       	ldd	r25, Y+7	; 0x07
 464:	a8 85       	ldd	r26, Y+8	; 0x08
 466:	b9 85       	ldd	r27, Y+9	; 0x09
 468:	8f 3f       	cpi	r24, 0xFF	; 255
 46a:	91 05       	cpc	r25, r1
 46c:	a1 05       	cpc	r26, r1
 46e:	b1 05       	cpc	r27, r1
 470:	01 f0       	breq	.+0      	; 0x472 <_Z4tonehjm+0x184>
 472:	00 f0       	brcs	.+0      	; 0x474 <_Z4tonehjm+0x186>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 474:	8c 85       	ldd	r24, Y+12	; 0x0c
 476:	9d 85       	ldd	r25, Y+13	; 0x0d
 478:	9c 01       	movw	r18, r24
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	84 e2       	ldi	r24, 0x24	; 36
 480:	94 ef       	ldi	r25, 0xF4	; 244
 482:	a0 e0       	ldi	r26, 0x00	; 0
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	bc 01       	movw	r22, r24
 488:	cd 01       	movw	r24, r26
 48a:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 48e:	da 01       	movw	r26, r20
 490:	c9 01       	movw	r24, r18
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	a1 09       	sbc	r26, r1
 496:	b1 09       	sbc	r27, r1
 498:	8e 83       	std	Y+6, r24	; 0x06
 49a:	9f 83       	std	Y+7, r25	; 0x07
 49c:	a8 87       	std	Y+8, r26	; 0x08
 49e:	b9 87       	std	Y+9, r27	; 0x09
            prescalarbits = 0b101;
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	89 83       	std	Y+1, r24	; 0x01
          }

          if (ocr > 255)
 4a4:	8e 81       	ldd	r24, Y+6	; 0x06
 4a6:	9f 81       	ldd	r25, Y+7	; 0x07
 4a8:	a8 85       	ldd	r26, Y+8	; 0x08
 4aa:	b9 85       	ldd	r27, Y+9	; 0x09
 4ac:	8f 3f       	cpi	r24, 0xFF	; 255
 4ae:	91 05       	cpc	r25, r1
 4b0:	a1 05       	cpc	r26, r1
 4b2:	b1 05       	cpc	r27, r1
 4b4:	01 f0       	breq	.+0      	; 0x4b6 <_Z4tonehjm+0x1c8>
 4b6:	00 f4       	brcc	.+0      	; 0x4b8 <_Z4tonehjm+0x1ca>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <_Z4tonehjm+0x1cc>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 4ba:	8c 85       	ldd	r24, Y+12	; 0x0c
 4bc:	9d 85       	ldd	r25, Y+13	; 0x0d
 4be:	9c 01       	movw	r18, r24
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	82 e1       	ldi	r24, 0x12	; 18
 4c6:	9a e7       	ldi	r25, 0x7A	; 122
 4c8:	a0 e0       	ldi	r26, 0x00	; 0
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	bc 01       	movw	r22, r24
 4ce:	cd 01       	movw	r24, r26
 4d0:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 4d4:	da 01       	movw	r26, r20
 4d6:	c9 01       	movw	r24, r18
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	a1 09       	sbc	r26, r1
 4dc:	b1 09       	sbc	r27, r1
 4de:	8e 83       	std	Y+6, r24	; 0x06
 4e0:	9f 83       	std	Y+7, r25	; 0x07
 4e2:	a8 87       	std	Y+8, r26	; 0x08
 4e4:	b9 87       	std	Y+9, r27	; 0x09
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 4e6:	8a 85       	ldd	r24, Y+10	; 0x0a
 4e8:	88 23       	and	r24, r24
 4ea:	01 f4       	brne	.+0      	; 0x4ec <_Z4tonehjm+0x1fe>
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <_Z4tonehjm+0x202>
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	89 83       	std	Y+1, r24	; 0x01
            if (ocr > 255)
 4f4:	8e 81       	ldd	r24, Y+6	; 0x06
 4f6:	9f 81       	ldd	r25, Y+7	; 0x07
 4f8:	a8 85       	ldd	r26, Y+8	; 0x08
 4fa:	b9 85       	ldd	r27, Y+9	; 0x09
 4fc:	8f 3f       	cpi	r24, 0xFF	; 255
 4fe:	91 05       	cpc	r25, r1
 500:	a1 05       	cpc	r26, r1
 502:	b1 05       	cpc	r27, r1
 504:	01 f0       	breq	.+0      	; 0x506 <_Z4tonehjm+0x218>
 506:	00 f0       	brcs	.+0      	; 0x508 <_Z4tonehjm+0x21a>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 508:	8c 85       	ldd	r24, Y+12	; 0x0c
 50a:	9d 85       	ldd	r25, Y+13	; 0x0d
 50c:	9c 01       	movw	r18, r24
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	92 e1       	ldi	r25, 0x12	; 18
 516:	aa e7       	ldi	r26, 0x7A	; 122
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	bc 01       	movw	r22, r24
 51c:	cd 01       	movw	r24, r26
 51e:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 522:	da 01       	movw	r26, r20
 524:	c9 01       	movw	r24, r18
 526:	07 2e       	mov	r0, r23
 528:	7a e0       	ldi	r23, 0x0A	; 10
 52a:	b6 95       	lsr	r27
 52c:	a7 95       	ror	r26
 52e:	97 95       	ror	r25
 530:	87 95       	ror	r24
 532:	7a 95       	dec	r23
 534:	01 f4       	brne	.+0      	; 0x536 <_Z4tonehjm+0x248>
 536:	70 2d       	mov	r23, r0
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	a1 09       	sbc	r26, r1
 53c:	b1 09       	sbc	r27, r1
 53e:	8e 83       	std	Y+6, r24	; 0x06
 540:	9f 83       	std	Y+7, r25	; 0x07
 542:	a8 87       	std	Y+8, r26	; 0x08
 544:	b9 87       	std	Y+9, r27	; 0x09
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 546:	8a 85       	ldd	r24, Y+10	; 0x0a
 548:	88 23       	and	r24, r24
 54a:	01 f4       	brne	.+0      	; 0x54c <_Z4tonehjm+0x25e>
 54c:	85 e0       	ldi	r24, 0x05	; 5
 54e:	00 c0       	rjmp	.+0      	; 0x550 <_Z4tonehjm+0x262>
 550:	87 e0       	ldi	r24, 0x07	; 7
 552:	89 83       	std	Y+1, r24	; 0x01
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 554:	8a 85       	ldd	r24, Y+10	; 0x0a
 556:	88 23       	and	r24, r24
 558:	01 f4       	brne	.+0      	; 0x55a <_Z4tonehjm+0x26c>
      {
        TCCR0B = prescalarbits;
 55a:	85 e4       	ldi	r24, 0x45	; 69
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	29 81       	ldd	r18, Y+1	; 0x01
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 564:	00 c0       	rjmp	.+0      	; 0x566 <_Z4tonehjm+0x278>
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
 566:	81 eb       	ldi	r24, 0xB1	; 177
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	29 81       	ldd	r18, Y+1	; 0x01
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 570:	00 c0       	rjmp	.+0      	; 0x572 <_Z4tonehjm+0x284>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 572:	8c 85       	ldd	r24, Y+12	; 0x0c
 574:	9d 85       	ldd	r25, Y+13	; 0x0d
 576:	9c 01       	movw	r18, r24
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	92 e1       	ldi	r25, 0x12	; 18
 580:	aa e7       	ldi	r26, 0x7A	; 122
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	bc 01       	movw	r22, r24
 586:	cd 01       	movw	r24, r26
 588:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 58c:	da 01       	movw	r26, r20
 58e:	c9 01       	movw	r24, r18
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	a1 09       	sbc	r26, r1
 594:	b1 09       	sbc	r27, r1
 596:	8e 83       	std	Y+6, r24	; 0x06
 598:	9f 83       	std	Y+7, r25	; 0x07
 59a:	a8 87       	std	Y+8, r26	; 0x08
 59c:	b9 87       	std	Y+9, r27	; 0x09

      prescalarbits = 0b001;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	89 83       	std	Y+1, r24	; 0x01
      if (ocr > 0xffff)
 5a2:	8e 81       	ldd	r24, Y+6	; 0x06
 5a4:	9f 81       	ldd	r25, Y+7	; 0x07
 5a6:	a8 85       	ldd	r26, Y+8	; 0x08
 5a8:	b9 85       	ldd	r27, Y+9	; 0x09
 5aa:	80 30       	cpi	r24, 0x00	; 0
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	9f 07       	cpc	r25, r31
 5b0:	f1 e0       	ldi	r31, 0x01	; 1
 5b2:	af 07       	cpc	r26, r31
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	bf 07       	cpc	r27, r31
 5b8:	00 f0       	brcs	.+0      	; 0x5ba <_Z4tonehjm+0x2cc>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 5ba:	8c 85       	ldd	r24, Y+12	; 0x0c
 5bc:	9d 85       	ldd	r25, Y+13	; 0x0d
 5be:	9c 01       	movw	r18, r24
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	88 e4       	ldi	r24, 0x48	; 72
 5c6:	98 ee       	ldi	r25, 0xE8	; 232
 5c8:	a1 e0       	ldi	r26, 0x01	; 1
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	bc 01       	movw	r22, r24
 5ce:	cd 01       	movw	r24, r26
 5d0:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 5d4:	da 01       	movw	r26, r20
 5d6:	c9 01       	movw	r24, r18
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	a1 09       	sbc	r26, r1
 5dc:	b1 09       	sbc	r27, r1
 5de:	8e 83       	std	Y+6, r24	; 0x06
 5e0:	9f 83       	std	Y+7, r25	; 0x07
 5e2:	a8 87       	std	Y+8, r26	; 0x08
 5e4:	b9 87       	std	Y+9, r27	; 0x09
        prescalarbits = 0b011;
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	89 83       	std	Y+1, r24	; 0x01
      }

      if (_timer == 1)
 5ea:	8a 85       	ldd	r24, Y+10	; 0x0a
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	01 f4       	brne	.+0      	; 0x5f0 <_Z4tonehjm+0x302>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 5f0:	81 e8       	ldi	r24, 0x81	; 129
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	21 e8       	ldi	r18, 0x81	; 129
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	32 2f       	mov	r19, r18
 5fe:	38 7f       	andi	r19, 0xF8	; 248
 600:	29 81       	ldd	r18, Y+1	; 0x01
 602:	23 2b       	or	r18, r19
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18

    }
    

    // Calculate the toggle count
    if (duration > 0)
 608:	8e 85       	ldd	r24, Y+14	; 0x0e
 60a:	9f 85       	ldd	r25, Y+15	; 0x0f
 60c:	a8 89       	ldd	r26, Y+16	; 0x10
 60e:	b9 89       	ldd	r27, Y+17	; 0x11
 610:	00 97       	sbiw	r24, 0x00	; 0
 612:	a1 05       	cpc	r26, r1
 614:	b1 05       	cpc	r27, r1
 616:	01 f0       	breq	.+0      	; 0x618 <_Z4tonehjm+0x32a>
    {
      toggle_count = 2 * frequency * duration / 1000;
 618:	8c 85       	ldd	r24, Y+12	; 0x0c
 61a:	9d 85       	ldd	r25, Y+13	; 0x0d
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	cc 01       	movw	r24, r24
 622:	a0 e0       	ldi	r26, 0x00	; 0
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	2e 85       	ldd	r18, Y+14	; 0x0e
 628:	3f 85       	ldd	r19, Y+15	; 0x0f
 62a:	48 89       	ldd	r20, Y+16	; 0x10
 62c:	59 89       	ldd	r21, Y+17	; 0x11
 62e:	bc 01       	movw	r22, r24
 630:	cd 01       	movw	r24, r26
 632:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 636:	dc 01       	movw	r26, r24
 638:	cb 01       	movw	r24, r22
 63a:	28 ee       	ldi	r18, 0xE8	; 232
 63c:	33 e0       	ldi	r19, 0x03	; 3
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	bc 01       	movw	r22, r24
 644:	cd 01       	movw	r24, r26
 646:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 64a:	da 01       	movw	r26, r20
 64c:	c9 01       	movw	r24, r18
 64e:	8a 83       	std	Y+2, r24	; 0x02
 650:	9b 83       	std	Y+3, r25	; 0x03
 652:	ac 83       	std	Y+4, r26	; 0x04
 654:	bd 83       	std	Y+5, r27	; 0x05
 656:	00 c0       	rjmp	.+0      	; 0x658 <_Z4tonehjm+0x36a>
    }
    else
    {
      toggle_count = -1;
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	af ef       	ldi	r26, 0xFF	; 255
 65e:	bf ef       	ldi	r27, 0xFF	; 255
 660:	8a 83       	std	Y+2, r24	; 0x02
 662:	9b 83       	std	Y+3, r25	; 0x03
 664:	ac 83       	std	Y+4, r26	; 0x04
 666:	bd 83       	std	Y+5, r27	; 0x05
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 668:	8a 85       	ldd	r24, Y+10	; 0x0a
 66a:	99 27       	eor	r25, r25
 66c:	87 fd       	sbrc	r24, 7
 66e:	90 95       	com	r25
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	91 05       	cpc	r25, r1
 674:	01 f0       	breq	.+0      	; 0x676 <_Z4tonehjm+0x388>
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	91 05       	cpc	r25, r1
 67a:	01 f0       	breq	.+0      	; 0x67c <_Z4tonehjm+0x38e>
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	01 f0       	breq	.+0      	; 0x680 <_Z4tonehjm+0x392>
 680:	00 c0       	rjmp	.+0      	; 0x682 <_Z4tonehjm+0x394>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
 682:	87 e4       	ldi	r24, 0x47	; 71
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	2e 81       	ldd	r18, Y+6	; 0x06
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
        timer0_toggle_count = toggle_count;
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	9b 81       	ldd	r25, Y+3	; 0x03
 690:	ac 81       	ldd	r26, Y+4	; 0x04
 692:	bd 81       	ldd	r27, Y+5	; 0x05
 694:	80 93 00 00 	sts	0x0000, r24
 698:	90 93 00 00 	sts	0x0000, r25
 69c:	a0 93 00 00 	sts	0x0000, r26
 6a0:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK0, OCIE0A, 1);
 6a4:	8e e6       	ldi	r24, 0x6E	; 110
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	2e e6       	ldi	r18, 0x6E	; 110
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	f9 01       	movw	r30, r18
 6ae:	20 81       	ld	r18, Z
 6b0:	22 60       	ori	r18, 0x02	; 2
 6b2:	fc 01       	movw	r30, r24
 6b4:	20 83       	st	Z, r18
        break;
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <_Z4tonehjm+0x3ca>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
 6b8:	88 e8       	ldi	r24, 0x88	; 136
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	2e 81       	ldd	r18, Y+6	; 0x06
 6be:	3f 81       	ldd	r19, Y+7	; 0x07
 6c0:	fc 01       	movw	r30, r24
 6c2:	31 83       	std	Z+1, r19	; 0x01
 6c4:	20 83       	st	Z, r18
        timer1_toggle_count = toggle_count;
 6c6:	8a 81       	ldd	r24, Y+2	; 0x02
 6c8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ca:	ac 81       	ldd	r26, Y+4	; 0x04
 6cc:	bd 81       	ldd	r27, Y+5	; 0x05
 6ce:	80 93 00 00 	sts	0x0000, r24
 6d2:	90 93 00 00 	sts	0x0000, r25
 6d6:	a0 93 00 00 	sts	0x0000, r26
 6da:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK1, OCIE1A, 1);
 6de:	8f e6       	ldi	r24, 0x6F	; 111
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	2f e6       	ldi	r18, 0x6F	; 111
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	f9 01       	movw	r30, r18
 6e8:	20 81       	ld	r18, Z
 6ea:	22 60       	ori	r18, 0x02	; 2
 6ec:	fc 01       	movw	r30, r24
 6ee:	20 83       	st	Z, r18
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <_Z4tonehjm+0x404>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
 6f2:	83 eb       	ldi	r24, 0xB3	; 179
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	2e 81       	ldd	r18, Y+6	; 0x06
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 83       	st	Z, r18
        timer2_toggle_count = toggle_count;
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	9b 81       	ldd	r25, Y+3	; 0x03
 700:	ac 81       	ldd	r26, Y+4	; 0x04
 702:	bd 81       	ldd	r27, Y+5	; 0x05
 704:	80 93 00 00 	sts	0x0000, r24
 708:	90 93 00 00 	sts	0x0000, r25
 70c:	a0 93 00 00 	sts	0x0000, r26
 710:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK2, OCIE2A, 1);
 714:	80 e7       	ldi	r24, 0x70	; 112
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	20 e7       	ldi	r18, 0x70	; 112
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	f9 01       	movw	r30, r18
 71e:	20 81       	ld	r18, Z
 720:	22 60       	ori	r18, 0x02	; 2
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
        break;
 726:	00 00       	nop
        break;
#endif

    }
  }
}
 728:	61 96       	adiw	r28, 0x11	; 17
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	cf 91       	pop	r28
 736:	df 91       	pop	r29
 738:	08 95       	ret

0000073a <_Z12disableTimerh>:

// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
 73a:	df 93       	push	r29
 73c:	cf 93       	push	r28
 73e:	0f 92       	push	r0
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	89 83       	std	Y+1, r24	; 0x01
  switch (_timer)
 746:	89 81       	ldd	r24, Y+1	; 0x01
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	91 05       	cpc	r25, r1
 750:	01 f0       	breq	.+0      	; 0x752 <_Z12disableTimerh+0x18>
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	91 05       	cpc	r25, r1
 756:	01 f0       	breq	.+0      	; 0x758 <_Z12disableTimerh+0x1e>
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	01 f4       	brne	.+0      	; 0x75c <_Z12disableTimerh+0x22>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 75c:	8e e6       	ldi	r24, 0x6E	; 110
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	fc 01       	movw	r30, r24
 762:	10 82       	st	Z, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
 764:	00 c0       	rjmp	.+0      	; 0x766 <_Z12disableTimerh+0x2c>

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 766:	8f e6       	ldi	r24, 0x6F	; 111
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	2f e6       	ldi	r18, 0x6F	; 111
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	f9 01       	movw	r30, r18
 770:	20 81       	ld	r18, Z
 772:	2d 7f       	andi	r18, 0xFD	; 253
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
      break;
 778:	00 c0       	rjmp	.+0      	; 0x77a <_Z12disableTimerh+0x40>
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 77a:	80 e7       	ldi	r24, 0x70	; 112
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	20 e7       	ldi	r18, 0x70	; 112
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	f9 01       	movw	r30, r18
 784:	20 81       	ld	r18, Z
 786:	2d 7f       	andi	r18, 0xFD	; 253
 788:	fc 01       	movw	r30, r24
 78a:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 78c:	80 eb       	ldi	r24, 0xB0	; 176
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 796:	81 eb       	ldi	r24, 0xB1	; 177
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	21 eb       	ldi	r18, 0xB1	; 177
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	f9 01       	movw	r30, r18
 7a0:	20 81       	ld	r18, Z
 7a2:	28 7f       	andi	r18, 0xF8	; 248
 7a4:	24 60       	ori	r18, 0x04	; 4
 7a6:	fc 01       	movw	r30, r24
 7a8:	20 83       	st	Z, r18
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 7aa:	83 eb       	ldi	r24, 0xB3	; 179
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	fc 01       	movw	r30, r24
 7b0:	10 82       	st	Z, r1
      #endif
      break;
 7b2:	00 00       	nop
    case 5:
      TIMSK5 = 0;
      break;
#endif
  }
}
 7b4:	0f 90       	pop	r0
 7b6:	cf 91       	pop	r28
 7b8:	df 91       	pop	r29
 7ba:	08 95       	ret

000007bc <_Z6noToneh>:


void noTone(uint8_t _pin)
{
 7bc:	1f 93       	push	r17
 7be:	df 93       	push	r29
 7c0:	cf 93       	push	r28
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
 7c6:	27 97       	sbiw	r28, 0x07	; 7
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	8f 83       	std	Y+7, r24	; 0x07
  int8_t _timer = -1;
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	89 83       	std	Y+1, r24	; 0x01
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 7d8:	1b 82       	std	Y+3, r1	; 0x03
 7da:	1a 82       	std	Y+2, r1	; 0x02
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <_Z6noToneh+0x22>
    if (tone_pins[i] == _pin) {
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	9b 81       	ldd	r25, Y+3	; 0x03
 7e2:	80 50       	subi	r24, 0x00	; 0
 7e4:	90 40       	sbci	r25, 0x00	; 0
 7e6:	fc 01       	movw	r30, r24
 7e8:	90 81       	ld	r25, Z
 7ea:	8f 81       	ldd	r24, Y+7	; 0x07
 7ec:	98 17       	cp	r25, r24
 7ee:	01 f4       	brne	.+0      	; 0x7f0 <_Z6noToneh+0x34>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	9b 81       	ldd	r25, Y+3	; 0x03
 7f4:	80 50       	subi	r24, 0x00	; 0
 7f6:	90 40       	sbci	r25, 0x00	; 0
 7f8:	9d 83       	std	Y+5, r25	; 0x05
 7fa:	8c 83       	std	Y+4, r24	; 0x04
 7fc:	8c 81       	ldd	r24, Y+4	; 0x04
 7fe:	9d 81       	ldd	r25, Y+5	; 0x05
 800:	fc 01       	movw	r30, r24
 802:	14 91       	lpm	r17, Z
 804:	1e 83       	std	Y+6, r17	; 0x06
 806:	8e 81       	ldd	r24, Y+6	; 0x06
 808:	89 83       	std	Y+1, r24	; 0x01
      tone_pins[i] = 255;
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	9b 81       	ldd	r25, Y+3	; 0x03
 80e:	80 50       	subi	r24, 0x00	; 0
 810:	90 40       	sbci	r25, 0x00	; 0
 812:	2f ef       	ldi	r18, 0xFF	; 255
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	9b 81       	ldd	r25, Y+3	; 0x03
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	9b 83       	std	Y+3, r25	; 0x03
 820:	8a 83       	std	Y+2, r24	; 0x02
 822:	21 e0       	ldi	r18, 0x01	; 1
 824:	8a 81       	ldd	r24, Y+2	; 0x02
 826:	9b 81       	ldd	r25, Y+3	; 0x03
 828:	18 16       	cp	r1, r24
 82a:	19 06       	cpc	r1, r25
 82c:	04 f4       	brge	.+0      	; 0x82e <_Z6noToneh+0x72>
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	22 23       	and	r18, r18
 832:	01 f4       	brne	.+0      	; 0x834 <_Z6noToneh+0x78>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>

  digitalWrite(_pin, 0);
 83a:	8f 81       	ldd	r24, Y+7	; 0x07
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
}
 842:	27 96       	adiw	r28, 0x07	; 7
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	cf 91       	pop	r28
 850:	df 91       	pop	r29
 852:	1f 91       	pop	r17
 854:	08 95       	ret

00000856 <__vector_7>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	2f 93       	push	r18
 862:	3f 93       	push	r19
 864:	4f 93       	push	r20
 866:	5f 93       	push	r21
 868:	6f 93       	push	r22
 86a:	7f 93       	push	r23
 86c:	8f 93       	push	r24
 86e:	9f 93       	push	r25
 870:	af 93       	push	r26
 872:	bf 93       	push	r27
 874:	ef 93       	push	r30
 876:	ff 93       	push	r31
 878:	df 93       	push	r29
 87a:	cf 93       	push	r28
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62

  if (timer2_toggle_count != 0)
 880:	80 91 00 00 	lds	r24, 0x0000
 884:	90 91 00 00 	lds	r25, 0x0000
 888:	a0 91 00 00 	lds	r26, 0x0000
 88c:	b0 91 00 00 	lds	r27, 0x0000
 890:	21 e0       	ldi	r18, 0x01	; 1
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	a1 05       	cpc	r26, r1
 896:	b1 05       	cpc	r27, r1
 898:	01 f4       	brne	.+0      	; 0x89a <__vector_7+0x44>
 89a:	20 e0       	ldi	r18, 0x00	; 0
 89c:	22 23       	and	r18, r18
 89e:	01 f0       	breq	.+0      	; 0x8a0 <__vector_7+0x4a>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 8a0:	80 91 00 00 	lds	r24, 0x0000
 8a4:	90 91 00 00 	lds	r25, 0x0000
 8a8:	20 91 00 00 	lds	r18, 0x0000
 8ac:	30 91 00 00 	lds	r19, 0x0000
 8b0:	f9 01       	movw	r30, r18
 8b2:	30 81       	ld	r19, Z
 8b4:	20 91 00 00 	lds	r18, 0x0000
 8b8:	23 27       	eor	r18, r19
 8ba:	fc 01       	movw	r30, r24
 8bc:	20 83       	st	Z, r18

    if (timer2_toggle_count > 0)
 8be:	80 91 00 00 	lds	r24, 0x0000
 8c2:	90 91 00 00 	lds	r25, 0x0000
 8c6:	a0 91 00 00 	lds	r26, 0x0000
 8ca:	b0 91 00 00 	lds	r27, 0x0000
 8ce:	21 e0       	ldi	r18, 0x01	; 1
 8d0:	18 16       	cp	r1, r24
 8d2:	19 06       	cpc	r1, r25
 8d4:	1a 06       	cpc	r1, r26
 8d6:	1b 06       	cpc	r1, r27
 8d8:	04 f0       	brlt	.+0      	; 0x8da <__vector_7+0x84>
 8da:	20 e0       	ldi	r18, 0x00	; 0
 8dc:	22 23       	and	r18, r18
 8de:	01 f0       	breq	.+0      	; 0x8e0 <__vector_7+0x8a>
      timer2_toggle_count--;
 8e0:	80 91 00 00 	lds	r24, 0x0000
 8e4:	90 91 00 00 	lds	r25, 0x0000
 8e8:	a0 91 00 00 	lds	r26, 0x0000
 8ec:	b0 91 00 00 	lds	r27, 0x0000
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	a1 09       	sbc	r26, r1
 8f4:	b1 09       	sbc	r27, r1
 8f6:	80 93 00 00 	sts	0x0000, r24
 8fa:	90 93 00 00 	sts	0x0000, r25
 8fe:	a0 93 00 00 	sts	0x0000, r26
 902:	b0 93 00 00 	sts	0x0000, r27
 906:	00 c0       	rjmp	.+0      	; 0x908 <__vector_7+0xb2>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 908:	80 91 00 00 	lds	r24, 0x0000
 90c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 910:	00 c0       	rjmp	.+0      	; 0x912 <__vector_7+0xbc>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;

    if (timer2_toggle_count > 0)
      timer2_toggle_count--;
 912:	00 00       	nop
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 914:	cf 91       	pop	r28
 916:	df 91       	pop	r29
 918:	ff 91       	pop	r31
 91a:	ef 91       	pop	r30
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	7f 91       	pop	r23
 926:	6f 91       	pop	r22
 928:	5f 91       	pop	r21
 92a:	4f 91       	pop	r20
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000043  2**0
                  ALLOC
  3 .stab         00000570  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cf1  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000000  00000000  00000237  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00000238  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d0c  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <attachInterrupt>:
#include "wiring_private.h"

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <attachInterrupt+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <attachInterrupt+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7b 83       	std	Y+3, r23	; 0x03
  12:	6a 83       	std	Y+2, r22	; 0x02
  14:	5d 83       	std	Y+5, r21	; 0x05
  16:	4c 83       	std	Y+4, r20	; 0x04
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  18:	89 81       	ldd	r24, Y+1	; 0x01
  1a:	82 30       	cpi	r24, 0x02	; 2
  1c:	00 f0       	brcs	.+0      	; 0x1e <attachInterrupt+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <attachInterrupt+0x20>
    intFunc[interruptNum] = userFunc;
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	88 2f       	mov	r24, r24
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	88 0f       	add	r24, r24
  28:	99 1f       	adc	r25, r25
  2a:	80 50       	subi	r24, 0x00	; 0
  2c:	90 40       	sbci	r25, 0x00	; 0
  2e:	2a 81       	ldd	r18, Y+2	; 0x02
  30:	3b 81       	ldd	r19, Y+3	; 0x03
  32:	fc 01       	movw	r30, r24
  34:	31 83       	std	Z+1, r19	; 0x01
  36:	20 83       	st	Z, r18
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  38:	89 81       	ldd	r24, Y+1	; 0x01
  3a:	88 2f       	mov	r24, r24
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	00 97       	sbiw	r24, 0x00	; 0
  40:	01 f0       	breq	.+0      	; 0x42 <attachInterrupt+0x42>
  42:	81 30       	cpi	r24, 0x01	; 1
  44:	91 05       	cpc	r25, r1
  46:	01 f0       	breq	.+0      	; 0x48 <attachInterrupt+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <attachInterrupt+0x4a>
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  4a:	89 e6       	ldi	r24, 0x69	; 105
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	29 e6       	ldi	r18, 0x69	; 105
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	f9 01       	movw	r30, r18
  54:	20 81       	ld	r18, Z
  56:	32 2f       	mov	r19, r18
  58:	3c 7f       	andi	r19, 0xFC	; 252
  5a:	2c 81       	ldd	r18, Y+4	; 0x04
  5c:	23 2b       	or	r18, r19
  5e:	fc 01       	movw	r30, r24
  60:	20 83       	st	Z, r18
      EIMSK |= (1 << INT0);
  62:	8d e3       	ldi	r24, 0x3D	; 61
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	2d e3       	ldi	r18, 0x3D	; 61
  68:	30 e0       	ldi	r19, 0x00	; 0
  6a:	f9 01       	movw	r30, r18
  6c:	20 81       	ld	r18, Z
  6e:	21 60       	ori	r18, 0x01	; 1
  70:	fc 01       	movw	r30, r24
  72:	20 83       	st	Z, r18
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
  74:	00 c0       	rjmp	.+0      	; 0x76 <attachInterrupt+0x76>

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
  76:	89 e6       	ldi	r24, 0x69	; 105
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	29 e6       	ldi	r18, 0x69	; 105
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	f9 01       	movw	r30, r18
  80:	20 81       	ld	r18, Z
  82:	42 2f       	mov	r20, r18
  84:	43 7f       	andi	r20, 0xF3	; 243
  86:	2c 81       	ldd	r18, Y+4	; 0x04
  88:	3d 81       	ldd	r19, Y+5	; 0x05
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	22 0f       	add	r18, r18
  90:	33 1f       	adc	r19, r19
  92:	24 2b       	or	r18, r20
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
      EIMSK |= (1 << INT1);
  98:	8d e3       	ldi	r24, 0x3D	; 61
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2d e3       	ldi	r18, 0x3D	; 61
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	22 60       	ori	r18, 0x02	; 2
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
      MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
      GIMSK |= (1 << INT1);
    #else
      #warning attachInterrupt may need some more work for this cpu (case 1)
    #endif
      break;
  aa:	00 00       	nop
#endif
    }
  }
}
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <detachInterrupt>:

void detachInterrupt(uint8_t interruptNum) {
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	0f 92       	push	r0
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	00 f4       	brcc	.+0      	; 0xce <detachInterrupt+0x12>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	01 f0       	breq	.+0      	; 0xd8 <detachInterrupt+0x1c>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	01 f0       	breq	.+0      	; 0xde <detachInterrupt+0x22>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <detachInterrupt+0x24>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
  e0:	8d e3       	ldi	r24, 0x3D	; 61
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2d e3       	ldi	r18, 0x3D	; 61
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	2e 7f       	andi	r18, 0xFE	; 254
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <detachInterrupt+0x38>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
  f4:	8d e3       	ldi	r24, 0x3D	; 61
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2d e3       	ldi	r18, 0x3D	; 61
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	2d 7f       	andi	r18, 0xFD	; 253
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
    #elif defined(GIMSK) && defined(INT1)
      GIMSK &= ~(1 << INT1);
    #else
      #warning detachInterrupt may need some more work for this cpu (case 1)
    #endif
      break;
 106:	00 00       	nop
#endif
    }
      
    intFunc[interruptNum] = 0;
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	80 50       	subi	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	11 82       	std	Z+1, r1	; 0x01
 11a:	10 82       	st	Z, r1
  }
}
 11c:	0f 90       	pop	r0
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
 14e:	80 91 00 00 	lds	r24, 0x0000
 152:	90 91 00 00 	lds	r25, 0x0000
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	01 f0       	breq	.+0      	; 0x15a <__vector_1+0x36>
    intFunc[EXTERNAL_INT_0]();
 15a:	80 91 00 00 	lds	r24, 0x0000
 15e:	90 91 00 00 	lds	r25, 0x0000
 162:	fc 01       	movw	r30, r24
 164:	09 95       	icall
}
 166:	cf 91       	pop	r28
 168:	df 91       	pop	r29
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_2>:

SIGNAL(INT1_vect) {
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
 1b6:	80 91 00 00 	lds	r24, 0x0000
 1ba:	90 91 00 00 	lds	r25, 0x0000
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	01 f0       	breq	.+0      	; 0x1c2 <__vector_2+0x36>
    intFunc[EXTERNAL_INT_1]();
 1c2:	80 91 00 00 	lds	r24, 0x0000
 1c6:	90 91 00 00 	lds	r25, 0x0000
 1ca:	fc 01       	movw	r30, r24
 1cc:	09 95       	icall
}
 1ce:	cf 91       	pop	r28
 1d0:	df 91       	pop	r29
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002b2  2**0
                  ALLOC
  3 .stab         000003d8  00000000  00000000  000002b4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000005e9  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_Z10randomSeedj>:
extern "C" {
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z10randomSeedj+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
  if (seed != 0) {
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_Z10randomSeedj+0x16>
    srandom(seed);
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
  1a:	cc 01       	movw	r24, r24
  1c:	a0 e0       	ldi	r26, 0x00	; 0
  1e:	b0 e0       	ldi	r27, 0x00	; 0
  20:	bc 01       	movw	r22, r24
  22:	cd 01       	movw	r24, r26
  24:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
  }
}
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	cf 91       	pop	r28
  2e:	df 91       	pop	r29
  30:	08 95       	ret

00000032 <_Z6randoml>:

long random(long howbig)
{
  32:	df 93       	push	r29
  34:	cf 93       	push	r28
  36:	00 d0       	rcall	.+0      	; 0x38 <_Z6randoml+0x6>
  38:	00 d0       	rcall	.+0      	; 0x3a <_Z6randoml+0x8>
  3a:	cd b7       	in	r28, 0x3d	; 61
  3c:	de b7       	in	r29, 0x3e	; 62
  3e:	69 83       	std	Y+1, r22	; 0x01
  40:	7a 83       	std	Y+2, r23	; 0x02
  42:	8b 83       	std	Y+3, r24	; 0x03
  44:	9c 83       	std	Y+4, r25	; 0x04
  if (howbig == 0) {
  46:	89 81       	ldd	r24, Y+1	; 0x01
  48:	9a 81       	ldd	r25, Y+2	; 0x02
  4a:	ab 81       	ldd	r26, Y+3	; 0x03
  4c:	bc 81       	ldd	r27, Y+4	; 0x04
  4e:	00 97       	sbiw	r24, 0x00	; 0
  50:	a1 05       	cpc	r26, r1
  52:	b1 05       	cpc	r27, r1
  54:	01 f4       	brne	.+0      	; 0x56 <_Z6randoml+0x24>
    return 0;
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	a0 e0       	ldi	r26, 0x00	; 0
  5c:	b0 e0       	ldi	r27, 0x00	; 0
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_Z6randoml+0x2e>
  }
  return random() % howbig;
  60:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
  64:	dc 01       	movw	r26, r24
  66:	cb 01       	movw	r24, r22
  68:	29 81       	ldd	r18, Y+1	; 0x01
  6a:	3a 81       	ldd	r19, Y+2	; 0x02
  6c:	4b 81       	ldd	r20, Y+3	; 0x03
  6e:	5c 81       	ldd	r21, Y+4	; 0x04
  70:	bc 01       	movw	r22, r24
  72:	cd 01       	movw	r24, r26
  74:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
  78:	dc 01       	movw	r26, r24
  7a:	cb 01       	movw	r24, r22
}
  7c:	bc 01       	movw	r22, r24
  7e:	cd 01       	movw	r24, r26
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	0f 90       	pop	r0
  86:	0f 90       	pop	r0
  88:	cf 91       	pop	r28
  8a:	df 91       	pop	r29
  8c:	08 95       	ret

0000008e <_Z6randomll>:

long random(long howsmall, long howbig)
{
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2c 97       	sbiw	r28, 0x0c	; 12
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	6d 83       	std	Y+5, r22	; 0x05
  ac:	7e 83       	std	Y+6, r23	; 0x06
  ae:	8f 83       	std	Y+7, r24	; 0x07
  b0:	98 87       	std	Y+8, r25	; 0x08
  b2:	29 87       	std	Y+9, r18	; 0x09
  b4:	3a 87       	std	Y+10, r19	; 0x0a
  b6:	4b 87       	std	Y+11, r20	; 0x0b
  b8:	5c 87       	std	Y+12, r21	; 0x0c
  if (howsmall >= howbig) {
  ba:	2d 81       	ldd	r18, Y+5	; 0x05
  bc:	3e 81       	ldd	r19, Y+6	; 0x06
  be:	4f 81       	ldd	r20, Y+7	; 0x07
  c0:	58 85       	ldd	r21, Y+8	; 0x08
  c2:	89 85       	ldd	r24, Y+9	; 0x09
  c4:	9a 85       	ldd	r25, Y+10	; 0x0a
  c6:	ab 85       	ldd	r26, Y+11	; 0x0b
  c8:	bc 85       	ldd	r27, Y+12	; 0x0c
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	4a 07       	cpc	r20, r26
  d0:	5b 07       	cpc	r21, r27
  d2:	04 f0       	brlt	.+0      	; 0xd4 <_Z6randomll+0x46>
    return howsmall;
  d4:	8d 81       	ldd	r24, Y+5	; 0x05
  d6:	9e 81       	ldd	r25, Y+6	; 0x06
  d8:	af 81       	ldd	r26, Y+7	; 0x07
  da:	b8 85       	ldd	r27, Y+8	; 0x08
  dc:	00 c0       	rjmp	.+0      	; 0xde <_Z6randomll+0x50>
  }
  long diff = howbig - howsmall;
  de:	29 85       	ldd	r18, Y+9	; 0x09
  e0:	3a 85       	ldd	r19, Y+10	; 0x0a
  e2:	4b 85       	ldd	r20, Y+11	; 0x0b
  e4:	5c 85       	ldd	r21, Y+12	; 0x0c
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	9e 81       	ldd	r25, Y+6	; 0x06
  ea:	af 81       	ldd	r26, Y+7	; 0x07
  ec:	b8 85       	ldd	r27, Y+8	; 0x08
  ee:	79 01       	movw	r14, r18
  f0:	8a 01       	movw	r16, r20
  f2:	e8 1a       	sub	r14, r24
  f4:	f9 0a       	sbc	r15, r25
  f6:	0a 0b       	sbc	r16, r26
  f8:	1b 0b       	sbc	r17, r27
  fa:	d8 01       	movw	r26, r16
  fc:	c7 01       	movw	r24, r14
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	9a 83       	std	Y+2, r25	; 0x02
 102:	ab 83       	std	Y+3, r26	; 0x03
 104:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	ab 81       	ldd	r26, Y+3	; 0x03
 10c:	bc 81       	ldd	r27, Y+4	; 0x04
 10e:	bc 01       	movw	r22, r24
 110:	cd 01       	movw	r24, r26
 112:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
 116:	9b 01       	movw	r18, r22
 118:	ac 01       	movw	r20, r24
 11a:	8d 81       	ldd	r24, Y+5	; 0x05
 11c:	9e 81       	ldd	r25, Y+6	; 0x06
 11e:	af 81       	ldd	r26, Y+7	; 0x07
 120:	b8 85       	ldd	r27, Y+8	; 0x08
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	a4 1f       	adc	r26, r20
 128:	b5 1f       	adc	r27, r21
}
 12a:	bc 01       	movw	r22, r24
 12c:	cd 01       	movw	r24, r26
 12e:	2c 96       	adiw	r28, 0x0c	; 12
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	ff 90       	pop	r15
 144:	ef 90       	pop	r14
 146:	08 95       	ret

00000148 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 148:	af 92       	push	r10
 14a:	bf 92       	push	r11
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	60 97       	sbiw	r28, 0x10	; 16
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	69 83       	std	Y+1, r22	; 0x01
 16e:	7a 83       	std	Y+2, r23	; 0x02
 170:	8b 83       	std	Y+3, r24	; 0x03
 172:	9c 83       	std	Y+4, r25	; 0x04
 174:	2d 83       	std	Y+5, r18	; 0x05
 176:	3e 83       	std	Y+6, r19	; 0x06
 178:	4f 83       	std	Y+7, r20	; 0x07
 17a:	58 87       	std	Y+8, r21	; 0x08
 17c:	e9 86       	std	Y+9, r14	; 0x09
 17e:	fa 86       	std	Y+10, r15	; 0x0a
 180:	0b 87       	std	Y+11, r16	; 0x0b
 182:	1c 87       	std	Y+12, r17	; 0x0c
 184:	ad 86       	std	Y+13, r10	; 0x0d
 186:	be 86       	std	Y+14, r11	; 0x0e
 188:	cf 86       	std	Y+15, r12	; 0x0f
 18a:	d8 8a       	std	Y+16, r13	; 0x10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 18c:	29 81       	ldd	r18, Y+1	; 0x01
 18e:	3a 81       	ldd	r19, Y+2	; 0x02
 190:	4b 81       	ldd	r20, Y+3	; 0x03
 192:	5c 81       	ldd	r21, Y+4	; 0x04
 194:	8d 81       	ldd	r24, Y+5	; 0x05
 196:	9e 81       	ldd	r25, Y+6	; 0x06
 198:	af 81       	ldd	r26, Y+7	; 0x07
 19a:	b8 85       	ldd	r27, Y+8	; 0x08
 19c:	59 01       	movw	r10, r18
 19e:	6a 01       	movw	r12, r20
 1a0:	a8 1a       	sub	r10, r24
 1a2:	b9 0a       	sbc	r11, r25
 1a4:	ca 0a       	sbc	r12, r26
 1a6:	db 0a       	sbc	r13, r27
 1a8:	d6 01       	movw	r26, r12
 1aa:	c5 01       	movw	r24, r10
 1ac:	ed 8c       	ldd	r14, Y+29	; 0x1d
 1ae:	fe 8c       	ldd	r15, Y+30	; 0x1e
 1b0:	0f 8d       	ldd	r16, Y+31	; 0x1f
 1b2:	18 a1       	ldd	r17, Y+32	; 0x20
 1b4:	2d 85       	ldd	r18, Y+13	; 0x0d
 1b6:	3e 85       	ldd	r19, Y+14	; 0x0e
 1b8:	4f 85       	ldd	r20, Y+15	; 0x0f
 1ba:	58 89       	ldd	r21, Y+16	; 0x10
 1bc:	57 01       	movw	r10, r14
 1be:	68 01       	movw	r12, r16
 1c0:	a2 1a       	sub	r10, r18
 1c2:	b3 0a       	sbc	r11, r19
 1c4:	c4 0a       	sbc	r12, r20
 1c6:	d5 0a       	sbc	r13, r21
 1c8:	a6 01       	movw	r20, r12
 1ca:	95 01       	movw	r18, r10
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	e9 84       	ldd	r14, Y+9	; 0x09
 1da:	fa 84       	ldd	r15, Y+10	; 0x0a
 1dc:	0b 85       	ldd	r16, Y+11	; 0x0b
 1de:	1c 85       	ldd	r17, Y+12	; 0x0c
 1e0:	2d 81       	ldd	r18, Y+5	; 0x05
 1e2:	3e 81       	ldd	r19, Y+6	; 0x06
 1e4:	4f 81       	ldd	r20, Y+7	; 0x07
 1e6:	58 85       	ldd	r21, Y+8	; 0x08
 1e8:	57 01       	movw	r10, r14
 1ea:	68 01       	movw	r12, r16
 1ec:	a2 1a       	sub	r10, r18
 1ee:	b3 0a       	sbc	r11, r19
 1f0:	c4 0a       	sbc	r12, r20
 1f2:	d5 0a       	sbc	r13, r21
 1f4:	a6 01       	movw	r20, r12
 1f6:	95 01       	movw	r18, r10
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
 200:	8d 85       	ldd	r24, Y+13	; 0x0d
 202:	9e 85       	ldd	r25, Y+14	; 0x0e
 204:	af 85       	ldd	r26, Y+15	; 0x0f
 206:	b8 89       	ldd	r27, Y+16	; 0x10
 208:	82 0f       	add	r24, r18
 20a:	93 1f       	adc	r25, r19
 20c:	a4 1f       	adc	r26, r20
 20e:	b5 1f       	adc	r27, r21
}
 210:	bc 01       	movw	r22, r24
 212:	cd 01       	movw	r24, r26
 214:	60 96       	adiw	r28, 0x10	; 16
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	cf 91       	pop	r28
 222:	df 91       	pop	r29
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	08 95       	ret

00000236 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
 236:	df 93       	push	r29
 238:	cf 93       	push	r28
 23a:	00 d0       	rcall	.+0      	; 0x23c <_Z8makeWordj+0x6>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	9a 83       	std	Y+2, r25	; 0x02
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	cf 91       	pop	r28
 24e:	df 91       	pop	r29
 250:	08 95       	ret

00000252 <_Z8makeWordhh>:
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	00 d0       	rcall	.+0      	; 0x258 <_Z8makeWordhh+0x6>
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	89 83       	std	Y+1, r24	; 0x01
 25e:	6a 83       	std	Y+2, r22	; 0x02
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	88 2f       	mov	r24, r24
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	38 2f       	mov	r19, r24
 268:	22 27       	eor	r18, r18
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	88 2f       	mov	r24, r24
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	82 2b       	or	r24, r18
 272:	93 2b       	or	r25, r19
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	cf 91       	pop	r28
 27a:	df 91       	pop	r29
 27c:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f72  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00001fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  00001fa7  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00001fa8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001c6a  00000000  00000000  000049fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
       0:	df 93       	push	r29
       2:	cf 93       	push	r28
       4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1EPKc+0x6>
       6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6StringC1EPKc+0x8>
       8:	cd b7       	in	r28, 0x3d	; 61
       a:	de b7       	in	r29, 0x3e	; 62
       c:	9a 83       	std	Y+2, r25	; 0x02
       e:	89 83       	std	Y+1, r24	; 0x01
      10:	7c 83       	std	Y+4, r23	; 0x04
      12:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
      14:	89 81       	ldd	r24, Y+1	; 0x01
      16:	9a 81       	ldd	r25, Y+2	; 0x02
      18:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	if (cstr) copy(cstr, strlen(cstr));
      1c:	8b 81       	ldd	r24, Y+3	; 0x03
      1e:	9c 81       	ldd	r25, Y+4	; 0x04
      20:	00 97       	sbiw	r24, 0x00	; 0
      22:	01 f0       	breq	.+0      	; 0x24 <_ZN6StringC1EPKc+0x24>
      24:	8b 81       	ldd	r24, Y+3	; 0x03
      26:	9c 81       	ldd	r25, Y+4	; 0x04
      28:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
      2c:	9c 01       	movw	r18, r24
      2e:	89 81       	ldd	r24, Y+1	; 0x01
      30:	9a 81       	ldd	r25, Y+2	; 0x02
      32:	4b 81       	ldd	r20, Y+3	; 0x03
      34:	5c 81       	ldd	r21, Y+4	; 0x04
      36:	ba 01       	movw	r22, r20
      38:	a9 01       	movw	r20, r18
      3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
      3e:	0f 90       	pop	r0
      40:	0f 90       	pop	r0
      42:	0f 90       	pop	r0
      44:	0f 90       	pop	r0
      46:	cf 91       	pop	r28
      48:	df 91       	pop	r29
      4a:	08 95       	ret

0000004c <_ZN6StringC1ERKS_>:

String::String(const String &value)
      4c:	df 93       	push	r29
      4e:	cf 93       	push	r28
      50:	00 d0       	rcall	.+0      	; 0x52 <_ZN6StringC1ERKS_+0x6>
      52:	00 d0       	rcall	.+0      	; 0x54 <_ZN6StringC1ERKS_+0x8>
      54:	cd b7       	in	r28, 0x3d	; 61
      56:	de b7       	in	r29, 0x3e	; 62
      58:	9a 83       	std	Y+2, r25	; 0x02
      5a:	89 83       	std	Y+1, r24	; 0x01
      5c:	7c 83       	std	Y+4, r23	; 0x04
      5e:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
      60:	89 81       	ldd	r24, Y+1	; 0x01
      62:	9a 81       	ldd	r25, Y+2	; 0x02
      64:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	*this = value;
      68:	89 81       	ldd	r24, Y+1	; 0x01
      6a:	9a 81       	ldd	r25, Y+2	; 0x02
      6c:	2b 81       	ldd	r18, Y+3	; 0x03
      6e:	3c 81       	ldd	r19, Y+4	; 0x04
      70:	b9 01       	movw	r22, r18
      72:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
      76:	0f 90       	pop	r0
      78:	0f 90       	pop	r0
      7a:	0f 90       	pop	r0
      7c:	0f 90       	pop	r0
      7e:	cf 91       	pop	r28
      80:	df 91       	pop	r29
      82:	08 95       	ret

00000084 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
      84:	df 93       	push	r29
      86:	cf 93       	push	r28
      88:	00 d0       	rcall	.+0      	; 0x8a <_ZN6StringC1Ec+0x6>
      8a:	00 d0       	rcall	.+0      	; 0x8c <_ZN6StringC1Ec+0x8>
      8c:	0f 92       	push	r0
      8e:	cd b7       	in	r28, 0x3d	; 61
      90:	de b7       	in	r29, 0x3e	; 62
      92:	9c 83       	std	Y+4, r25	; 0x04
      94:	8b 83       	std	Y+3, r24	; 0x03
      96:	6d 83       	std	Y+5, r22	; 0x05
{
	init();
      98:	8b 81       	ldd	r24, Y+3	; 0x03
      9a:	9c 81       	ldd	r25, Y+4	; 0x04
      9c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	char buf[2];
	buf[0] = c;
      a0:	8d 81       	ldd	r24, Y+5	; 0x05
      a2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
      a4:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
      a6:	8b 81       	ldd	r24, Y+3	; 0x03
      a8:	9c 81       	ldd	r25, Y+4	; 0x04
      aa:	9e 01       	movw	r18, r28
      ac:	2f 5f       	subi	r18, 0xFF	; 255
      ae:	3f 4f       	sbci	r19, 0xFF	; 255
      b0:	b9 01       	movw	r22, r18
      b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
      b6:	0f 90       	pop	r0
      b8:	0f 90       	pop	r0
      ba:	0f 90       	pop	r0
      bc:	0f 90       	pop	r0
      be:	0f 90       	pop	r0
      c0:	cf 91       	pop	r28
      c2:	df 91       	pop	r29
      c4:	08 95       	ret

000000c6 <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
      c6:	df 93       	push	r29
      c8:	cf 93       	push	r28
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	2d 97       	sbiw	r28, 0x0d	; 13
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	f8 94       	cli
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	cd bf       	out	0x3d, r28	; 61
      da:	9b 87       	std	Y+11, r25	; 0x0b
      dc:	8a 87       	std	Y+10, r24	; 0x0a
      de:	6c 87       	std	Y+12, r22	; 0x0c
      e0:	4d 87       	std	Y+13, r20	; 0x0d
{
	init();
      e2:	8a 85       	ldd	r24, Y+10	; 0x0a
      e4:	9b 85       	ldd	r25, Y+11	; 0x0b
      e6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	char buf[9];
	utoa(value, buf, base);
      ea:	8c 85       	ldd	r24, Y+12	; 0x0c
      ec:	88 2f       	mov	r24, r24
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	2d 85       	ldd	r18, Y+13	; 0x0d
      f2:	22 2f       	mov	r18, r18
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	ae 01       	movw	r20, r28
      f8:	4f 5f       	subi	r20, 0xFF	; 255
      fa:	5f 4f       	sbci	r21, 0xFF	; 255
      fc:	ba 01       	movw	r22, r20
      fe:	a9 01       	movw	r20, r18
     100:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	*this = buf;
     104:	8a 85       	ldd	r24, Y+10	; 0x0a
     106:	9b 85       	ldd	r25, Y+11	; 0x0b
     108:	9e 01       	movw	r18, r28
     10a:	2f 5f       	subi	r18, 0xFF	; 255
     10c:	3f 4f       	sbci	r19, 0xFF	; 255
     10e:	b9 01       	movw	r22, r18
     110:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     114:	2d 96       	adiw	r28, 0x0d	; 13
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	f8 94       	cli
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	cf 91       	pop	r28
     122:	df 91       	pop	r29
     124:	08 95       	ret

00000126 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
     126:	df 93       	push	r29
     128:	cf 93       	push	r28
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	67 97       	sbiw	r28, 0x17	; 23
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	f8 94       	cli
     134:	de bf       	out	0x3e, r29	; 62
     136:	0f be       	out	0x3f, r0	; 63
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	9c 8b       	std	Y+20, r25	; 0x14
     13c:	8b 8b       	std	Y+19, r24	; 0x13
     13e:	7e 8b       	std	Y+22, r23	; 0x16
     140:	6d 8b       	std	Y+21, r22	; 0x15
     142:	4f 8b       	std	Y+23, r20	; 0x17
{
	init();
     144:	8b 89       	ldd	r24, Y+19	; 0x13
     146:	9c 89       	ldd	r25, Y+20	; 0x14
     148:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	char buf[18];
	itoa(value, buf, base);
     14c:	8f 89       	ldd	r24, Y+23	; 0x17
     14e:	28 2f       	mov	r18, r24
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	8d 89       	ldd	r24, Y+21	; 0x15
     154:	9e 89       	ldd	r25, Y+22	; 0x16
     156:	ae 01       	movw	r20, r28
     158:	4f 5f       	subi	r20, 0xFF	; 255
     15a:	5f 4f       	sbci	r21, 0xFF	; 255
     15c:	ba 01       	movw	r22, r20
     15e:	a9 01       	movw	r20, r18
     160:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	*this = buf;
     164:	8b 89       	ldd	r24, Y+19	; 0x13
     166:	9c 89       	ldd	r25, Y+20	; 0x14
     168:	9e 01       	movw	r18, r28
     16a:	2f 5f       	subi	r18, 0xFF	; 255
     16c:	3f 4f       	sbci	r19, 0xFF	; 255
     16e:	b9 01       	movw	r22, r18
     170:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     174:	67 96       	adiw	r28, 0x17	; 23
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	cf 91       	pop	r28
     182:	df 91       	pop	r29
     184:	08 95       	ret

00000186 <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	66 97       	sbiw	r28, 0x16	; 22
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
     19a:	9b 8b       	std	Y+19, r25	; 0x13
     19c:	8a 8b       	std	Y+18, r24	; 0x12
     19e:	7d 8b       	std	Y+21, r23	; 0x15
     1a0:	6c 8b       	std	Y+20, r22	; 0x14
     1a2:	4e 8b       	std	Y+22, r20	; 0x16
{
	init();
     1a4:	8a 89       	ldd	r24, Y+18	; 0x12
     1a6:	9b 89       	ldd	r25, Y+19	; 0x13
     1a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	char buf[17];
	utoa(value, buf, base);
     1ac:	8e 89       	ldd	r24, Y+22	; 0x16
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	8c 89       	ldd	r24, Y+20	; 0x14
     1b4:	9d 89       	ldd	r25, Y+21	; 0x15
     1b6:	ae 01       	movw	r20, r28
     1b8:	4f 5f       	subi	r20, 0xFF	; 255
     1ba:	5f 4f       	sbci	r21, 0xFF	; 255
     1bc:	ba 01       	movw	r22, r20
     1be:	a9 01       	movw	r20, r18
     1c0:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	*this = buf;
     1c4:	8a 89       	ldd	r24, Y+18	; 0x12
     1c6:	9b 89       	ldd	r25, Y+19	; 0x13
     1c8:	9e 01       	movw	r18, r28
     1ca:	2f 5f       	subi	r18, 0xFF	; 255
     1cc:	3f 4f       	sbci	r19, 0xFF	; 255
     1ce:	b9 01       	movw	r22, r18
     1d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     1d4:	66 96       	adiw	r28, 0x16	; 22
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	cf 91       	pop	r28
     1e2:	df 91       	pop	r29
     1e4:	08 95       	ret

000001e6 <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	a9 97       	sbiw	r28, 0x29	; 41
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	9c a3       	std	Y+36, r25	; 0x24
     1fc:	8b a3       	std	Y+35, r24	; 0x23
     1fe:	4d a3       	std	Y+37, r20	; 0x25
     200:	5e a3       	std	Y+38, r21	; 0x26
     202:	6f a3       	std	Y+39, r22	; 0x27
     204:	78 a7       	std	Y+40, r23	; 0x28
     206:	29 a7       	std	Y+41, r18	; 0x29
{
	init();
     208:	8b a1       	ldd	r24, Y+35	; 0x23
     20a:	9c a1       	ldd	r25, Y+36	; 0x24
     20c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	char buf[34];
	ltoa(value, buf, base);
     210:	89 a5       	ldd	r24, Y+41	; 0x29
     212:	28 2f       	mov	r18, r24
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	8d a1       	ldd	r24, Y+37	; 0x25
     218:	9e a1       	ldd	r25, Y+38	; 0x26
     21a:	af a1       	ldd	r26, Y+39	; 0x27
     21c:	b8 a5       	ldd	r27, Y+40	; 0x28
     21e:	bc 01       	movw	r22, r24
     220:	cd 01       	movw	r24, r26
     222:	ae 01       	movw	r20, r28
     224:	4f 5f       	subi	r20, 0xFF	; 255
     226:	5f 4f       	sbci	r21, 0xFF	; 255
     228:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	*this = buf;
     22c:	8b a1       	ldd	r24, Y+35	; 0x23
     22e:	9c a1       	ldd	r25, Y+36	; 0x24
     230:	9e 01       	movw	r18, r28
     232:	2f 5f       	subi	r18, 0xFF	; 255
     234:	3f 4f       	sbci	r19, 0xFF	; 255
     236:	b9 01       	movw	r22, r18
     238:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     23c:	a9 96       	adiw	r28, 0x29	; 41
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	cf 91       	pop	r28
     24a:	df 91       	pop	r29
     24c:	08 95       	ret

0000024e <_ZN6StringC1Emh>:

String::String(unsigned long value, unsigned char base)
     24e:	df 93       	push	r29
     250:	cf 93       	push	r28
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	a8 97       	sbiw	r28, 0x28	; 40
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	9b a3       	std	Y+35, r25	; 0x23
     264:	8a a3       	std	Y+34, r24	; 0x22
     266:	4c a3       	std	Y+36, r20	; 0x24
     268:	5d a3       	std	Y+37, r21	; 0x25
     26a:	6e a3       	std	Y+38, r22	; 0x26
     26c:	7f a3       	std	Y+39, r23	; 0x27
     26e:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
     270:	8a a1       	ldd	r24, Y+34	; 0x22
     272:	9b a1       	ldd	r25, Y+35	; 0x23
     274:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	char buf[33];
	ultoa(value, buf, base);
     278:	88 a5       	ldd	r24, Y+40	; 0x28
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	8c a1       	ldd	r24, Y+36	; 0x24
     280:	9d a1       	ldd	r25, Y+37	; 0x25
     282:	ae a1       	ldd	r26, Y+38	; 0x26
     284:	bf a1       	ldd	r27, Y+39	; 0x27
     286:	bc 01       	movw	r22, r24
     288:	cd 01       	movw	r24, r26
     28a:	ae 01       	movw	r20, r28
     28c:	4f 5f       	subi	r20, 0xFF	; 255
     28e:	5f 4f       	sbci	r21, 0xFF	; 255
     290:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	*this = buf;
     294:	8a a1       	ldd	r24, Y+34	; 0x22
     296:	9b a1       	ldd	r25, Y+35	; 0x23
     298:	9e 01       	movw	r18, r28
     29a:	2f 5f       	subi	r18, 0xFF	; 255
     29c:	3f 4f       	sbci	r19, 0xFF	; 255
     29e:	b9 01       	movw	r22, r18
     2a0:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     2a4:	a8 96       	adiw	r28, 0x28	; 40
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <_ZN6StringD1Ev>:

String::~String()
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <_ZN6StringD1Ev+0x6>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	9a 83       	std	Y+2, r25	; 0x02
     2c2:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	9a 81       	ldd	r25, Y+2	; 0x02
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	91 81       	ldd	r25, Z+1	; 0x01
     2ce:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <_ZN6String4initEv>:
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <_ZN6String4initEv+0x6>
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	9a 83       	std	Y+2, r25	; 0x02
     2e8:	89 83       	std	Y+1, r24	; 0x01
	buffer = NULL;
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	fc 01       	movw	r30, r24
     2f0:	11 82       	std	Z+1, r1	; 0x01
     2f2:	10 82       	st	Z, r1
	capacity = 0;
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	fc 01       	movw	r30, r24
     2fa:	13 82       	std	Z+3, r1	; 0x03
     2fc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	9a 81       	ldd	r25, Y+2	; 0x02
     302:	fc 01       	movw	r30, r24
     304:	15 82       	std	Z+5, r1	; 0x05
     306:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	9a 81       	ldd	r25, Y+2	; 0x02
     30c:	fc 01       	movw	r30, r24
     30e:	16 82       	std	Z+6, r1	; 0x06
}
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	cf 91       	pop	r28
     316:	df 91       	pop	r29
     318:	08 95       	ret

0000031a <_ZN6String10invalidateEv>:

void String::invalidate(void)
{
     31a:	df 93       	push	r29
     31c:	cf 93       	push	r28
     31e:	00 d0       	rcall	.+0      	; 0x320 <_ZN6String10invalidateEv+0x6>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
	if (buffer) free(buffer);
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	fc 01       	movw	r30, r24
     32e:	80 81       	ld	r24, Z
     330:	91 81       	ldd	r25, Z+1	; 0x01
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	01 f0       	breq	.+0      	; 0x336 <_ZN6String10invalidateEv+0x1c>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	fc 01       	movw	r30, r24
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	buffer = NULL;
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	fc 01       	movw	r30, r24
     34a:	11 82       	std	Z+1, r1	; 0x01
     34c:	10 82       	st	Z, r1
	capacity = len = 0;
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	fc 01       	movw	r30, r24
     354:	15 82       	std	Z+5, r1	; 0x05
     356:	14 82       	std	Z+4, r1	; 0x04
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	fc 01       	movw	r30, r24
     35e:	24 81       	ldd	r18, Z+4	; 0x04
     360:	35 81       	ldd	r19, Z+5	; 0x05
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	fc 01       	movw	r30, r24
     368:	33 83       	std	Z+3, r19	; 0x03
     36a:	22 83       	std	Z+2, r18	; 0x02
}
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <_ZN6String7reserveEj>:

unsigned char String::reserve(unsigned int size)
{
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZN6String7reserveEj+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_ZN6String7reserveEj+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	7c 83       	std	Y+4, r23	; 0x04
     388:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer && capacity >= size) return 1;
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	fc 01       	movw	r30, r24
     390:	80 81       	ld	r24, Z
     392:	91 81       	ldd	r25, Z+1	; 0x01
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	01 f0       	breq	.+0      	; 0x398 <_ZN6String7reserveEj+0x22>
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	fc 01       	movw	r30, r24
     39e:	22 81       	ldd	r18, Z+2	; 0x02
     3a0:	33 81       	ldd	r19, Z+3	; 0x03
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	9c 81       	ldd	r25, Y+4	; 0x04
     3a6:	28 17       	cp	r18, r24
     3a8:	39 07       	cpc	r19, r25
     3aa:	00 f0       	brcs	.+0      	; 0x3ac <_ZN6String7reserveEj+0x36>
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <_ZN6String7reserveEj+0x3a>
	if (changeBuffer(size)) {
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	2b 81       	ldd	r18, Y+3	; 0x03
     3b6:	3c 81       	ldd	r19, Y+4	; 0x04
     3b8:	b9 01       	movw	r22, r18
     3ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     3be:	98 2f       	mov	r25, r24
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	99 23       	and	r25, r25
     3c4:	01 f4       	brne	.+0      	; 0x3c6 <_ZN6String7reserveEj+0x50>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	88 23       	and	r24, r24
     3ca:	01 f0       	breq	.+0      	; 0x3cc <_ZN6String7reserveEj+0x56>
		if (len == 0) buffer[0] = 0;
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	fc 01       	movw	r30, r24
     3d2:	84 81       	ldd	r24, Z+4	; 0x04
     3d4:	95 81       	ldd	r25, Z+5	; 0x05
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	01 f4       	brne	.+0      	; 0x3da <_ZN6String7reserveEj+0x64>
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	9a 81       	ldd	r25, Y+2	; 0x02
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	91 81       	ldd	r25, Z+1	; 0x01
     3e4:	fc 01       	movw	r30, r24
     3e6:	10 82       	st	Z, r1
		return 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <_ZN6String7reserveEj+0x76>
	}
	return 0;
     3ec:	80 e0       	ldi	r24, 0x00	; 0
}
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <_ZN6String12changeBufferEj>:

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	00 d0       	rcall	.+0      	; 0x402 <_ZN6String12changeBufferEj+0x6>
     402:	00 d0       	rcall	.+0      	; 0x404 <_ZN6String12changeBufferEj+0x8>
     404:	00 d0       	rcall	.+0      	; 0x406 <_ZN6String12changeBufferEj+0xa>
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	8b 83       	std	Y+3, r24	; 0x03
     40e:	7e 83       	std	Y+6, r23	; 0x06
     410:	6d 83       	std	Y+5, r22	; 0x05
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	fc 01       	movw	r30, r24
     418:	80 81       	ld	r24, Z
     41a:	91 81       	ldd	r25, Z+1	; 0x01
     41c:	2d 81       	ldd	r18, Y+5	; 0x05
     41e:	3e 81       	ldd	r19, Y+6	; 0x06
     420:	2f 5f       	subi	r18, 0xFF	; 255
     422:	3f 4f       	sbci	r19, 0xFF	; 255
     424:	b9 01       	movw	r22, r18
     426:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     42a:	9a 83       	std	Y+2, r25	; 0x02
     42c:	89 83       	std	Y+1, r24	; 0x01
	if (newbuffer) {
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	01 f0       	breq	.+0      	; 0x436 <_ZN6String12changeBufferEj+0x3a>
		buffer = newbuffer;
     436:	8b 81       	ldd	r24, Y+3	; 0x03
     438:	9c 81       	ldd	r25, Y+4	; 0x04
     43a:	29 81       	ldd	r18, Y+1	; 0x01
     43c:	3a 81       	ldd	r19, Y+2	; 0x02
     43e:	fc 01       	movw	r30, r24
     440:	31 83       	std	Z+1, r19	; 0x01
     442:	20 83       	st	Z, r18
		capacity = maxStrLen;
     444:	8b 81       	ldd	r24, Y+3	; 0x03
     446:	9c 81       	ldd	r25, Y+4	; 0x04
     448:	2d 81       	ldd	r18, Y+5	; 0x05
     44a:	3e 81       	ldd	r19, Y+6	; 0x06
     44c:	fc 01       	movw	r30, r24
     44e:	33 83       	std	Z+3, r19	; 0x03
     450:	22 83       	std	Z+2, r18	; 0x02
		return 1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	00 c0       	rjmp	.+0      	; 0x456 <_ZN6String12changeBufferEj+0x5a>
	}
	return 0;
     456:	80 e0       	ldi	r24, 0x00	; 0
}
     458:	26 96       	adiw	r28, 0x06	; 6
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	00 d0       	rcall	.+0      	; 0x470 <_ZN6String4copyEPKcj+0x6>
     470:	00 d0       	rcall	.+0      	; 0x472 <_ZN6String4copyEPKcj+0x8>
     472:	00 d0       	rcall	.+0      	; 0x474 <_ZN6String4copyEPKcj+0xa>
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	7c 83       	std	Y+4, r23	; 0x04
     47e:	6b 83       	std	Y+3, r22	; 0x03
     480:	5e 83       	std	Y+6, r21	; 0x06
     482:	4d 83       	std	Y+5, r20	; 0x05
	if (!reserve(length)) {
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	2d 81       	ldd	r18, Y+5	; 0x05
     48a:	3e 81       	ldd	r19, Y+6	; 0x06
     48c:	b9 01       	movw	r22, r18
     48e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     492:	98 2f       	mov	r25, r24
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	99 23       	and	r25, r25
     498:	01 f0       	breq	.+0      	; 0x49a <_ZN6String4copyEPKcj+0x30>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	88 23       	and	r24, r24
     49e:	01 f0       	breq	.+0      	; 0x4a0 <_ZN6String4copyEPKcj+0x36>
		invalidate();
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
		return *this;
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	9a 81       	ldd	r25, Y+2	; 0x02
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <_ZN6String4copyEPKcj+0x44>
	}
	len = length;
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	2d 81       	ldd	r18, Y+5	; 0x05
     4b4:	3e 81       	ldd	r19, Y+6	; 0x06
     4b6:	fc 01       	movw	r30, r24
     4b8:	35 83       	std	Z+5, r19	; 0x05
     4ba:	24 83       	std	Z+4, r18	; 0x04
	strcpy(buffer, cstr);
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	fc 01       	movw	r30, r24
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	2b 81       	ldd	r18, Y+3	; 0x03
     4c8:	3c 81       	ldd	r19, Y+4	; 0x04
     4ca:	b9 01       	movw	r22, r18
     4cc:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return *this;
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4d4:	26 96       	adiw	r28, 0x06	; 6
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	cf 91       	pop	r28
     4e2:	df 91       	pop	r29
     4e4:	08 95       	ret

000004e6 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     4e6:	df 93       	push	r29
     4e8:	cf 93       	push	r28
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <_ZN6StringaSERKS_+0x6>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <_ZN6StringaSERKS_+0x8>
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	7c 83       	std	Y+4, r23	; 0x04
     4f8:	6b 83       	std	Y+3, r22	; 0x03
	if (this == &rhs) return *this;
     4fa:	29 81       	ldd	r18, Y+1	; 0x01
     4fc:	3a 81       	ldd	r19, Y+2	; 0x02
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	9c 81       	ldd	r25, Y+4	; 0x04
     502:	28 17       	cp	r18, r24
     504:	39 07       	cpc	r19, r25
     506:	01 f4       	brne	.+0      	; 0x508 <_ZN6StringaSERKS_+0x22>
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	00 c0       	rjmp	.+0      	; 0x50e <_ZN6StringaSERKS_+0x28>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	fc 01       	movw	r30, r24
     514:	80 81       	ld	r24, Z
     516:	91 81       	ldd	r25, Z+1	; 0x01
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	01 f0       	breq	.+0      	; 0x51c <_ZN6StringaSERKS_+0x36>
     51c:	8b 81       	ldd	r24, Y+3	; 0x03
     51e:	9c 81       	ldd	r25, Y+4	; 0x04
     520:	fc 01       	movw	r30, r24
     522:	40 81       	ld	r20, Z
     524:	51 81       	ldd	r21, Z+1	; 0x01
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	fc 01       	movw	r30, r24
     52c:	24 81       	ldd	r18, Z+4	; 0x04
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	ba 01       	movw	r22, r20
     536:	a9 01       	movw	r20, r18
     538:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_ZN6StringaSERKS_+0x58>
	else invalidate();
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	
	return *this;
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
}
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	08 95       	ret

00000558 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     558:	df 93       	push	r29
     55a:	cf 93       	push	r28
     55c:	00 d0       	rcall	.+0      	; 0x55e <_ZN6StringaSEPKc+0x6>
     55e:	00 d0       	rcall	.+0      	; 0x560 <_ZN6StringaSEPKc+0x8>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	9a 83       	std	Y+2, r25	; 0x02
     566:	89 83       	std	Y+1, r24	; 0x01
     568:	7c 83       	std	Y+4, r23	; 0x04
     56a:	6b 83       	std	Y+3, r22	; 0x03
	if (cstr) copy(cstr, strlen(cstr));
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	9c 81       	ldd	r25, Y+4	; 0x04
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	01 f0       	breq	.+0      	; 0x574 <_ZN6StringaSEPKc+0x1c>
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	9c 81       	ldd	r25, Y+4	; 0x04
     578:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     57c:	9c 01       	movw	r18, r24
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	4b 81       	ldd	r20, Y+3	; 0x03
     584:	5c 81       	ldd	r21, Y+4	; 0x04
     586:	ba 01       	movw	r22, r20
     588:	a9 01       	movw	r20, r18
     58a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <_ZN6StringaSEPKc+0x38>
	else invalidate();
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	
	return *this;
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	08 95       	ret

000005aa <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
     5aa:	df 93       	push	r29
     5ac:	cf 93       	push	r28
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <_ZN6String6concatERKS_+0x6>
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <_ZN6String6concatERKS_+0x8>
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	89 83       	std	Y+1, r24	; 0x01
     5ba:	7c 83       	std	Y+4, r23	; 0x04
     5bc:	6b 83       	std	Y+3, r22	; 0x03
	return concat(s.buffer, s.len);
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	fc 01       	movw	r30, r24
     5c4:	40 81       	ld	r20, Z
     5c6:	51 81       	ldd	r21, Z+1	; 0x01
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	fc 01       	movw	r30, r24
     5ce:	24 81       	ldd	r18, Z+4	; 0x04
     5d0:	35 81       	ldd	r19, Z+5	; 0x05
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	ba 01       	movw	r22, r20
     5d8:	a9 01       	movw	r20, r18
     5da:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	08 95       	ret

000005ec <_ZN6String6concatEPKcj>:

unsigned char String::concat(const char *cstr, unsigned int length)
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	28 97       	sbiw	r28, 0x08	; 8
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	9c 83       	std	Y+4, r25	; 0x04
     602:	8b 83       	std	Y+3, r24	; 0x03
     604:	7e 83       	std	Y+6, r23	; 0x06
     606:	6d 83       	std	Y+5, r22	; 0x05
     608:	58 87       	std	Y+8, r21	; 0x08
     60a:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int newlen = len + length;
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	9c 81       	ldd	r25, Y+4	; 0x04
     610:	fc 01       	movw	r30, r24
     612:	24 81       	ldd	r18, Z+4	; 0x04
     614:	35 81       	ldd	r19, Z+5	; 0x05
     616:	8f 81       	ldd	r24, Y+7	; 0x07
     618:	98 85       	ldd	r25, Y+8	; 0x08
     61a:	82 0f       	add	r24, r18
     61c:	93 1f       	adc	r25, r19
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr) return 0;
     622:	8d 81       	ldd	r24, Y+5	; 0x05
     624:	9e 81       	ldd	r25, Y+6	; 0x06
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	01 f4       	brne	.+0      	; 0x62a <_ZN6String6concatEPKcj+0x3e>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	00 c0       	rjmp	.+0      	; 0x62e <_ZN6String6concatEPKcj+0x42>
	if (length == 0) return 1;
     62e:	8f 81       	ldd	r24, Y+7	; 0x07
     630:	98 85       	ldd	r25, Y+8	; 0x08
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	01 f4       	brne	.+0      	; 0x636 <_ZN6String6concatEPKcj+0x4a>
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	00 c0       	rjmp	.+0      	; 0x63a <_ZN6String6concatEPKcj+0x4e>
	if (!reserve(newlen)) return 0;
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	29 81       	ldd	r18, Y+1	; 0x01
     640:	3a 81       	ldd	r19, Y+2	; 0x02
     642:	b9 01       	movw	r22, r18
     644:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     648:	98 2f       	mov	r25, r24
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	99 23       	and	r25, r25
     64e:	01 f0       	breq	.+0      	; 0x650 <_ZN6String6concatEPKcj+0x64>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	88 23       	and	r24, r24
     654:	01 f0       	breq	.+0      	; 0x656 <_ZN6String6concatEPKcj+0x6a>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	00 c0       	rjmp	.+0      	; 0x65a <_ZN6String6concatEPKcj+0x6e>
	strcpy(buffer + len, cstr);
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	9c 81       	ldd	r25, Y+4	; 0x04
     65e:	fc 01       	movw	r30, r24
     660:	20 81       	ld	r18, Z
     662:	31 81       	ldd	r19, Z+1	; 0x01
     664:	8b 81       	ldd	r24, Y+3	; 0x03
     666:	9c 81       	ldd	r25, Y+4	; 0x04
     668:	fc 01       	movw	r30, r24
     66a:	84 81       	ldd	r24, Z+4	; 0x04
     66c:	95 81       	ldd	r25, Z+5	; 0x05
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
     672:	2d 81       	ldd	r18, Y+5	; 0x05
     674:	3e 81       	ldd	r19, Y+6	; 0x06
     676:	b9 01       	movw	r22, r18
     678:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	len = newlen;
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	29 81       	ldd	r18, Y+1	; 0x01
     682:	3a 81       	ldd	r19, Y+2	; 0x02
     684:	fc 01       	movw	r30, r24
     686:	35 83       	std	Z+5, r19	; 0x05
     688:	24 83       	std	Z+4, r18	; 0x04
	return 1;
     68a:	81 e0       	ldi	r24, 0x01	; 1
}
     68c:	28 96       	adiw	r28, 0x08	; 8
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <_ZN6String6concatEPKc+0x6>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <_ZN6String6concatEPKc+0x8>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	7c 83       	std	Y+4, r23	; 0x04
     6b0:	6b 83       	std	Y+3, r22	; 0x03
	if (!cstr) return 0;
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	01 f4       	brne	.+0      	; 0x6ba <_ZN6String6concatEPKc+0x1c>
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <_ZN6String6concatEPKc+0x20>
	return concat(cstr, strlen(cstr));
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     6c6:	9c 01       	movw	r18, r24
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	4b 81       	ldd	r20, Y+3	; 0x03
     6ce:	5c 81       	ldd	r21, Y+4	; 0x04
     6d0:	ba 01       	movw	r22, r20
     6d2:	a9 01       	movw	r20, r18
     6d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	08 95       	ret

000006e6 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <_ZN6String6concatEc+0x6>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <_ZN6String6concatEc+0x8>
     6ee:	0f 92       	push	r0
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	8b 83       	std	Y+3, r24	; 0x03
     6f8:	6d 83       	std	Y+5, r22	; 0x05
	char buf[2];
	buf[0] = c;
     6fa:	8d 81       	ldd	r24, Y+5	; 0x05
     6fc:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
     6fe:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	9e 01       	movw	r18, r28
     706:	2f 5f       	subi	r18, 0xFF	; 255
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	b9 01       	movw	r22, r18
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	27 97       	sbiw	r28, 0x07	; 7
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	9e 83       	std	Y+6, r25	; 0x06
     73a:	8d 83       	std	Y+5, r24	; 0x05
     73c:	6f 83       	std	Y+7, r22	; 0x07
	char buf[4];
	itoa(num, buf, 10);
     73e:	8f 81       	ldd	r24, Y+7	; 0x07
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	9e 01       	movw	r18, r28
     746:	2f 5f       	subi	r18, 0xFF	; 255
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	b9 01       	movw	r22, r18
     74c:	4a e0       	ldi	r20, 0x0A	; 10
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return concat(buf, strlen(buf));
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     75c:	9c 01       	movw	r18, r24
     75e:	8d 81       	ldd	r24, Y+5	; 0x05
     760:	9e 81       	ldd	r25, Y+6	; 0x06
     762:	ae 01       	movw	r20, r28
     764:	4f 5f       	subi	r20, 0xFF	; 255
     766:	5f 4f       	sbci	r21, 0xFF	; 255
     768:	ba 01       	movw	r22, r20
     76a:	a9 01       	movw	r20, r18
     76c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     770:	27 96       	adiw	r28, 0x07	; 7
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	08 95       	ret

00000782 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	2b 97       	sbiw	r28, 0x0b	; 11
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	99 87       	std	Y+9, r25	; 0x09
     798:	88 87       	std	Y+8, r24	; 0x08
     79a:	7b 87       	std	Y+11, r23	; 0x0b
     79c:	6a 87       	std	Y+10, r22	; 0x0a
	char buf[7];
	itoa(num, buf, 10);
     79e:	8a 85       	ldd	r24, Y+10	; 0x0a
     7a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a2:	9e 01       	movw	r18, r28
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	b9 01       	movw	r22, r18
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return concat(buf, strlen(buf));
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     7ba:	9c 01       	movw	r18, r24
     7bc:	88 85       	ldd	r24, Y+8	; 0x08
     7be:	99 85       	ldd	r25, Y+9	; 0x09
     7c0:	ae 01       	movw	r20, r28
     7c2:	4f 5f       	subi	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	ba 01       	movw	r22, r20
     7c8:	a9 01       	movw	r20, r18
     7ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     7ce:	2b 96       	adiw	r28, 0x0b	; 11
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	cf 91       	pop	r28
     7dc:	df 91       	pop	r29
     7de:	08 95       	ret

000007e0 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2a 97       	sbiw	r28, 0x0a	; 10
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	98 87       	std	Y+8, r25	; 0x08
     7f6:	8f 83       	std	Y+7, r24	; 0x07
     7f8:	7a 87       	std	Y+10, r23	; 0x0a
     7fa:	69 87       	std	Y+9, r22	; 0x09
	char buf[6];
	utoa(num, buf, 10);
     7fc:	89 85       	ldd	r24, Y+9	; 0x09
     7fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     800:	9e 01       	movw	r18, r28
     802:	2f 5f       	subi	r18, 0xFF	; 255
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	b9 01       	movw	r22, r18
     808:	4a e0       	ldi	r20, 0x0A	; 10
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return concat(buf, strlen(buf));
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     818:	9c 01       	movw	r18, r24
     81a:	8f 81       	ldd	r24, Y+7	; 0x07
     81c:	98 85       	ldd	r25, Y+8	; 0x08
     81e:	ae 01       	movw	r20, r28
     820:	4f 5f       	subi	r20, 0xFF	; 255
     822:	5f 4f       	sbci	r21, 0xFF	; 255
     824:	ba 01       	movw	r22, r20
     826:	a9 01       	movw	r20, r18
     828:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     82c:	2a 96       	adiw	r28, 0x0a	; 10
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	cf 91       	pop	r28
     83a:	df 91       	pop	r29
     83c:	08 95       	ret

0000083e <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	62 97       	sbiw	r28, 0x12	; 18
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	9e 87       	std	Y+14, r25	; 0x0e
     854:	8d 87       	std	Y+13, r24	; 0x0d
     856:	4f 87       	std	Y+15, r20	; 0x0f
     858:	58 8b       	std	Y+16, r21	; 0x10
     85a:	69 8b       	std	Y+17, r22	; 0x11
     85c:	7a 8b       	std	Y+18, r23	; 0x12
	char buf[12];
	ltoa(num, buf, 10);
     85e:	8f 85       	ldd	r24, Y+15	; 0x0f
     860:	98 89       	ldd	r25, Y+16	; 0x10
     862:	a9 89       	ldd	r26, Y+17	; 0x11
     864:	ba 89       	ldd	r27, Y+18	; 0x12
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	9e 01       	movw	r18, r28
     86c:	2f 5f       	subi	r18, 0xFF	; 255
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	a9 01       	movw	r20, r18
     872:	2a e0       	ldi	r18, 0x0A	; 10
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return concat(buf, strlen(buf));
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     882:	9c 01       	movw	r18, r24
     884:	8d 85       	ldd	r24, Y+13	; 0x0d
     886:	9e 85       	ldd	r25, Y+14	; 0x0e
     888:	ae 01       	movw	r20, r28
     88a:	4f 5f       	subi	r20, 0xFF	; 255
     88c:	5f 4f       	sbci	r21, 0xFF	; 255
     88e:	ba 01       	movw	r22, r20
     890:	a9 01       	movw	r20, r18
     892:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     896:	62 96       	adiw	r28, 0x12	; 18
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	cf 91       	pop	r28
     8a4:	df 91       	pop	r29
     8a6:	08 95       	ret

000008a8 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
     8a8:	df 93       	push	r29
     8aa:	cf 93       	push	r28
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	9d 87       	std	Y+13, r25	; 0x0d
     8be:	8c 87       	std	Y+12, r24	; 0x0c
     8c0:	4e 87       	std	Y+14, r20	; 0x0e
     8c2:	5f 87       	std	Y+15, r21	; 0x0f
     8c4:	68 8b       	std	Y+16, r22	; 0x10
     8c6:	79 8b       	std	Y+17, r23	; 0x11
	char buf[11];
	ultoa(num, buf, 10);
     8c8:	8e 85       	ldd	r24, Y+14	; 0x0e
     8ca:	9f 85       	ldd	r25, Y+15	; 0x0f
     8cc:	a8 89       	ldd	r26, Y+16	; 0x10
     8ce:	b9 89       	ldd	r27, Y+17	; 0x11
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	9e 01       	movw	r18, r28
     8d6:	2f 5f       	subi	r18, 0xFF	; 255
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	a9 01       	movw	r20, r18
     8dc:	2a e0       	ldi	r18, 0x0A	; 10
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return concat(buf, strlen(buf));
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     8ec:	9c 01       	movw	r18, r24
     8ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     8f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     8f2:	ae 01       	movw	r20, r28
     8f4:	4f 5f       	subi	r20, 0xFF	; 255
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	ba 01       	movw	r22, r20
     8fa:	a9 01       	movw	r20, r18
     8fc:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     900:	61 96       	adiw	r28, 0x11	; 17
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	08 95       	ret

00000912 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	00 d0       	rcall	.+0      	; 0x918 <_ZplRK15StringSumHelperRK6String+0x6>
     918:	00 d0       	rcall	.+0      	; 0x91a <_ZplRK15StringSumHelperRK6String+0x8>
     91a:	00 d0       	rcall	.+0      	; 0x91c <_ZplRK15StringSumHelperRK6String+0xa>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	9c 83       	std	Y+4, r25	; 0x04
     922:	8b 83       	std	Y+3, r24	; 0x03
     924:	7e 83       	std	Y+6, r23	; 0x06
     926:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	9c 81       	ldd	r25, Y+4	; 0x04
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	2d 81       	ldd	r18, Y+5	; 0x05
     936:	3e 81       	ldd	r19, Y+6	; 0x06
     938:	f9 01       	movw	r30, r18
     93a:	40 81       	ld	r20, Z
     93c:	51 81       	ldd	r21, Z+1	; 0x01
     93e:	2d 81       	ldd	r18, Y+5	; 0x05
     940:	3e 81       	ldd	r19, Y+6	; 0x06
     942:	f9 01       	movw	r30, r18
     944:	24 81       	ldd	r18, Z+4	; 0x04
     946:	35 81       	ldd	r19, Z+5	; 0x05
     948:	ba 01       	movw	r22, r20
     94a:	a9 01       	movw	r20, r18
     94c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     950:	98 2f       	mov	r25, r24
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	99 23       	and	r25, r25
     956:	01 f0       	breq	.+0      	; 0x958 <_ZplRK15StringSumHelperRK6String+0x46>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	88 23       	and	r24, r24
     95c:	01 f0       	breq	.+0      	; 0x95e <_ZplRK15StringSumHelperRK6String+0x4c>
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	9a 81       	ldd	r25, Y+2	; 0x02
     962:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
}
     96a:	26 96       	adiw	r28, 0x06	; 6
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	08 95       	ret

0000097c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	df 93       	push	r29
     982:	cf 93       	push	r28
     984:	00 d0       	rcall	.+0      	; 0x986 <_ZplRK15StringSumHelperPKc+0xa>
     986:	00 d0       	rcall	.+0      	; 0x988 <_ZplRK15StringSumHelperPKc+0xc>
     988:	00 d0       	rcall	.+0      	; 0x98a <_ZplRK15StringSumHelperPKc+0xe>
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	9c 83       	std	Y+4, r25	; 0x04
     990:	8b 83       	std	Y+3, r24	; 0x03
     992:	7e 83       	std	Y+6, r23	; 0x06
     994:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	01 f0       	breq	.+0      	; 0x9a6 <_ZplRK15StringSumHelperPKc+0x2a>
     9a6:	09 81       	ldd	r16, Y+1	; 0x01
     9a8:	1a 81       	ldd	r17, Y+2	; 0x02
     9aa:	8d 81       	ldd	r24, Y+5	; 0x05
     9ac:	9e 81       	ldd	r25, Y+6	; 0x06
     9ae:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     9b2:	9c 01       	movw	r18, r24
     9b4:	4d 81       	ldd	r20, Y+5	; 0x05
     9b6:	5e 81       	ldd	r21, Y+6	; 0x06
     9b8:	c8 01       	movw	r24, r16
     9ba:	ba 01       	movw	r22, r20
     9bc:	a9 01       	movw	r20, r18
     9be:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     9c2:	88 23       	and	r24, r24
     9c4:	01 f4       	brne	.+0      	; 0x9c6 <_ZplRK15StringSumHelperPKc+0x4a>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <_ZplRK15StringSumHelperPKc+0x4e>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	88 23       	and	r24, r24
     9ce:	01 f0       	breq	.+0      	; 0x9d0 <_ZplRK15StringSumHelperPKc+0x54>
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9dc:	26 96       	adiw	r28, 0x06	; 6
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	08 95       	ret

000009f2 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <_ZplRK15StringSumHelperc+0x6>
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <_ZplRK15StringSumHelperc+0x8>
     9fa:	0f 92       	push	r0
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	9c 83       	std	Y+4, r25	; 0x04
     a02:	8b 83       	std	Y+3, r24	; 0x03
     a04:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	9c 81       	ldd	r25, Y+4	; 0x04
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(c)) a.invalidate();
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	6d 81       	ldd	r22, Y+5	; 0x05
     a14:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     a18:	98 2f       	mov	r25, r24
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	99 23       	and	r25, r25
     a1e:	01 f0       	breq	.+0      	; 0xa20 <_ZplRK15StringSumHelperc+0x2e>
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	88 23       	and	r24, r24
     a24:	01 f0       	breq	.+0      	; 0xa26 <_ZplRK15StringSumHelperc+0x34>
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	08 95       	ret

00000a42 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	00 d0       	rcall	.+0      	; 0xa48 <_ZplRK15StringSumHelperh+0x6>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <_ZplRK15StringSumHelperh+0x8>
     a4a:	0f 92       	push	r0
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	9c 83       	std	Y+4, r25	; 0x04
     a52:	8b 83       	std	Y+3, r24	; 0x03
     a54:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	6d 81       	ldd	r22, Y+5	; 0x05
     a64:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     a68:	98 2f       	mov	r25, r24
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	99 23       	and	r25, r25
     a6e:	01 f0       	breq	.+0      	; 0xa70 <_ZplRK15StringSumHelperh+0x2e>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	88 23       	and	r24, r24
     a74:	01 f0       	breq	.+0      	; 0xa76 <_ZplRK15StringSumHelperh+0x34>
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	9a 81       	ldd	r25, Y+2	; 0x02
     a7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	cf 91       	pop	r28
     a8e:	df 91       	pop	r29
     a90:	08 95       	ret

00000a92 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
     a92:	df 93       	push	r29
     a94:	cf 93       	push	r28
     a96:	00 d0       	rcall	.+0      	; 0xa98 <_ZplRK15StringSumHelperi+0x6>
     a98:	00 d0       	rcall	.+0      	; 0xa9a <_ZplRK15StringSumHelperi+0x8>
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <_ZplRK15StringSumHelperi+0xa>
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	9c 83       	std	Y+4, r25	; 0x04
     aa2:	8b 83       	std	Y+3, r24	; 0x03
     aa4:	7e 83       	std	Y+6, r23	; 0x06
     aa6:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	2d 81       	ldd	r18, Y+5	; 0x05
     ab6:	3e 81       	ldd	r19, Y+6	; 0x06
     ab8:	b9 01       	movw	r22, r18
     aba:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     abe:	98 2f       	mov	r25, r24
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	99 23       	and	r25, r25
     ac4:	01 f0       	breq	.+0      	; 0xac6 <_ZplRK15StringSumHelperi+0x34>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	88 23       	and	r24, r24
     aca:	01 f0       	breq	.+0      	; 0xacc <_ZplRK15StringSumHelperi+0x3a>
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ad8:	26 96       	adiw	r28, 0x06	; 6
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	cf 91       	pop	r28
     ae6:	df 91       	pop	r29
     ae8:	08 95       	ret

00000aea <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <_ZplRK15StringSumHelperj+0x6>
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <_ZplRK15StringSumHelperj+0x8>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <_ZplRK15StringSumHelperj+0xa>
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	9c 83       	std	Y+4, r25	; 0x04
     afa:	8b 83       	std	Y+3, r24	; 0x03
     afc:	7e 83       	std	Y+6, r23	; 0x06
     afe:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	9a 83       	std	Y+2, r25	; 0x02
     b06:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	2d 81       	ldd	r18, Y+5	; 0x05
     b0e:	3e 81       	ldd	r19, Y+6	; 0x06
     b10:	b9 01       	movw	r22, r18
     b12:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     b16:	98 2f       	mov	r25, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	99 23       	and	r25, r25
     b1c:	01 f0       	breq	.+0      	; 0xb1e <_ZplRK15StringSumHelperj+0x34>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	88 23       	and	r24, r24
     b22:	01 f0       	breq	.+0      	; 0xb24 <_ZplRK15StringSumHelperj+0x3a>
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b30:	26 96       	adiw	r28, 0x06	; 6
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	08 95       	ret

00000b42 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	28 97       	sbiw	r28, 0x08	; 8
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	9c 83       	std	Y+4, r25	; 0x04
     b58:	8b 83       	std	Y+3, r24	; 0x03
     b5a:	4d 83       	std	Y+5, r20	; 0x05
     b5c:	5e 83       	std	Y+6, r21	; 0x06
     b5e:	6f 83       	std	Y+7, r22	; 0x07
     b60:	78 87       	std	Y+8, r23	; 0x08
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	2d 81       	ldd	r18, Y+5	; 0x05
     b70:	3e 81       	ldd	r19, Y+6	; 0x06
     b72:	4f 81       	ldd	r20, Y+7	; 0x07
     b74:	58 85       	ldd	r21, Y+8	; 0x08
     b76:	ba 01       	movw	r22, r20
     b78:	a9 01       	movw	r20, r18
     b7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     b7e:	98 2f       	mov	r25, r24
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	99 23       	and	r25, r25
     b84:	01 f0       	breq	.+0      	; 0xb86 <_ZplRK15StringSumHelperl+0x44>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	88 23       	and	r24, r24
     b8a:	01 f0       	breq	.+0      	; 0xb8c <_ZplRK15StringSumHelperl+0x4a>
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b98:	28 96       	adiw	r28, 0x08	; 8
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	28 97       	sbiw	r28, 0x08	; 8
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	4d 83       	std	Y+5, r20	; 0x05
     bc4:	5e 83       	std	Y+6, r21	; 0x06
     bc6:	6f 83       	std	Y+7, r22	; 0x07
     bc8:	78 87       	std	Y+8, r23	; 0x08
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	9a 83       	std	Y+2, r25	; 0x02
     bd0:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	2d 81       	ldd	r18, Y+5	; 0x05
     bd8:	3e 81       	ldd	r19, Y+6	; 0x06
     bda:	4f 81       	ldd	r20, Y+7	; 0x07
     bdc:	58 85       	ldd	r21, Y+8	; 0x08
     bde:	ba 01       	movw	r22, r20
     be0:	a9 01       	movw	r20, r18
     be2:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     be6:	98 2f       	mov	r25, r24
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	99 23       	and	r25, r25
     bec:	01 f0       	breq	.+0      	; 0xbee <_ZplRK15StringSumHelperm+0x44>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	88 23       	and	r24, r24
     bf2:	01 f0       	breq	.+0      	; 0xbf4 <_ZplRK15StringSumHelperm+0x4a>
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	return a;
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c00:	28 96       	adiw	r28, 0x08	; 8
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <_ZNK6String9compareToERKS_+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <_ZNK6String9compareToERKS_+0x8>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	7c 83       	std	Y+4, r23	; 0x04
     c24:	6b 83       	std	Y+3, r22	; 0x03
	if (!buffer || !s.buffer) {
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	01 f0       	breq	.+0      	; 0xc34 <_ZNK6String9compareToERKS_+0x22>
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	fc 01       	movw	r30, r24
     c3a:	80 81       	ld	r24, Z
     c3c:	91 81       	ldd	r25, Z+1	; 0x01
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	01 f4       	brne	.+0      	; 0xc42 <_ZNK6String9compareToERKS_+0x30>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	01 f0       	breq	.+0      	; 0xc50 <_ZNK6String9compareToERKS_+0x3e>
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	fc 01       	movw	r30, r24
     c56:	84 81       	ldd	r24, Z+4	; 0x04
     c58:	95 81       	ldd	r25, Z+5	; 0x05
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	01 f0       	breq	.+0      	; 0xc5e <_ZNK6String9compareToERKS_+0x4c>
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	fc 01       	movw	r30, r24
     c64:	80 81       	ld	r24, Z
     c66:	91 81       	ldd	r25, Z+1	; 0x01
     c68:	fc 01       	movw	r30, r24
     c6a:	80 81       	ld	r24, Z
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	90 95       	com	r25
     c72:	81 95       	neg	r24
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <_ZNK6String9compareToERKS_+0x66>
		if (buffer && len > 0) return *(unsigned char *)buffer;
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	fc 01       	movw	r30, r24
     c7e:	80 81       	ld	r24, Z
     c80:	91 81       	ldd	r25, Z+1	; 0x01
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	01 f0       	breq	.+0      	; 0xc86 <_ZNK6String9compareToERKS_+0x74>
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	fc 01       	movw	r30, r24
     c8c:	84 81       	ldd	r24, Z+4	; 0x04
     c8e:	95 81       	ldd	r25, Z+5	; 0x05
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	01 f0       	breq	.+0      	; 0xc94 <_ZNK6String9compareToERKS_+0x82>
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	fc 01       	movw	r30, r24
     c9a:	80 81       	ld	r24, Z
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	fc 01       	movw	r30, r24
     ca0:	80 81       	ld	r24, Z
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <_ZNK6String9compareToERKS_+0x96>
		return 0;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	00 c0       	rjmp	.+0      	; 0xcae <_ZNK6String9compareToERKS_+0x9c>
	}
	return strcmp(buffer, s.buffer);
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	fc 01       	movw	r30, r24
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	2b 81       	ldd	r18, Y+3	; 0x03
     cba:	3c 81       	ldd	r19, Y+4	; 0x04
     cbc:	f9 01       	movw	r30, r18
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	b9 01       	movw	r22, r18
     cc4:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <_ZNK6String6equalsERKS_+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <_ZNK6String6equalsERKS_+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	7c 83       	std	Y+4, r23	; 0x04
     ce8:	6b 83       	std	Y+3, r22	; 0x03
	return (len == s2.len && compareTo(s2) == 0);
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	fc 01       	movw	r30, r24
     cf0:	24 81       	ldd	r18, Z+4	; 0x04
     cf2:	35 81       	ldd	r19, Z+5	; 0x05
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	fc 01       	movw	r30, r24
     cfa:	84 81       	ldd	r24, Z+4	; 0x04
     cfc:	95 81       	ldd	r25, Z+5	; 0x05
     cfe:	28 17       	cp	r18, r24
     d00:	39 07       	cpc	r19, r25
     d02:	01 f4       	brne	.+0      	; 0xd04 <_ZNK6String6equalsERKS_+0x2e>
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	2b 81       	ldd	r18, Y+3	; 0x03
     d0a:	3c 81       	ldd	r19, Y+4	; 0x04
     d0c:	b9 01       	movw	r22, r18
     d0e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	01 f4       	brne	.+0      	; 0xd16 <_ZNK6String6equalsERKS_+0x40>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <_ZNK6String6equalsERKS_+0x44>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
}
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <_ZNK6String6equalsEPKc+0x6>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <_ZNK6String6equalsEPKc+0x8>
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	7c 83       	std	Y+4, r23	; 0x04
     d3c:	6b 83       	std	Y+3, r22	; 0x03
	if (len == 0) return (cstr == NULL || *cstr == 0);
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	fc 01       	movw	r30, r24
     d44:	84 81       	ldd	r24, Z+4	; 0x04
     d46:	95 81       	ldd	r25, Z+5	; 0x05
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	01 f4       	brne	.+0      	; 0xd4c <_ZNK6String6equalsEPKc+0x22>
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	01 f0       	breq	.+0      	; 0xd54 <_ZNK6String6equalsEPKc+0x2a>
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	88 23       	and	r24, r24
     d5e:	01 f4       	brne	.+0      	; 0xd60 <_ZNK6String6equalsEPKc+0x36>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <_ZNK6String6equalsEPKc+0x3a>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <_ZNK6String6equalsEPKc+0x3e>
	if (cstr == NULL) return buffer[0] == 0;
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	01 f4       	brne	.+0      	; 0xd70 <_ZNK6String6equalsEPKc+0x46>
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	fc 01       	movw	r30, r24
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	fc 01       	movw	r30, r24
     d7c:	90 81       	ld	r25, Z
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	99 23       	and	r25, r25
     d82:	01 f0       	breq	.+0      	; 0xd84 <_ZNK6String6equalsEPKc+0x5a>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <_ZNK6String6equalsEPKc+0x5e>
	return strcmp(buffer, cstr) == 0;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	2b 81       	ldd	r18, Y+3	; 0x03
     d94:	3c 81       	ldd	r19, Y+4	; 0x04
     d96:	b9 01       	movw	r22, r18
     d98:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     d9c:	9c 01       	movw	r18, r24
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	21 15       	cp	r18, r1
     da2:	31 05       	cpc	r19, r1
     da4:	01 f0       	breq	.+0      	; 0xda6 <_ZNK6String6equalsEPKc+0x7c>
     da6:	80 e0       	ldi	r24, 0x00	; 0
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <_ZNK6StringltERKS_+0x6>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <_ZNK6StringltERKS_+0x8>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	7c 83       	std	Y+4, r23	; 0x04
     dc8:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) < 0;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	2b 81       	ldd	r18, Y+3	; 0x03
     dd0:	3c 81       	ldd	r19, Y+4	; 0x04
     dd2:	b9 01       	movw	r22, r18
     dd4:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     dd8:	89 2f       	mov	r24, r25
     dda:	88 1f       	adc	r24, r24
     ddc:	88 27       	eor	r24, r24
     dde:	88 1f       	adc	r24, r24
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <_ZNK6StringgtERKS_+0x6>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <_ZNK6StringgtERKS_+0x8>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	7c 83       	std	Y+4, r23	; 0x04
     e00:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) > 0;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	2b 81       	ldd	r18, Y+3	; 0x03
     e08:	3c 81       	ldd	r19, Y+4	; 0x04
     e0a:	b9 01       	movw	r22, r18
     e0c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	18 16       	cp	r1, r24
     e14:	19 06       	cpc	r1, r25
     e16:	04 f0       	brlt	.+0      	; 0xe18 <_ZNK6StringgtERKS_+0x2a>
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	82 2f       	mov	r24, r18
}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <_ZNK6StringleERKS_+0x6>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <_ZNK6StringleERKS_+0x8>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	7c 83       	std	Y+4, r23	; 0x04
     e3c:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) <= 0;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	b9 01       	movw	r22, r18
     e48:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	18 16       	cp	r1, r24
     e50:	19 06       	cpc	r1, r25
     e52:	04 f4       	brge	.+0      	; 0xe54 <_ZNK6StringleERKS_+0x2a>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	82 2f       	mov	r24, r18
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <_ZNK6StringgeERKS_+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <_ZNK6StringgeERKS_+0x8>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	7c 83       	std	Y+4, r23	; 0x04
     e78:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) >= 0;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	2b 81       	ldd	r18, Y+3	; 0x03
     e80:	3c 81       	ldd	r19, Y+4	; 0x04
     e82:	b9 01       	movw	r22, r18
     e84:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     e88:	89 2f       	mov	r24, r25
     e8a:	80 95       	com	r24
     e8c:	88 1f       	adc	r24, r24
     e8e:	88 27       	eor	r24, r24
     e90:	88 1f       	adc	r24, r24
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	28 97       	sbiw	r28, 0x08	; 8
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	78 87       	std	Y+8, r23	; 0x08
     ebe:	6f 83       	std	Y+7, r22	; 0x07
	if (this == &s2) return 1;
     ec0:	2d 81       	ldd	r18, Y+5	; 0x05
     ec2:	3e 81       	ldd	r19, Y+6	; 0x06
     ec4:	8f 81       	ldd	r24, Y+7	; 0x07
     ec6:	98 85       	ldd	r25, Y+8	; 0x08
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	01 f4       	brne	.+0      	; 0xece <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
	if (len != s2.len) return 0;
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	fc 01       	movw	r30, r24
     ed8:	24 81       	ldd	r18, Z+4	; 0x04
     eda:	35 81       	ldd	r19, Z+5	; 0x05
     edc:	8f 81       	ldd	r24, Y+7	; 0x07
     ede:	98 85       	ldd	r25, Y+8	; 0x08
     ee0:	fc 01       	movw	r30, r24
     ee2:	84 81       	ldd	r24, Z+4	; 0x04
     ee4:	95 81       	ldd	r25, Z+5	; 0x05
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	01 f0       	breq	.+0      	; 0xeec <_ZNK6String16equalsIgnoreCaseERKS_+0x4c>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <_ZNK6String16equalsIgnoreCaseERKS_+0x50>
	if (len == 0) return 1;
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	fc 01       	movw	r30, r24
     ef6:	84 81       	ldd	r24, Z+4	; 0x04
     ef8:	95 81       	ldd	r25, Z+5	; 0x05
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	01 f4       	brne	.+0      	; 0xefe <_ZNK6String16equalsIgnoreCaseERKS_+0x5e>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <_ZNK6String16equalsIgnoreCaseERKS_+0x62>
	const char *p1 = buffer;
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	fc 01       	movw	r30, r24
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
	const char *p2 = s2.buffer;
     f10:	8f 81       	ldd	r24, Y+7	; 0x07
     f12:	98 85       	ldd	r25, Y+8	; 0x08
     f14:	fc 01       	movw	r30, r24
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
	while (*p1) {
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <_ZNK6String16equalsIgnoreCaseERKS_+0x80>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	80 81       	ld	r24, Z
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	29 81       	ldd	r18, Y+1	; 0x01
     f2e:	3a 81       	ldd	r19, Y+2	; 0x02
     f30:	2f 5f       	subi	r18, 0xFF	; 255
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	3a 83       	std	Y+2, r19	; 0x02
     f36:	29 83       	std	Y+1, r18	; 0x01
     f38:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     f3c:	8c 01       	movw	r16, r24
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	fc 01       	movw	r30, r24
     f44:	80 81       	ld	r24, Z
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	2b 81       	ldd	r18, Y+3	; 0x03
     f4c:	3c 81       	ldd	r19, Y+4	; 0x04
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	3c 83       	std	Y+4, r19	; 0x04
     f54:	2b 83       	std	Y+3, r18	; 0x03
     f56:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	08 17       	cp	r16, r24
     f5e:	19 07       	cpc	r17, r25
     f60:	01 f4       	brne	.+0      	; 0xf62 <_ZNK6String16equalsIgnoreCaseERKS_+0xc2>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	22 23       	and	r18, r18
     f66:	01 f0       	breq	.+0      	; 0xf68 <_ZNK6String16equalsIgnoreCaseERKS_+0xc8>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <_ZNK6String16equalsIgnoreCaseERKS_+0xcc>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	fc 01       	movw	r30, r24
     f72:	90 81       	ld	r25, Z
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	99 23       	and	r25, r25
     f78:	01 f4       	brne	.+0      	; 0xf7a <_ZNK6String16equalsIgnoreCaseERKS_+0xda>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	88 23       	and	r24, r24
     f7e:	01 f4       	brne	.+0      	; 0xf80 <_ZNK6String16equalsIgnoreCaseERKS_+0xe0>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
     f80:	81 e0       	ldi	r24, 0x01	; 1
}
     f82:	28 96       	adiw	r28, 0x08	; 8
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <_ZNK6String10startsWithERKS_>:

unsigned char String::startsWith( const String &s2 ) const
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <_ZNK6String10startsWithERKS_+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <_ZNK6String10startsWithERKS_+0x8>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	7c 83       	std	Y+4, r23	; 0x04
     faa:	6b 83       	std	Y+3, r22	; 0x03
	if (len < s2.len) return 0;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	24 81       	ldd	r18, Z+4	; 0x04
     fb4:	35 81       	ldd	r19, Z+5	; 0x05
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	fc 01       	movw	r30, r24
     fbc:	84 81       	ldd	r24, Z+4	; 0x04
     fbe:	95 81       	ldd	r25, Z+5	; 0x05
     fc0:	28 17       	cp	r18, r24
     fc2:	39 07       	cpc	r19, r25
     fc4:	00 f4       	brcc	.+0      	; 0xfc6 <_ZNK6String10startsWithERKS_+0x2e>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <_ZNK6String10startsWithERKS_+0x32>
	return startsWith(s2, 0);
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	2b 81       	ldd	r18, Y+3	; 0x03
     fd0:	3c 81       	ldd	r19, Y+4	; 0x04
     fd2:	b9 01       	movw	r22, r18
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <_ZNK6String10startsWithERKS_j>:

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <_ZNK6String10startsWithERKS_j+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <_ZNK6String10startsWithERKS_j+0x8>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <_ZNK6String10startsWithERKS_j+0xa>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	7c 83       	std	Y+4, r23	; 0x04
     ffe:	6b 83       	std	Y+3, r22	; 0x03
    1000:	5e 83       	std	Y+6, r21	; 0x06
    1002:	4d 83       	std	Y+5, r20	; 0x05
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	fc 01       	movw	r30, r24
    100a:	24 81       	ldd	r18, Z+4	; 0x04
    100c:	35 81       	ldd	r19, Z+5	; 0x05
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	fc 01       	movw	r30, r24
    1014:	84 81       	ldd	r24, Z+4	; 0x04
    1016:	95 81       	ldd	r25, Z+5	; 0x05
    1018:	28 1b       	sub	r18, r24
    101a:	39 0b       	sbc	r19, r25
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	9e 81       	ldd	r25, Y+6	; 0x06
    1020:	28 17       	cp	r18, r24
    1022:	39 07       	cpc	r19, r25
    1024:	00 f0       	brcs	.+0      	; 0x1026 <_ZNK6String10startsWithERKS_j+0x3c>
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	fc 01       	movw	r30, r24
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	01 f0       	breq	.+0      	; 0x1034 <_ZNK6String10startsWithERKS_j+0x4a>
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	fc 01       	movw	r30, r24
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	01 f4       	brne	.+0      	; 0x1042 <_ZNK6String10startsWithERKS_j+0x58>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <_ZNK6String10startsWithERKS_j+0x5c>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	fc 01       	movw	r30, r24
    104c:	20 81       	ld	r18, Z
    104e:	31 81       	ldd	r19, Z+1	; 0x01
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	82 0f       	add	r24, r18
    1056:	93 1f       	adc	r25, r19
    1058:	2b 81       	ldd	r18, Y+3	; 0x03
    105a:	3c 81       	ldd	r19, Y+4	; 0x04
    105c:	f9 01       	movw	r30, r18
    105e:	40 81       	ld	r20, Z
    1060:	51 81       	ldd	r21, Z+1	; 0x01
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	3c 81       	ldd	r19, Y+4	; 0x04
    1066:	f9 01       	movw	r30, r18
    1068:	24 81       	ldd	r18, Z+4	; 0x04
    106a:	35 81       	ldd	r19, Z+5	; 0x05
    106c:	ba 01       	movw	r22, r20
    106e:	a9 01       	movw	r20, r18
    1070:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	01 f0       	breq	.+0      	; 0x107a <_ZNK6String10startsWithERKS_j+0x90>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	82 2f       	mov	r24, r18
}
    107e:	26 96       	adiw	r28, 0x06	; 6
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <_ZNK6String8endsWithERKS_>:

unsigned char String::endsWith( const String &s2 ) const
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <_ZNK6String8endsWithERKS_+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <_ZNK6String8endsWithERKS_+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	7c 83       	std	Y+4, r23	; 0x04
    10a2:	6b 83       	std	Y+3, r22	; 0x03
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	fc 01       	movw	r30, r24
    10aa:	24 81       	ldd	r18, Z+4	; 0x04
    10ac:	35 81       	ldd	r19, Z+5	; 0x05
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	fc 01       	movw	r30, r24
    10b4:	84 81       	ldd	r24, Z+4	; 0x04
    10b6:	95 81       	ldd	r25, Z+5	; 0x05
    10b8:	28 17       	cp	r18, r24
    10ba:	39 07       	cpc	r19, r25
    10bc:	00 f0       	brcs	.+0      	; 0x10be <_ZNK6String8endsWithERKS_+0x2e>
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	fc 01       	movw	r30, r24
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	01 f0       	breq	.+0      	; 0x10cc <_ZNK6String8endsWithERKS_+0x3c>
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	01 f4       	brne	.+0      	; 0x10da <_ZNK6String8endsWithERKS_+0x4a>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <_ZNK6String8endsWithERKS_+0x4e>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 81       	ld	r18, Z
    10e6:	31 81       	ldd	r19, Z+1	; 0x01
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	fc 01       	movw	r30, r24
    10ee:	44 81       	ldd	r20, Z+4	; 0x04
    10f0:	55 81       	ldd	r21, Z+5	; 0x05
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	fc 01       	movw	r30, r24
    10f8:	84 81       	ldd	r24, Z+4	; 0x04
    10fa:	95 81       	ldd	r25, Z+5	; 0x05
    10fc:	ba 01       	movw	r22, r20
    10fe:	68 1b       	sub	r22, r24
    1100:	79 0b       	sbc	r23, r25
    1102:	cb 01       	movw	r24, r22
    1104:	82 0f       	add	r24, r18
    1106:	93 1f       	adc	r25, r19
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	3c 81       	ldd	r19, Y+4	; 0x04
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	31 81       	ldd	r19, Z+1	; 0x01
    1112:	b9 01       	movw	r22, r18
    1114:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	01 f0       	breq	.+0      	; 0x111e <_ZNK6String8endsWithERKS_+0x8e>
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	82 2f       	mov	r24, r18
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <_ZNK6String6charAtEj>:
/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <_ZNK6String6charAtEj+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <_ZNK6String6charAtEj+0x8>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	7c 83       	std	Y+4, r23	; 0x04
    1142:	6b 83       	std	Y+3, r22	; 0x03
	return operator[](loc);
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	b9 01       	movw	r22, r18
    114e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <_ZN6String9setCharAtEjc>:

void String::setCharAt(unsigned int loc, char c) 
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <_ZN6String9setCharAtEjc+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <_ZN6String9setCharAtEjc+0x8>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	7c 83       	std	Y+4, r23	; 0x04
    1174:	6b 83       	std	Y+3, r22	; 0x03
    1176:	4d 83       	std	Y+5, r20	; 0x05
	if (loc < len) buffer[loc] = c;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	fc 01       	movw	r30, r24
    117e:	24 81       	ldd	r18, Z+4	; 0x04
    1180:	35 81       	ldd	r19, Z+5	; 0x05
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	00 f4       	brcc	.+0      	; 0x118c <_ZN6String9setCharAtEjc+0x2c>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	fc 01       	movw	r30, r24
    1192:	20 81       	ld	r18, Z
    1194:	31 81       	ldd	r19, Z+1	; 0x01
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	82 0f       	add	r24, r18
    119c:	93 1f       	adc	r25, r19
    119e:	2d 81       	ldd	r18, Y+5	; 0x05
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <_ZN6StringixEj>:

char & String::operator[](unsigned int index)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <_ZN6StringixEj+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <_ZN6StringixEj+0x8>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	7c 83       	std	Y+4, r23	; 0x04
    11c6:	6b 83       	std	Y+3, r22	; 0x03
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	fc 01       	movw	r30, r24
    11ce:	24 81       	ldd	r18, Z+4	; 0x04
    11d0:	35 81       	ldd	r19, Z+5	; 0x05
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	82 17       	cp	r24, r18
    11d8:	93 07       	cpc	r25, r19
    11da:	00 f4       	brcc	.+0      	; 0x11dc <_ZN6StringixEj+0x28>
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	fc 01       	movw	r30, r24
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	01 f4       	brne	.+0      	; 0x11ea <_ZN6StringixEj+0x36>
		dummy_writable_char = 0;
    11ea:	10 92 00 00 	sts	0x0000, r1
		return dummy_writable_char;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <_ZN6StringixEj+0x40>
	}
	return buffer[index];
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 81       	ld	r18, Z
    11fc:	31 81       	ldd	r19, Z+1	; 0x01
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <_ZNK6StringixEj+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <_ZNK6StringixEj+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	7c 83       	std	Y+4, r23	; 0x04
    1226:	6b 83       	std	Y+3, r22	; 0x03
	if (index >= len || !buffer) return 0;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	fc 01       	movw	r30, r24
    122e:	24 81       	ldd	r18, Z+4	; 0x04
    1230:	35 81       	ldd	r19, Z+5	; 0x05
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	82 17       	cp	r24, r18
    1238:	93 07       	cpc	r25, r19
    123a:	00 f4       	brcc	.+0      	; 0x123c <_ZNK6StringixEj+0x28>
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	fc 01       	movw	r30, r24
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	01 f4       	brne	.+0      	; 0x124a <_ZNK6StringixEj+0x36>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	00 c0       	rjmp	.+0      	; 0x124e <_ZNK6StringixEj+0x3a>
	return buffer[index];
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	fc 01       	movw	r30, r24
    1254:	20 81       	ld	r18, Z
    1256:	31 81       	ldd	r19, Z+1	; 0x01
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	fc 01       	movw	r30, r24
    1262:	80 81       	ld	r24, Z
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	2a 97       	sbiw	r28, 0x0a	; 10
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	8b 83       	std	Y+3, r24	; 0x03
    128a:	7e 83       	std	Y+6, r23	; 0x06
    128c:	6d 83       	std	Y+5, r22	; 0x05
    128e:	58 87       	std	Y+8, r21	; 0x08
    1290:	4f 83       	std	Y+7, r20	; 0x07
    1292:	3a 87       	std	Y+10, r19	; 0x0a
    1294:	29 87       	std	Y+9, r18	; 0x09
	if (!bufsize || !buf) return;
    1296:	8f 81       	ldd	r24, Y+7	; 0x07
    1298:	98 85       	ldd	r25, Y+8	; 0x08
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	01 f4       	brne	.+0      	; 0x129e <_ZNK6String8getBytesEPhjj+0x2c>
    129e:	00 c0       	rjmp	.+0      	; 0x12a0 <_ZNK6String8getBytesEPhjj+0x2e>
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	01 f4       	brne	.+0      	; 0x12a8 <_ZNK6String8getBytesEPhjj+0x36>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <_ZNK6String8getBytesEPhjj+0x38>
	if (index >= len) {
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	fc 01       	movw	r30, r24
    12b0:	24 81       	ldd	r18, Z+4	; 0x04
    12b2:	35 81       	ldd	r19, Z+5	; 0x05
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	82 17       	cp	r24, r18
    12ba:	93 07       	cpc	r25, r19
    12bc:	00 f0       	brcs	.+0      	; 0x12be <_ZNK6String8getBytesEPhjj+0x4c>
		buf[0] = 0;
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	fc 01       	movw	r30, r24
    12c4:	10 82       	st	Z, r1
		return;
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <_ZNK6String8getBytesEPhjj+0x56>
	}
	unsigned int n = bufsize - 1;
    12c8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ca:	98 85       	ldd	r25, Y+8	; 0x08
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
	if (n > len - index) n = len - index;
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	fc 01       	movw	r30, r24
    12d8:	24 81       	ldd	r18, Z+4	; 0x04
    12da:	35 81       	ldd	r19, Z+5	; 0x05
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	28 1b       	sub	r18, r24
    12e2:	39 0b       	sbc	r19, r25
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	00 f4       	brcc	.+0      	; 0x12ee <_ZNK6String8getBytesEPhjj+0x7c>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	fc 01       	movw	r30, r24
    12f4:	24 81       	ldd	r18, Z+4	; 0x04
    12f6:	35 81       	ldd	r19, Z+5	; 0x05
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	a9 01       	movw	r20, r18
    12fe:	48 1b       	sub	r20, r24
    1300:	59 0b       	sbc	r21, r25
    1302:	ca 01       	movw	r24, r20
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
	strncpy((char *)buf, buffer + index, n);
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	fc 01       	movw	r30, r24
    130e:	20 81       	ld	r18, Z
    1310:	31 81       	ldd	r19, Z+1	; 0x01
    1312:	89 85       	ldd	r24, Y+9	; 0x09
    1314:	9a 85       	ldd	r25, Y+10	; 0x0a
    1316:	a9 01       	movw	r20, r18
    1318:	48 0f       	add	r20, r24
    131a:	59 1f       	adc	r21, r25
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	29 81       	ldd	r18, Y+1	; 0x01
    1322:	3a 81       	ldd	r19, Y+2	; 0x02
    1324:	ba 01       	movw	r22, r20
    1326:	a9 01       	movw	r20, r18
    1328:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	buf[n] = 0;
    132c:	2d 81       	ldd	r18, Y+5	; 0x05
    132e:	3e 81       	ldd	r19, Y+6	; 0x06
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	82 0f       	add	r24, r18
    1336:	93 1f       	adc	r25, r19
    1338:	fc 01       	movw	r30, r24
    133a:	10 82       	st	Z, r1
    133c:	00 c0       	rjmp	.+0      	; 0x133e <_ZNK6String8getBytesEPhjj+0xcc>
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    133e:	00 00       	nop
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <_ZNK6String8getBytesEPhjj+0xd0>
    1342:	00 00       	nop
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    1344:	2a 96       	adiw	r28, 0x0a	; 10
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <_ZNK6String7indexOfEc>:
/*********************************************/
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <_ZNK6String7indexOfEc+0x6>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	6b 83       	std	Y+3, r22	; 0x03
	return indexOf(c, 0);
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	6b 81       	ldd	r22, Y+3	; 0x03
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <_ZNK6String7indexOfEcj>:

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	27 97       	sbiw	r28, 0x07	; 7
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	9c 83       	std	Y+4, r25	; 0x04
    1398:	8b 83       	std	Y+3, r24	; 0x03
    139a:	6d 83       	std	Y+5, r22	; 0x05
    139c:	5f 83       	std	Y+7, r21	; 0x07
    139e:	4e 83       	std	Y+6, r20	; 0x06
	if (fromIndex >= len) return -1;
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	fc 01       	movw	r30, r24
    13a6:	24 81       	ldd	r18, Z+4	; 0x04
    13a8:	35 81       	ldd	r19, Z+5	; 0x05
    13aa:	8e 81       	ldd	r24, Y+6	; 0x06
    13ac:	9f 81       	ldd	r25, Y+7	; 0x07
    13ae:	82 17       	cp	r24, r18
    13b0:	93 07       	cpc	r25, r19
    13b2:	00 f0       	brcs	.+0      	; 0x13b4 <_ZNK6String7indexOfEcj+0x32>
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <_ZNK6String7indexOfEcj+0x38>
	const char* temp = strchr(buffer + fromIndex, ch);
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	fc 01       	movw	r30, r24
    13c0:	20 81       	ld	r18, Z
    13c2:	31 81       	ldd	r19, Z+1	; 0x01
    13c4:	8e 81       	ldd	r24, Y+6	; 0x06
    13c6:	9f 81       	ldd	r25, Y+7	; 0x07
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	2d 81       	ldd	r18, Y+5	; 0x05
    13ce:	22 2f       	mov	r18, r18
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	b9 01       	movw	r22, r18
    13d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
	if (temp == NULL) return -1;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	01 f4       	brne	.+0      	; 0x13e4 <_ZNK6String7indexOfEcj+0x62>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <_ZNK6String7indexOfEcj+0x68>
	return temp - buffer;
    13ea:	29 81       	ldd	r18, Y+1	; 0x01
    13ec:	3a 81       	ldd	r19, Y+2	; 0x02
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	a9 01       	movw	r20, r18
    13fa:	48 1b       	sub	r20, r24
    13fc:	59 0b       	sbc	r21, r25
    13fe:	ca 01       	movw	r24, r20
}
    1400:	27 96       	adiw	r28, 0x07	; 7
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <_ZNK6String7indexOfERKS_>:

int String::indexOf(const String &s2) const
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <_ZNK6String7indexOfERKS_+0x6>
    1418:	00 d0       	rcall	.+0      	; 0x141a <_ZNK6String7indexOfERKS_+0x8>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	7c 83       	std	Y+4, r23	; 0x04
    1424:	6b 83       	std	Y+3, r22	; 0x03
	return indexOf(s2, 0);
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	2b 81       	ldd	r18, Y+3	; 0x03
    142c:	3c 81       	ldd	r19, Y+4	; 0x04
    142e:	b9 01       	movw	r22, r18
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <_ZNK6String7indexOfERKS_j>:

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	28 97       	sbiw	r28, 0x08	; 8
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	7e 83       	std	Y+6, r23	; 0x06
    1460:	6d 83       	std	Y+5, r22	; 0x05
    1462:	58 87       	std	Y+8, r21	; 0x08
    1464:	4f 83       	std	Y+7, r20	; 0x07
	if (fromIndex >= len) return -1;
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	fc 01       	movw	r30, r24
    146c:	24 81       	ldd	r18, Z+4	; 0x04
    146e:	35 81       	ldd	r19, Z+5	; 0x05
    1470:	8f 81       	ldd	r24, Y+7	; 0x07
    1472:	98 85       	ldd	r25, Y+8	; 0x08
    1474:	82 17       	cp	r24, r18
    1476:	93 07       	cpc	r25, r19
    1478:	00 f0       	brcs	.+0      	; 0x147a <_ZNK6String7indexOfERKS_j+0x34>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <_ZNK6String7indexOfERKS_j+0x3a>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	fc 01       	movw	r30, r24
    1486:	20 81       	ld	r18, Z
    1488:	31 81       	ldd	r19, Z+1	; 0x01
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	82 0f       	add	r24, r18
    1490:	93 1f       	adc	r25, r19
    1492:	2d 81       	ldd	r18, Y+5	; 0x05
    1494:	3e 81       	ldd	r19, Y+6	; 0x06
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	31 81       	ldd	r19, Z+1	; 0x01
    149c:	b9 01       	movw	r22, r18
    149e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
	if (found == NULL) return -1;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	01 f4       	brne	.+0      	; 0x14ae <_ZNK6String7indexOfERKS_j+0x68>
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	00 c0       	rjmp	.+0      	; 0x14b4 <_ZNK6String7indexOfERKS_j+0x6e>
	return found - buffer;
    14b4:	29 81       	ldd	r18, Y+1	; 0x01
    14b6:	3a 81       	ldd	r19, Y+2	; 0x02
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	fc 01       	movw	r30, r24
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	a9 01       	movw	r20, r18
    14c4:	48 1b       	sub	r20, r24
    14c6:	59 0b       	sbc	r21, r25
    14c8:	ca 01       	movw	r24, r20
}
    14ca:	28 96       	adiw	r28, 0x08	; 8
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <_ZNK6String11lastIndexOfEc>:

int String::lastIndexOf( char theChar ) const
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <_ZNK6String11lastIndexOfEc+0x6>
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	6b 83       	std	Y+3, r22	; 0x03
	return lastIndexOf(theChar, len - 1);
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	fc 01       	movw	r30, r24
    14f4:	84 81       	ldd	r24, Z+4	; 0x04
    14f6:	95 81       	ldd	r25, Z+5	; 0x05
    14f8:	9c 01       	movw	r18, r24
    14fa:	21 50       	subi	r18, 0x01	; 1
    14fc:	30 40       	sbci	r19, 0x00	; 0
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	6b 81       	ldd	r22, Y+3	; 0x03
    1504:	a9 01       	movw	r20, r18
    1506:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <_ZNK6String11lastIndexOfEcj>:

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	28 97       	sbiw	r28, 0x08	; 8
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	9d 83       	std	Y+5, r25	; 0x05
    152c:	8c 83       	std	Y+4, r24	; 0x04
    152e:	6e 83       	std	Y+6, r22	; 0x06
    1530:	58 87       	std	Y+8, r21	; 0x08
    1532:	4f 83       	std	Y+7, r20	; 0x07
	if (fromIndex >= len || fromIndex < 0) return -1;
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	fc 01       	movw	r30, r24
    153a:	24 81       	ldd	r18, Z+4	; 0x04
    153c:	35 81       	ldd	r19, Z+5	; 0x05
    153e:	8f 81       	ldd	r24, Y+7	; 0x07
    1540:	98 85       	ldd	r25, Y+8	; 0x08
    1542:	82 17       	cp	r24, r18
    1544:	93 07       	cpc	r25, r19
    1546:	00 f0       	brcs	.+0      	; 0x1548 <_ZNK6String11lastIndexOfEcj+0x32>
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	9f ef       	ldi	r25, 0xFF	; 255
    154c:	00 c0       	rjmp	.+0      	; 0x154e <_ZNK6String11lastIndexOfEcj+0x38>
	char tempchar = buffer[fromIndex + 1];
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	fc 01       	movw	r30, r24
    1554:	20 81       	ld	r18, Z
    1556:	31 81       	ldd	r19, Z+1	; 0x01
    1558:	8f 81       	ldd	r24, Y+7	; 0x07
    155a:	98 85       	ldd	r25, Y+8	; 0x08
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	82 0f       	add	r24, r18
    1560:	93 1f       	adc	r25, r19
    1562:	fc 01       	movw	r30, r24
    1564:	80 81       	ld	r24, Z
    1566:	89 83       	std	Y+1, r24	; 0x01
	buffer[fromIndex + 1] = '\0';
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	fc 01       	movw	r30, r24
    156e:	20 81       	ld	r18, Z
    1570:	31 81       	ldd	r19, Z+1	; 0x01
    1572:	8f 81       	ldd	r24, Y+7	; 0x07
    1574:	98 85       	ldd	r25, Y+8	; 0x08
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	82 0f       	add	r24, r18
    157a:	93 1f       	adc	r25, r19
    157c:	fc 01       	movw	r30, r24
    157e:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	91 81       	ldd	r25, Z+1	; 0x01
    158a:	2e 81       	ldd	r18, Y+6	; 0x06
    158c:	22 2f       	mov	r18, r18
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	b9 01       	movw	r22, r18
    1592:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1596:	9b 83       	std	Y+3, r25	; 0x03
    1598:	8a 83       	std	Y+2, r24	; 0x02
	buffer[fromIndex + 1] = tempchar;
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	fc 01       	movw	r30, r24
    15a0:	20 81       	ld	r18, Z
    15a2:	31 81       	ldd	r19, Z+1	; 0x01
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	98 85       	ldd	r25, Y+8	; 0x08
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	82 0f       	add	r24, r18
    15ac:	93 1f       	adc	r25, r19
    15ae:	29 81       	ldd	r18, Y+1	; 0x01
    15b0:	fc 01       	movw	r30, r24
    15b2:	20 83       	st	Z, r18
	if (temp == NULL) return -1;
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	9b 81       	ldd	r25, Y+3	; 0x03
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	01 f4       	brne	.+0      	; 0x15bc <_ZNK6String11lastIndexOfEcj+0xa6>
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <_ZNK6String11lastIndexOfEcj+0xac>
	return temp - buffer;
    15c2:	2a 81       	ldd	r18, Y+2	; 0x02
    15c4:	3b 81       	ldd	r19, Y+3	; 0x03
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	a9 01       	movw	r20, r18
    15d2:	48 1b       	sub	r20, r24
    15d4:	59 0b       	sbc	r21, r25
    15d6:	ca 01       	movw	r24, r20
}
    15d8:	28 96       	adiw	r28, 0x08	; 8
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <_ZNK6String11lastIndexOfERKS_>:

int String::lastIndexOf(const String &s2) const
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <_ZNK6String11lastIndexOfERKS_+0x6>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <_ZNK6String11lastIndexOfERKS_+0x8>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	7c 83       	std	Y+4, r23	; 0x04
    15fc:	6b 83       	std	Y+3, r22	; 0x03
	return lastIndexOf(s2, len - s2.len);
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	fc 01       	movw	r30, r24
    1604:	24 81       	ldd	r18, Z+4	; 0x04
    1606:	35 81       	ldd	r19, Z+5	; 0x05
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	fc 01       	movw	r30, r24
    160e:	84 81       	ldd	r24, Z+4	; 0x04
    1610:	95 81       	ldd	r25, Z+5	; 0x05
    1612:	28 1b       	sub	r18, r24
    1614:	39 0b       	sbc	r19, r25
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	4b 81       	ldd	r20, Y+3	; 0x03
    161c:	5c 81       	ldd	r21, Y+4	; 0x04
    161e:	ba 01       	movw	r22, r20
    1620:	a9 01       	movw	r20, r18
    1622:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <_ZNK6String11lastIndexOfERKS_j>:

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	2a 97       	sbiw	r28, 0x0a	; 10
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	78 87       	std	Y+8, r23	; 0x08
    164e:	6f 83       	std	Y+7, r22	; 0x07
    1650:	5a 87       	std	Y+10, r21	; 0x0a
    1652:	49 87       	std	Y+9, r20	; 0x09
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    1654:	8f 81       	ldd	r24, Y+7	; 0x07
    1656:	98 85       	ldd	r25, Y+8	; 0x08
    1658:	fc 01       	movw	r30, r24
    165a:	84 81       	ldd	r24, Z+4	; 0x04
    165c:	95 81       	ldd	r25, Z+5	; 0x05
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	01 f0       	breq	.+0      	; 0x1662 <_ZNK6String11lastIndexOfERKS_j+0x2e>
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	fc 01       	movw	r30, r24
    1668:	84 81       	ldd	r24, Z+4	; 0x04
    166a:	95 81       	ldd	r25, Z+5	; 0x05
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	01 f0       	breq	.+0      	; 0x1670 <_ZNK6String11lastIndexOfERKS_j+0x3c>
    1670:	8f 81       	ldd	r24, Y+7	; 0x07
    1672:	98 85       	ldd	r25, Y+8	; 0x08
    1674:	fc 01       	movw	r30, r24
    1676:	24 81       	ldd	r18, Z+4	; 0x04
    1678:	35 81       	ldd	r19, Z+5	; 0x05
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	fc 01       	movw	r30, r24
    1680:	84 81       	ldd	r24, Z+4	; 0x04
    1682:	95 81       	ldd	r25, Z+5	; 0x05
    1684:	82 17       	cp	r24, r18
    1686:	93 07       	cpc	r25, r19
    1688:	00 f4       	brcc	.+0      	; 0x168a <_ZNK6String11lastIndexOfERKS_j+0x56>
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	9f ef       	ldi	r25, 0xFF	; 255
    168e:	00 c0       	rjmp	.+0      	; 0x1690 <_ZNK6String11lastIndexOfERKS_j+0x5c>
	if (fromIndex >= len) fromIndex = len - 1;
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	fc 01       	movw	r30, r24
    1696:	24 81       	ldd	r18, Z+4	; 0x04
    1698:	35 81       	ldd	r19, Z+5	; 0x05
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	82 17       	cp	r24, r18
    16a0:	93 07       	cpc	r25, r19
    16a2:	00 f0       	brcs	.+0      	; 0x16a4 <_ZNK6String11lastIndexOfERKS_j+0x70>
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	fc 01       	movw	r30, r24
    16aa:	84 81       	ldd	r24, Z+4	; 0x04
    16ac:	95 81       	ldd	r25, Z+5	; 0x05
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	9a 87       	std	Y+10, r25	; 0x0a
    16b2:	89 87       	std	Y+9, r24	; 0x09
	int found = -1;
    16b4:	8f ef       	ldi	r24, 0xFF	; 255
    16b6:	9f ef       	ldi	r25, 0xFF	; 255
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	fc 01       	movw	r30, r24
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	00 c0       	rjmp	.+0      	; 0x16cc <_ZNK6String11lastIndexOfERKS_j+0x98>
		p = strstr(p, s2.buffer);
    16cc:	8f 81       	ldd	r24, Y+7	; 0x07
    16ce:	98 85       	ldd	r25, Y+8	; 0x08
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 81       	ld	r18, Z
    16d4:	31 81       	ldd	r19, Z+1	; 0x01
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	b9 01       	movw	r22, r18
    16dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03
		if (!p) break;
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	01 f0       	breq	.+0      	; 0x16ec <_ZNK6String11lastIndexOfERKS_j+0xb8>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	fc 01       	movw	r30, r24
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	a9 01       	movw	r20, r18
    16fc:	48 1b       	sub	r20, r24
    16fe:	59 0b       	sbc	r21, r25
    1700:	ca 01       	movw	r24, r20
    1702:	9c 01       	movw	r18, r24
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	82 17       	cp	r24, r18
    170a:	93 07       	cpc	r25, r19
    170c:	00 f0       	brcs	.+0      	; 0x170e <_ZNK6String11lastIndexOfERKS_j+0xda>
    170e:	2b 81       	ldd	r18, Y+3	; 0x03
    1710:	3c 81       	ldd	r19, Y+4	; 0x04
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	fc 01       	movw	r30, r24
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	a9 01       	movw	r20, r18
    171e:	48 1b       	sub	r20, r24
    1720:	59 0b       	sbc	r21, r25
    1722:	ca 01       	movw	r24, r20
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	fc 01       	movw	r30, r24
    1738:	20 81       	ld	r18, Z
    173a:	31 81       	ldd	r19, Z+1	; 0x01
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	28 0f       	add	r18, r24
    1742:	39 1f       	adc	r19, r25
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	28 17       	cp	r18, r24
    174c:	39 07       	cpc	r19, r25
    174e:	00 f4       	brcc	.+0      	; 0x1750 <_ZNK6String11lastIndexOfERKS_j+0x11c>
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	44 23       	and	r20, r20
    1754:	01 f0       	breq	.+0      	; 0x1756 <_ZNK6String11lastIndexOfERKS_j+0x122>
    1756:	00 c0       	rjmp	.+0      	; 0x1758 <_ZNK6String11lastIndexOfERKS_j+0x124>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <_ZNK6String11lastIndexOfERKS_j+0x126>
		p = strstr(p, s2.buffer);
		if (!p) break;
    175a:	00 00       	nop
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1760:	2a 96       	adiw	r28, 0x0a	; 10
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <_ZNK6String9substringEj>:

String String::substring( unsigned int left ) const
{
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <_ZNK6String9substringEj+0xa>
    177c:	00 d0       	rcall	.+0      	; 0x177e <_ZNK6String9substringEj+0xc>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	8c 01       	movw	r16, r24
    1784:	7a 83       	std	Y+2, r23	; 0x02
    1786:	69 83       	std	Y+1, r22	; 0x01
    1788:	5c 83       	std	Y+4, r21	; 0x04
    178a:	4b 83       	std	Y+3, r20	; 0x03
	return substring(left, len);
    178c:	c8 01       	movw	r24, r16
    178e:	29 81       	ldd	r18, Y+1	; 0x01
    1790:	3a 81       	ldd	r19, Y+2	; 0x02
    1792:	f9 01       	movw	r30, r18
    1794:	24 81       	ldd	r18, Z+4	; 0x04
    1796:	35 81       	ldd	r19, Z+5	; 0x05
    1798:	69 81       	ldd	r22, Y+1	; 0x01
    179a:	7a 81       	ldd	r23, Y+2	; 0x02
    179c:	4b 81       	ldd	r20, Y+3	; 0x03
    179e:	5c 81       	ldd	r21, Y+4	; 0x04
    17a0:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
    17a4:	c8 01       	movw	r24, r16
    17a6:	c8 01       	movw	r24, r16
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <_ZNK6String9substringEjj>:

String String::substring(unsigned int left, unsigned int right) const
{
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	60 97       	sbiw	r28, 0x10	; 16
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	8c 01       	movw	r16, r24
    17d4:	7c 87       	std	Y+12, r23	; 0x0c
    17d6:	6b 87       	std	Y+11, r22	; 0x0b
    17d8:	5e 87       	std	Y+14, r21	; 0x0e
    17da:	4d 87       	std	Y+13, r20	; 0x0d
    17dc:	38 8b       	std	Y+16, r19	; 0x10
    17de:	2f 87       	std	Y+15, r18	; 0x0f
	if (left > right) {
    17e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    17e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    17e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e6:	98 89       	ldd	r25, Y+16	; 0x10
    17e8:	82 17       	cp	r24, r18
    17ea:	93 07       	cpc	r25, r19
    17ec:	00 f4       	brcc	.+0      	; 0x17ee <_ZNK6String9substringEjj+0x34>
		unsigned int temp = right;
    17ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f0:	98 89       	ldd	r25, Y+16	; 0x10
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
		right = left;
    17f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fa:	98 8b       	std	Y+16, r25	; 0x10
    17fc:	8f 87       	std	Y+15, r24	; 0x0f
		left = temp;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	9e 87       	std	Y+14, r25	; 0x0e
    1804:	8d 87       	std	Y+13, r24	; 0x0d
	}
	String out;
    1806:	c8 01       	movw	r24, r16
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	b9 01       	movw	r22, r18
    180e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	if (left > len) return out;
    1812:	8b 85       	ldd	r24, Y+11	; 0x0b
    1814:	9c 85       	ldd	r25, Y+12	; 0x0c
    1816:	fc 01       	movw	r30, r24
    1818:	24 81       	ldd	r18, Z+4	; 0x04
    181a:	35 81       	ldd	r19, Z+5	; 0x05
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	00 f4       	brcc	.+0      	; 0x1826 <_ZNK6String9substringEjj+0x6c>
    1826:	00 c0       	rjmp	.+0      	; 0x1828 <_ZNK6String9substringEjj+0x6e>
	if (right > len) right = len;
    1828:	8b 85       	ldd	r24, Y+11	; 0x0b
    182a:	9c 85       	ldd	r25, Y+12	; 0x0c
    182c:	fc 01       	movw	r30, r24
    182e:	24 81       	ldd	r18, Z+4	; 0x04
    1830:	35 81       	ldd	r19, Z+5	; 0x05
    1832:	8f 85       	ldd	r24, Y+15	; 0x0f
    1834:	98 89       	ldd	r25, Y+16	; 0x10
    1836:	28 17       	cp	r18, r24
    1838:	39 07       	cpc	r19, r25
    183a:	00 f4       	brcc	.+0      	; 0x183c <_ZNK6String9substringEjj+0x82>
    183c:	8b 85       	ldd	r24, Y+11	; 0x0b
    183e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1840:	fc 01       	movw	r30, r24
    1842:	84 81       	ldd	r24, Z+4	; 0x04
    1844:	95 81       	ldd	r25, Z+5	; 0x05
    1846:	98 8b       	std	Y+16, r25	; 0x10
    1848:	8f 87       	std	Y+15, r24	; 0x0f
	char temp = buffer[right];  // save the replaced character
    184a:	8b 85       	ldd	r24, Y+11	; 0x0b
    184c:	9c 85       	ldd	r25, Y+12	; 0x0c
    184e:	fc 01       	movw	r30, r24
    1850:	20 81       	ld	r18, Z
    1852:	31 81       	ldd	r19, Z+1	; 0x01
    1854:	8f 85       	ldd	r24, Y+15	; 0x0f
    1856:	98 89       	ldd	r25, Y+16	; 0x10
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	fc 01       	movw	r30, r24
    185e:	80 81       	ld	r24, Z
    1860:	8b 83       	std	Y+3, r24	; 0x03
	buffer[right] = '\0';	
    1862:	8b 85       	ldd	r24, Y+11	; 0x0b
    1864:	9c 85       	ldd	r25, Y+12	; 0x0c
    1866:	fc 01       	movw	r30, r24
    1868:	20 81       	ld	r18, Z
    186a:	31 81       	ldd	r19, Z+1	; 0x01
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	98 89       	ldd	r25, Y+16	; 0x10
    1870:	82 0f       	add	r24, r18
    1872:	93 1f       	adc	r25, r19
    1874:	fc 01       	movw	r30, r24
    1876:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1878:	c8 01       	movw	r24, r16
    187a:	2b 85       	ldd	r18, Y+11	; 0x0b
    187c:	3c 85       	ldd	r19, Y+12	; 0x0c
    187e:	f9 01       	movw	r30, r18
    1880:	40 81       	ld	r20, Z
    1882:	51 81       	ldd	r21, Z+1	; 0x01
    1884:	2d 85       	ldd	r18, Y+13	; 0x0d
    1886:	3e 85       	ldd	r19, Y+14	; 0x0e
    1888:	24 0f       	add	r18, r20
    188a:	35 1f       	adc	r19, r21
    188c:	b9 01       	movw	r22, r18
    188e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	buffer[right] = temp;  //restore character
    1892:	8b 85       	ldd	r24, Y+11	; 0x0b
    1894:	9c 85       	ldd	r25, Y+12	; 0x0c
    1896:	fc 01       	movw	r30, r24
    1898:	20 81       	ld	r18, Z
    189a:	31 81       	ldd	r19, Z+1	; 0x01
    189c:	8f 85       	ldd	r24, Y+15	; 0x0f
    189e:	98 89       	ldd	r25, Y+16	; 0x10
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	2b 81       	ldd	r18, Y+3	; 0x03
    18a6:	fc 01       	movw	r30, r24
    18a8:	20 83       	st	Z, r18
	return out;
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <_ZNK6String9substringEjj+0xf2>
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    18ac:	00 00       	nop
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
	return out;
}
    18ae:	c8 01       	movw	r24, r16
    18b0:	c8 01       	movw	r24, r16
    18b2:	60 96       	adiw	r28, 0x10	; 16
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <_ZN6String7replaceEcc>:
/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <_ZN6String7replaceEcc+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <_ZN6String7replaceEcc+0x8>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <_ZN6String7replaceEcc+0xa>
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
    18da:	6d 83       	std	Y+5, r22	; 0x05
    18dc:	4e 83       	std	Y+6, r20	; 0x06
	if (!buffer) return;
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	fc 01       	movw	r30, r24
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	01 f0       	breq	.+0      	; 0x18ec <_ZN6String7replaceEcc+0x24>
	for (char *p = buffer; *p; p++) {
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	00 c0       	rjmp	.+0      	; 0x18fc <_ZN6String7replaceEcc+0x34>
		if (*p == find) *p = replace;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	fc 01       	movw	r30, r24
    1902:	90 81       	ld	r25, Z
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	98 17       	cp	r25, r24
    1908:	01 f4       	brne	.+0      	; 0x190a <_ZN6String7replaceEcc+0x42>
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	2e 81       	ldd	r18, Y+6	; 0x06
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	fc 01       	movw	r30, r24
    1924:	90 81       	ld	r25, Z
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	99 23       	and	r25, r25
    192a:	01 f4       	brne	.+0      	; 0x192c <_ZN6String7replaceEcc+0x64>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	88 23       	and	r24, r24
    1930:	01 f4       	brne	.+0      	; 0x1932 <_ZN6String7replaceEcc+0x6a>
    1932:	00 c0       	rjmp	.+0      	; 0x1934 <_ZN6String7replaceEcc+0x6c>
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    1934:	00 00       	nop
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}
    1936:	26 96       	adiw	r28, 0x06	; 6
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <_ZN6String7replaceERKS_S1_>:

void String::replace(const String& find, const String& replace)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	64 97       	sbiw	r28, 0x14	; 20
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	98 8b       	std	Y+16, r25	; 0x10
    195e:	8f 87       	std	Y+15, r24	; 0x0f
    1960:	7a 8b       	std	Y+18, r23	; 0x12
    1962:	69 8b       	std	Y+17, r22	; 0x11
    1964:	5c 8b       	std	Y+20, r21	; 0x14
    1966:	4b 8b       	std	Y+19, r20	; 0x13
	if (len == 0 || find.len == 0) return;
    1968:	8f 85       	ldd	r24, Y+15	; 0x0f
    196a:	98 89       	ldd	r25, Y+16	; 0x10
    196c:	fc 01       	movw	r30, r24
    196e:	84 81       	ldd	r24, Z+4	; 0x04
    1970:	95 81       	ldd	r25, Z+5	; 0x05
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	01 f4       	brne	.+0      	; 0x1976 <_ZN6String7replaceERKS_S1_+0x2e>
    1976:	00 c0       	rjmp	.+0      	; 0x1978 <_ZN6String7replaceERKS_S1_+0x30>
    1978:	89 89       	ldd	r24, Y+17	; 0x11
    197a:	9a 89       	ldd	r25, Y+18	; 0x12
    197c:	fc 01       	movw	r30, r24
    197e:	84 81       	ldd	r24, Z+4	; 0x04
    1980:	95 81       	ldd	r25, Z+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	01 f4       	brne	.+0      	; 0x1986 <_ZN6String7replaceERKS_S1_+0x3e>
    1986:	00 c0       	rjmp	.+0      	; 0x1988 <_ZN6String7replaceERKS_S1_+0x40>
	int diff = replace.len - find.len;
    1988:	8b 89       	ldd	r24, Y+19	; 0x13
    198a:	9c 89       	ldd	r25, Y+20	; 0x14
    198c:	fc 01       	movw	r30, r24
    198e:	24 81       	ldd	r18, Z+4	; 0x04
    1990:	35 81       	ldd	r19, Z+5	; 0x05
    1992:	89 89       	ldd	r24, Y+17	; 0x11
    1994:	9a 89       	ldd	r25, Y+18	; 0x12
    1996:	fc 01       	movw	r30, r24
    1998:	84 81       	ldd	r24, Z+4	; 0x04
    199a:	95 81       	ldd	r25, Z+5	; 0x05
    199c:	a9 01       	movw	r20, r18
    199e:	48 1b       	sub	r20, r24
    19a0:	59 0b       	sbc	r21, r25
    19a2:	ca 01       	movw	r24, r20
    19a4:	9a 87       	std	Y+10, r25	; 0x0a
    19a6:	89 87       	std	Y+9, r24	; 0x09
	char *readFrom = buffer;
    19a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19aa:	98 89       	ldd	r25, Y+16	; 0x10
    19ac:	fc 01       	movw	r30, r24
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	89 83       	std	Y+1, r24	; 0x01
	char *foundAt;
	if (diff == 0) {
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	01 f4       	brne	.+0      	; 0x19be <_ZN6String7replaceERKS_S1_+0x76>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    19be:	00 c0       	rjmp	.+0      	; 0x19c0 <_ZN6String7replaceERKS_S1_+0x78>
			memcpy(foundAt, replace.buffer, replace.len);
    19c0:	8b 89       	ldd	r24, Y+19	; 0x13
    19c2:	9c 89       	ldd	r25, Y+20	; 0x14
    19c4:	fc 01       	movw	r30, r24
    19c6:	40 81       	ld	r20, Z
    19c8:	51 81       	ldd	r21, Z+1	; 0x01
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	fc 01       	movw	r30, r24
    19d0:	24 81       	ldd	r18, Z+4	; 0x04
    19d2:	35 81       	ldd	r19, Z+5	; 0x05
    19d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19d8:	ba 01       	movw	r22, r20
    19da:	a9 01       	movw	r20, r18
    19dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
			readFrom = foundAt + replace.len;
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	9c 89       	ldd	r25, Y+20	; 0x14
    19e4:	fc 01       	movw	r30, r24
    19e6:	84 81       	ldd	r24, Z+4	; 0x04
    19e8:	95 81       	ldd	r25, Z+5	; 0x05
    19ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    19ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    19ee:	82 0f       	add	r24, r18
    19f0:	93 1f       	adc	r25, r19
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    19f6:	89 89       	ldd	r24, Y+17	; 0x11
    19f8:	9a 89       	ldd	r25, Y+18	; 0x12
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 81       	ld	r18, Z
    19fe:	31 81       	ldd	r19, Z+1	; 0x01
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	b9 01       	movw	r22, r18
    1a06:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1a0a:	9c 87       	std	Y+12, r25	; 0x0c
    1a0c:	8b 87       	std	Y+11, r24	; 0x0b
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
    1a10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a12:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	01 f4       	brne	.+0      	; 0x1a18 <_ZN6String7replaceERKS_S1_+0xd0>
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	22 23       	and	r18, r18
    1a1c:	01 f4       	brne	.+0      	; 0x1a1e <_ZN6String7replaceERKS_S1_+0xd6>
    1a1e:	00 c0       	rjmp	.+0      	; 0x1a20 <_ZN6String7replaceERKS_S1_+0xd8>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	99 23       	and	r25, r25
    1a26:	04 f0       	brlt	.+0      	; 0x1a28 <_ZN6String7replaceERKS_S1_+0xe0>
    1a28:	00 c0       	rjmp	.+0      	; 0x1a2a <_ZN6String7replaceERKS_S1_+0xe2>
		char *writeTo = buffer;
    1a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2c:	98 89       	ldd	r25, Y+16	; 0x10
    1a2e:	fc 01       	movw	r30, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	9c 83       	std	Y+4, r25	; 0x04
    1a36:	8b 83       	std	Y+3, r24	; 0x03
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1a38:	00 c0       	rjmp	.+0      	; 0x1a3a <_ZN6String7replaceERKS_S1_+0xf2>
			unsigned int n = foundAt - readFrom;
    1a3a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a3c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	a9 01       	movw	r20, r18
    1a44:	48 1b       	sub	r20, r24
    1a46:	59 0b       	sbc	r21, r25
    1a48:	ca 01       	movw	r24, r20
    1a4a:	9e 87       	std	Y+14, r25	; 0x0e
    1a4c:	8d 87       	std	Y+13, r24	; 0x0d
			memcpy(writeTo, readFrom, n);
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	49 81       	ldd	r20, Y+1	; 0x01
    1a54:	5a 81       	ldd	r21, Y+2	; 0x02
    1a56:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a58:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a5a:	ba 01       	movw	r22, r20
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
			writeTo += n;
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	82 0f       	add	r24, r18
    1a6c:	93 1f       	adc	r25, r19
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
			memcpy(writeTo, replace.buffer, replace.len);
    1a72:	8b 89       	ldd	r24, Y+19	; 0x13
    1a74:	9c 89       	ldd	r25, Y+20	; 0x14
    1a76:	fc 01       	movw	r30, r24
    1a78:	40 81       	ld	r20, Z
    1a7a:	51 81       	ldd	r21, Z+1	; 0x01
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	fc 01       	movw	r30, r24
    1a82:	24 81       	ldd	r18, Z+4	; 0x04
    1a84:	35 81       	ldd	r19, Z+5	; 0x05
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	ba 01       	movw	r22, r20
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
			writeTo += replace.len;
    1a92:	8b 89       	ldd	r24, Y+19	; 0x13
    1a94:	9c 89       	ldd	r25, Y+20	; 0x14
    1a96:	fc 01       	movw	r30, r24
    1a98:	84 81       	ldd	r24, Z+4	; 0x04
    1a9a:	95 81       	ldd	r25, Z+5	; 0x05
    1a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa0:	82 0f       	add	r24, r18
    1aa2:	93 1f       	adc	r25, r19
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
			readFrom = foundAt + find.len;
    1aa8:	89 89       	ldd	r24, Y+17	; 0x11
    1aaa:	9a 89       	ldd	r25, Y+18	; 0x12
    1aac:	fc 01       	movw	r30, r24
    1aae:	84 81       	ldd	r24, Z+4	; 0x04
    1ab0:	95 81       	ldd	r25, Z+5	; 0x05
    1ab2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ab4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ab6:	82 0f       	add	r24, r18
    1ab8:	93 1f       	adc	r25, r19
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
			len += diff;
    1abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac0:	98 89       	ldd	r25, Y+16	; 0x10
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	24 81       	ldd	r18, Z+4	; 0x04
    1ac6:	35 81       	ldd	r19, Z+5	; 0x05
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	28 0f       	add	r18, r24
    1ace:	39 1f       	adc	r19, r25
    1ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad2:	98 89       	ldd	r25, Y+16	; 0x10
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	35 83       	std	Z+5, r19	; 0x05
    1ad8:	24 83       	std	Z+4, r18	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1ada:	89 89       	ldd	r24, Y+17	; 0x11
    1adc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ade:	fc 01       	movw	r30, r24
    1ae0:	20 81       	ld	r18, Z
    1ae2:	31 81       	ldd	r19, Z+1	; 0x01
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	b9 01       	movw	r22, r18
    1aea:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1aee:	9c 87       	std	Y+12, r25	; 0x0c
    1af0:	8b 87       	std	Y+11, r24	; 0x0b
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1af6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	01 f4       	brne	.+0      	; 0x1afc <_ZN6String7replaceERKS_S1_+0x1b4>
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	22 23       	and	r18, r18
    1b00:	01 f0       	breq	.+0      	; 0x1b02 <_ZN6String7replaceERKS_S1_+0x1ba>
    1b02:	00 c0       	rjmp	.+0      	; 0x1b04 <_ZN6String7replaceERKS_S1_+0x1bc>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	29 81       	ldd	r18, Y+1	; 0x01
    1b0a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0c:	b9 01       	movw	r22, r18
    1b0e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1b12:	00 c0       	rjmp	.+0      	; 0x1b14 <_ZN6String7replaceERKS_S1_+0x1cc>
	} else {
		unsigned int size = len; // compute size needed for result
    1b14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b16:	98 89       	ldd	r25, Y+16	; 0x10
    1b18:	fc 01       	movw	r30, r24
    1b1a:	84 81       	ldd	r24, Z+4	; 0x04
    1b1c:	95 81       	ldd	r25, Z+5	; 0x05
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <_ZN6String7replaceERKS_S1_+0x1dc>
			readFrom = foundAt + find.len;
    1b24:	89 89       	ldd	r24, Y+17	; 0x11
    1b26:	9a 89       	ldd	r25, Y+18	; 0x12
    1b28:	fc 01       	movw	r30, r24
    1b2a:	84 81       	ldd	r24, Z+4	; 0x04
    1b2c:	95 81       	ldd	r25, Z+5	; 0x05
    1b2e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b30:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b32:	82 0f       	add	r24, r18
    1b34:	93 1f       	adc	r25, r19
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
			size += diff;
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b40:	3e 81       	ldd	r19, Y+6	; 0x06
    1b42:	82 0f       	add	r24, r18
    1b44:	93 1f       	adc	r25, r19
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1b4a:	89 89       	ldd	r24, Y+17	; 0x11
    1b4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4e:	fc 01       	movw	r30, r24
    1b50:	20 81       	ld	r18, Z
    1b52:	31 81       	ldd	r19, Z+1	; 0x01
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	b9 01       	movw	r22, r18
    1b5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1b5e:	9c 87       	std	Y+12, r25	; 0x0c
    1b60:	8b 87       	std	Y+11, r24	; 0x0b
    1b62:	21 e0       	ldi	r18, 0x01	; 1
    1b64:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b66:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	01 f4       	brne	.+0      	; 0x1b6c <_ZN6String7replaceERKS_S1_+0x224>
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	22 23       	and	r18, r18
    1b70:	01 f4       	brne	.+0      	; 0x1b72 <_ZN6String7replaceERKS_S1_+0x22a>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    1b72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b74:	98 89       	ldd	r25, Y+16	; 0x10
    1b76:	fc 01       	movw	r30, r24
    1b78:	24 81       	ldd	r18, Z+4	; 0x04
    1b7a:	35 81       	ldd	r19, Z+5	; 0x05
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	28 17       	cp	r18, r24
    1b82:	39 07       	cpc	r19, r25
    1b84:	01 f4       	brne	.+0      	; 0x1b86 <_ZN6String7replaceERKS_S1_+0x23e>
    1b86:	00 c0       	rjmp	.+0      	; 0x1b88 <_ZN6String7replaceERKS_S1_+0x240>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    1b88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8a:	98 89       	ldd	r25, Y+16	; 0x10
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	22 81       	ldd	r18, Z+2	; 0x02
    1b90:	33 81       	ldd	r19, Z+3	; 0x03
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	28 17       	cp	r18, r24
    1b98:	39 07       	cpc	r19, r25
    1b9a:	00 f4       	brcc	.+0      	; 0x1b9c <_ZN6String7replaceERKS_S1_+0x254>
    1b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9e:	98 89       	ldd	r25, Y+16	; 0x10
    1ba0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba4:	b9 01       	movw	r22, r18
    1ba6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1baa:	88 23       	and	r24, r24
    1bac:	01 f4       	brne	.+0      	; 0x1bae <_ZN6String7replaceERKS_S1_+0x266>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	00 c0       	rjmp	.+0      	; 0x1bb2 <_ZN6String7replaceERKS_S1_+0x26a>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	88 23       	and	r24, r24
    1bb6:	01 f0       	breq	.+0      	; 0x1bb8 <_ZN6String7replaceERKS_S1_+0x270>
    1bb8:	00 c0       	rjmp	.+0      	; 0x1bba <_ZN6String7replaceERKS_S1_+0x272>
		int index = len - 1;
    1bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbc:	98 89       	ldd	r25, Y+16	; 0x10
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	84 81       	ldd	r24, Z+4	; 0x04
    1bc2:	95 81       	ldd	r25, Z+5	; 0x05
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	98 87       	std	Y+8, r25	; 0x08
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    1bca:	00 c0       	rjmp	.+0      	; 0x1bcc <_ZN6String7replaceERKS_S1_+0x284>
			readFrom = buffer + index + find.len;
    1bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bce:	98 89       	ldd	r25, Y+16	; 0x10
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	20 81       	ld	r18, Z
    1bd4:	31 81       	ldd	r19, Z+1	; 0x01
    1bd6:	89 89       	ldd	r24, Y+17	; 0x11
    1bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bda:	fc 01       	movw	r30, r24
    1bdc:	44 81       	ldd	r20, Z+4	; 0x04
    1bde:	55 81       	ldd	r21, Z+5	; 0x05
    1be0:	8f 81       	ldd	r24, Y+7	; 0x07
    1be2:	98 85       	ldd	r25, Y+8	; 0x08
    1be4:	84 0f       	add	r24, r20
    1be6:	95 1f       	adc	r25, r21
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	29 81       	ldd	r18, Y+1	; 0x01
    1bf6:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf8:	82 0f       	add	r24, r18
    1bfa:	93 1f       	adc	r25, r19
    1bfc:	2f 85       	ldd	r18, Y+15	; 0x0f
    1bfe:	38 89       	ldd	r19, Y+16	; 0x10
    1c00:	f9 01       	movw	r30, r18
    1c02:	44 81       	ldd	r20, Z+4	; 0x04
    1c04:	55 81       	ldd	r21, Z+5	; 0x05
    1c06:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c08:	38 89       	ldd	r19, Y+16	; 0x10
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	20 81       	ld	r18, Z
    1c0e:	31 81       	ldd	r19, Z+1	; 0x01
    1c10:	b9 01       	movw	r22, r18
    1c12:	29 81       	ldd	r18, Y+1	; 0x01
    1c14:	3a 81       	ldd	r19, Y+2	; 0x02
    1c16:	fb 01       	movw	r30, r22
    1c18:	e2 1b       	sub	r30, r18
    1c1a:	f3 0b       	sbc	r31, r19
    1c1c:	9f 01       	movw	r18, r30
    1c1e:	24 0f       	add	r18, r20
    1c20:	35 1f       	adc	r19, r21
    1c22:	49 81       	ldd	r20, Y+1	; 0x01
    1c24:	5a 81       	ldd	r21, Y+2	; 0x02
    1c26:	ba 01       	movw	r22, r20
    1c28:	a9 01       	movw	r20, r18
    1c2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
			len += diff;
    1c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c30:	98 89       	ldd	r25, Y+16	; 0x10
    1c32:	fc 01       	movw	r30, r24
    1c34:	24 81       	ldd	r18, Z+4	; 0x04
    1c36:	35 81       	ldd	r19, Z+5	; 0x05
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	28 0f       	add	r18, r24
    1c3e:	39 1f       	adc	r19, r25
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	98 89       	ldd	r25, Y+16	; 0x10
    1c44:	fc 01       	movw	r30, r24
    1c46:	35 83       	std	Z+5, r19	; 0x05
    1c48:	24 83       	std	Z+4, r18	; 0x04
			buffer[len] = 0;
    1c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4c:	98 89       	ldd	r25, Y+16	; 0x10
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 81       	ld	r18, Z
    1c52:	31 81       	ldd	r19, Z+1	; 0x01
    1c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c56:	98 89       	ldd	r25, Y+16	; 0x10
    1c58:	fc 01       	movw	r30, r24
    1c5a:	84 81       	ldd	r24, Z+4	; 0x04
    1c5c:	95 81       	ldd	r25, Z+5	; 0x05
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	fc 01       	movw	r30, r24
    1c64:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    1c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c68:	98 89       	ldd	r25, Y+16	; 0x10
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	20 81       	ld	r18, Z
    1c6e:	31 81       	ldd	r19, Z+1	; 0x01
    1c70:	8f 81       	ldd	r24, Y+7	; 0x07
    1c72:	98 85       	ldd	r25, Y+8	; 0x08
    1c74:	82 0f       	add	r24, r18
    1c76:	93 1f       	adc	r25, r19
    1c78:	2b 89       	ldd	r18, Y+19	; 0x13
    1c7a:	3c 89       	ldd	r19, Y+20	; 0x14
    1c7c:	f9 01       	movw	r30, r18
    1c7e:	40 81       	ld	r20, Z
    1c80:	51 81       	ldd	r21, Z+1	; 0x01
    1c82:	2b 89       	ldd	r18, Y+19	; 0x13
    1c84:	3c 89       	ldd	r19, Y+20	; 0x14
    1c86:	f9 01       	movw	r30, r18
    1c88:	24 81       	ldd	r18, Z+4	; 0x04
    1c8a:	35 81       	ldd	r19, Z+5	; 0x05
    1c8c:	ba 01       	movw	r22, r20
    1c8e:	a9 01       	movw	r20, r18
    1c90:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
			index--;
    1c94:	8f 81       	ldd	r24, Y+7	; 0x07
    1c96:	98 85       	ldd	r25, Y+8	; 0x08
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	98 87       	std	Y+8, r25	; 0x08
    1c9c:	8f 83       	std	Y+7, r24	; 0x07
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    1c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca0:	98 85       	ldd	r25, Y+8	; 0x08
    1ca2:	99 23       	and	r25, r25
    1ca4:	04 f0       	brlt	.+0      	; 0x1ca6 <_ZN6String7replaceERKS_S1_+0x35e>
    1ca6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca8:	38 85       	ldd	r19, Y+8	; 0x08
    1caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cac:	98 89       	ldd	r25, Y+16	; 0x10
    1cae:	49 89       	ldd	r20, Y+17	; 0x11
    1cb0:	5a 89       	ldd	r21, Y+18	; 0x12
    1cb2:	ba 01       	movw	r22, r20
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1cba:	98 87       	std	Y+8, r25	; 0x08
    1cbc:	8f 83       	std	Y+7, r24	; 0x07
    1cbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc0:	98 85       	ldd	r25, Y+8	; 0x08
    1cc2:	99 23       	and	r25, r25
    1cc4:	04 f0       	brlt	.+0      	; 0x1cc6 <_ZN6String7replaceERKS_S1_+0x37e>
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	00 c0       	rjmp	.+0      	; 0x1cca <_ZN6String7replaceERKS_S1_+0x382>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	88 23       	and	r24, r24
    1cce:	01 f0       	breq	.+0      	; 0x1cd0 <_ZN6String7replaceERKS_S1_+0x388>
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <_ZN6String7replaceERKS_S1_+0x38a>
    1cd2:	00 c0       	rjmp	.+0      	; 0x1cd4 <_ZN6String7replaceERKS_S1_+0x38c>
	}
}

void String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return;
    1cd4:	00 00       	nop
    1cd6:	00 c0       	rjmp	.+0      	; 0x1cd8 <_ZN6String7replaceERKS_S1_+0x390>
    1cd8:	00 00       	nop
    1cda:	00 c0       	rjmp	.+0      	; 0x1cdc <_ZN6String7replaceERKS_S1_+0x394>
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    1cdc:	00 00       	nop
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <_ZN6String7replaceERKS_S1_+0x398>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    1ce0:	00 00       	nop
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    1ce2:	64 96       	adiw	r28, 0x14	; 20
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <_ZN6String11toLowerCaseEv+0x6>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <_ZN6String11toLowerCaseEv+0x8>
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
	if (!buffer) return;
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	fc 01       	movw	r30, r24
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	01 f0       	breq	.+0      	; 0x1d12 <_ZN6String11toLowerCaseEv+0x1e>
	for (char *p = buffer; *p; p++) {
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	fc 01       	movw	r30, r24
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	00 c0       	rjmp	.+0      	; 0x1d22 <_ZN6String11toLowerCaseEv+0x2e>
		*p = tolower(*p);
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	fc 01       	movw	r30, r24
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1d32:	28 2f       	mov	r18, r24
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	fc 01       	movw	r30, r24
    1d3a:	20 83       	st	Z, r18
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	90 81       	ld	r25, Z
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	99 23       	and	r25, r25
    1d52:	01 f4       	brne	.+0      	; 0x1d54 <_ZN6String11toLowerCaseEv+0x60>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	88 23       	and	r24, r24
    1d58:	01 f4       	brne	.+0      	; 0x1d5a <_ZN6String11toLowerCaseEv+0x66>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <_ZN6String11toLowerCaseEv+0x68>
	}
}

void String::toLowerCase(void)
{
	if (!buffer) return;
    1d5c:	00 00       	nop
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <_ZN6String11toUpperCaseEv+0x6>
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <_ZN6String11toUpperCaseEv+0x8>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
	if (!buffer) return;
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	fc 01       	movw	r30, r24
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	01 f0       	breq	.+0      	; 0x1d8a <_ZN6String11toUpperCaseEv+0x1e>
	for (char *p = buffer; *p; p++) {
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	fc 01       	movw	r30, r24
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	00 c0       	rjmp	.+0      	; 0x1d9a <_ZN6String11toUpperCaseEv+0x2e>
		*p = toupper(*p);
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	fc 01       	movw	r30, r24
    1da0:	80 81       	ld	r24, Z
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1daa:	28 2f       	mov	r18, r24
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 83       	st	Z, r18
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	90 81       	ld	r25, Z
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	99 23       	and	r25, r25
    1dca:	01 f4       	brne	.+0      	; 0x1dcc <_ZN6String11toUpperCaseEv+0x60>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	88 23       	and	r24, r24
    1dd0:	01 f4       	brne	.+0      	; 0x1dd2 <_ZN6String11toUpperCaseEv+0x66>
    1dd2:	00 c0       	rjmp	.+0      	; 0x1dd4 <_ZN6String11toUpperCaseEv+0x68>
	}
}

void String::toUpperCase(void)
{
	if (!buffer) return;
    1dd4:	00 00       	nop
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <_ZN6String4trimEv>:

void String::trim(void)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <_ZN6String4trimEv+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <_ZN6String4trimEv+0x8>
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <_ZN6String4trimEv+0xa>
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	9e 83       	std	Y+6, r25	; 0x06
    1df4:	8d 83       	std	Y+5, r24	; 0x05
	if (!buffer || len == 0) return;
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	01 f4       	brne	.+0      	; 0x1e04 <_ZN6String4trimEv+0x20>
    1e04:	00 c0       	rjmp	.+0      	; 0x1e06 <_ZN6String4trimEv+0x22>
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	84 81       	ldd	r24, Z+4	; 0x04
    1e0e:	95 81       	ldd	r25, Z+5	; 0x05
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	01 f4       	brne	.+0      	; 0x1e14 <_ZN6String4trimEv+0x30>
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <_ZN6String4trimEv+0x32>
	char *begin = buffer;
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
	while (isspace(*begin)) begin++;
    1e24:	00 c0       	rjmp	.+0      	; 0x1e26 <_ZN6String4trimEv+0x42>
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	fc 01       	movw	r30, r24
    1e36:	80 81       	ld	r24, Z
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1e40:	21 e0       	ldi	r18, 0x01	; 1
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	01 f4       	brne	.+0      	; 0x1e46 <_ZN6String4trimEv+0x62>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	22 23       	and	r18, r18
    1e4a:	01 f4       	brne	.+0      	; 0x1e4c <_ZN6String4trimEv+0x68>
	char *end = buffer + len - 1;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 81       	ld	r18, Z
    1e54:	31 81       	ldd	r19, Z+1	; 0x01
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	84 81       	ldd	r24, Z+4	; 0x04
    1e5e:	95 81       	ldd	r25, Z+5	; 0x05
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	82 0f       	add	r24, r18
    1e64:	93 1f       	adc	r25, r19
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
	while (isspace(*end) && end >= begin) end--;
    1e6a:	00 c0       	rjmp	.+0      	; 0x1e6c <_ZN6String4trimEv+0x88>
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	8b 83       	std	Y+3, r24	; 0x03
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	01 f0       	breq	.+0      	; 0x1e8a <_ZN6String4trimEv+0xa6>
    1e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	28 17       	cp	r18, r24
    1e94:	39 07       	cpc	r19, r25
    1e96:	00 f0       	brcs	.+0      	; 0x1e98 <_ZN6String4trimEv+0xb4>
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	00 c0       	rjmp	.+0      	; 0x1e9c <_ZN6String4trimEv+0xb8>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	88 23       	and	r24, r24
    1ea0:	01 f4       	brne	.+0      	; 0x1ea2 <_ZN6String4trimEv+0xbe>
	len = end + 1 - begin;
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	a9 01       	movw	r20, r18
    1eb0:	48 1b       	sub	r20, r24
    1eb2:	59 0b       	sbc	r21, r25
    1eb4:	ca 01       	movw	r24, r20
    1eb6:	9c 01       	movw	r18, r24
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	35 83       	std	Z+5, r19	; 0x05
    1ec0:	24 83       	std	Z+4, r18	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 81       	ld	r18, Z
    1eca:	31 81       	ldd	r19, Z+1	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	28 17       	cp	r18, r24
    1ed2:	39 07       	cpc	r19, r25
    1ed4:	00 f4       	brcc	.+0      	; 0x1ed6 <_ZN6String4trimEv+0xf2>
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	fc 01       	movw	r30, r24
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ee2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	24 81       	ldd	r18, Z+4	; 0x04
    1ee8:	35 81       	ldd	r19, Z+5	; 0x05
    1eea:	49 81       	ldd	r20, Y+1	; 0x01
    1eec:	5a 81       	ldd	r21, Y+2	; 0x02
    1eee:	ba 01       	movw	r22, r20
    1ef0:	a9 01       	movw	r20, r18
    1ef2:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
	buffer[len] = 0;
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	fc 01       	movw	r30, r24
    1efc:	20 81       	ld	r18, Z
    1efe:	31 81       	ldd	r19, Z+1	; 0x01
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	fc 01       	movw	r30, r24
    1f06:	84 81       	ldd	r24, Z+4	; 0x04
    1f08:	95 81       	ldd	r25, Z+5	; 0x05
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	fc 01       	movw	r30, r24
    1f10:	10 82       	st	Z, r1
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <_ZN6String4trimEv+0x130>
	}
}

void String::trim(void)
{
	if (!buffer || len == 0) return;
    1f14:	00 00       	nop
    1f16:	00 c0       	rjmp	.+0      	; 0x1f18 <_ZN6String4trimEv+0x134>
    1f18:	00 00       	nop
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
    1f1a:	26 96       	adiw	r28, 0x06	; 6
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <_ZNK6String5toIntEv+0x6>
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
	if (buffer) return atol(buffer);
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	fc 01       	movw	r30, r24
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	01 f0       	breq	.+0      	; 0x1f48 <_ZNK6String5toIntEv+0x1c>
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	00 c0       	rjmp	.+0      	; 0x1f5c <_ZNK6String5toIntEv+0x30>
	return 0;
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e0       	ldi	r26, 0x00	; 0
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
}
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000026  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  0000005a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000069  2**0
                  ALLOC
  3 .stab         000005ac  00000000  00000000  0000006c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ca8  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <main>:
#include <Arduino.h>

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	init();
   8:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
   c:	0e 94 00 00 	call	0	; 0x0 <main>
  10:	00 c0       	rjmp	.+0      	; 0x12 <main+0x12>
    
	for (;;) {
  12:	00 00       	nop
		loop();
  14:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  18:	80 e0       	ldi	r24, 0x00	; 0
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	00 97       	sbiw	r24, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <main+0x20>
  20:	0e 94 00 00 	call	0	; 0x0 <main>
	USB.attach();
#endif
	
	setup();
    
	for (;;) {
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZL2A7+0x18>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000000e8  2**0
                  ALLOC
  3 .stab         00000300  00000000  00000000  000000e8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000589  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Znwj+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
  return malloc(size);
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	9a 81       	ldd	r25, Y+2	; 0x02
  12:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

00000020 <_ZdlPv>:

void operator delete(void * ptr)
{
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	00 d0       	rcall	.+0      	; 0x26 <_ZdlPv+0x6>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	9a 83       	std	Y+2, r25	; 0x02
  2c:	89 83       	std	Y+1, r24	; 0x01
  free(ptr);
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	9a 81       	ldd	r25, Y+2	; 0x02
  32:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
} 
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	cf 91       	pop	r28
  3c:	df 91       	pop	r29
  3e:	08 95       	ret

00000040 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
  40:	df 93       	push	r29
  42:	cf 93       	push	r28
  44:	00 d0       	rcall	.+0      	; 0x46 <__cxa_guard_acquire+0x6>
  46:	cd b7       	in	r28, 0x3d	; 61
  48:	de b7       	in	r29, 0x3e	; 62
  4a:	9a 83       	std	Y+2, r25	; 0x02
  4c:	89 83       	std	Y+1, r24	; 0x01
  4e:	89 81       	ldd	r24, Y+1	; 0x01
  50:	9a 81       	ldd	r25, Y+2	; 0x02
  52:	fc 01       	movw	r30, r24
  54:	20 81       	ld	r18, Z
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	22 23       	and	r18, r18
  5c:	01 f0       	breq	.+0      	; 0x5e <__cxa_guard_acquire+0x1e>
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	0f 90       	pop	r0
  64:	0f 90       	pop	r0
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

0000006c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <__cxa_guard_release+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	9a 81       	ldd	r25, Y+2	; 0x02
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	fc 01       	movw	r30, r24
  82:	20 83       	st	Z, r18
  84:	0f 90       	pop	r0
  86:	0f 90       	pop	r0
  88:	cf 91       	pop	r28
  8a:	df 91       	pop	r29
  8c:	08 95       	ret

0000008e <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	00 d0       	rcall	.+0      	; 0x94 <__cxa_guard_abort+0x6>
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	0f 90       	pop	r0
  9e:	0f 90       	pop	r0
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	08 95       	ret

000000a6 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00000000  00000000  0000042b  2**0
                  ALLOC
  3 .stab         000009b4  00000000  00000000  0000042c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d8d  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	9f 93       	push	r25
   e:	af 93       	push	r26
  10:	bf 93       	push	r27
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	25 97       	sbiw	r28, 0x05	; 5
  1c:	de bf       	out	0x3e, r29	; 62
  1e:	cd bf       	out	0x3d, r28	; 61
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	80 91 00 00 	lds	r24, 0x0000
  24:	90 91 00 00 	lds	r25, 0x0000
  28:	a0 91 00 00 	lds	r26, 0x0000
  2c:	b0 91 00 00 	lds	r27, 0x0000
  30:	89 83       	std	Y+1, r24	; 0x01
  32:	9a 83       	std	Y+2, r25	; 0x02
  34:	ab 83       	std	Y+3, r26	; 0x03
  36:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char f = timer0_fract;
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	8d 83       	std	Y+5, r24	; 0x05

	m += MILLIS_INC;
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	9a 81       	ldd	r25, Y+2	; 0x02
  42:	ab 81       	ldd	r26, Y+3	; 0x03
  44:	bc 81       	ldd	r27, Y+4	; 0x04
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	a1 1d       	adc	r26, r1
  4a:	b1 1d       	adc	r27, r1
  4c:	89 83       	std	Y+1, r24	; 0x01
  4e:	9a 83       	std	Y+2, r25	; 0x02
  50:	ab 83       	std	Y+3, r26	; 0x03
  52:	bc 83       	std	Y+4, r27	; 0x04
	f += FRACT_INC;
  54:	8d 81       	ldd	r24, Y+5	; 0x05
  56:	8d 5f       	subi	r24, 0xFD	; 253
  58:	8d 83       	std	Y+5, r24	; 0x05
	if (f >= FRACT_MAX) {
  5a:	8d 81       	ldd	r24, Y+5	; 0x05
  5c:	8d 37       	cpi	r24, 0x7D	; 125
  5e:	00 f0       	brcs	.+0      	; 0x60 <__vector_16+0x60>
		f -= FRACT_MAX;
  60:	8d 81       	ldd	r24, Y+5	; 0x05
  62:	8d 57       	subi	r24, 0x7D	; 125
  64:	8d 83       	std	Y+5, r24	; 0x05
		m += 1;
  66:	89 81       	ldd	r24, Y+1	; 0x01
  68:	9a 81       	ldd	r25, Y+2	; 0x02
  6a:	ab 81       	ldd	r26, Y+3	; 0x03
  6c:	bc 81       	ldd	r27, Y+4	; 0x04
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	a1 1d       	adc	r26, r1
  72:	b1 1d       	adc	r27, r1
  74:	89 83       	std	Y+1, r24	; 0x01
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	ab 83       	std	Y+3, r26	; 0x03
  7a:	bc 83       	std	Y+4, r27	; 0x04
	}

	timer0_fract = f;
  7c:	8d 81       	ldd	r24, Y+5	; 0x05
  7e:	80 93 00 00 	sts	0x0000, r24
	timer0_millis = m;
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	9a 81       	ldd	r25, Y+2	; 0x02
  86:	ab 81       	ldd	r26, Y+3	; 0x03
  88:	bc 81       	ldd	r27, Y+4	; 0x04
  8a:	80 93 00 00 	sts	0x0000, r24
  8e:	90 93 00 00 	sts	0x0000, r25
  92:	a0 93 00 00 	sts	0x0000, r26
  96:	b0 93 00 00 	sts	0x0000, r27
	timer0_overflow_count++;
  9a:	80 91 00 00 	lds	r24, 0x0000
  9e:	90 91 00 00 	lds	r25, 0x0000
  a2:	a0 91 00 00 	lds	r26, 0x0000
  a6:	b0 91 00 00 	lds	r27, 0x0000
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	a1 1d       	adc	r26, r1
  ae:	b1 1d       	adc	r27, r1
  b0:	80 93 00 00 	sts	0x0000, r24
  b4:	90 93 00 00 	sts	0x0000, r25
  b8:	a0 93 00 00 	sts	0x0000, r26
  bc:	b0 93 00 00 	sts	0x0000, r27
}
  c0:	25 96       	adiw	r28, 0x05	; 5
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	bf 91       	pop	r27
  cc:	af 91       	pop	r26
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <millis>:

unsigned long millis()
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <millis+0x6>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <millis+0x8>
  e4:	0f 92       	push	r0
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG;
  ea:	8f e5       	ldi	r24, 0x5F	; 95
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	89 83       	std	Y+1, r24	; 0x01

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
  f4:	f8 94       	cli
	m = timer0_millis;
  f6:	80 91 00 00 	lds	r24, 0x0000
  fa:	90 91 00 00 	lds	r25, 0x0000
  fe:	a0 91 00 00 	lds	r26, 0x0000
 102:	b0 91 00 00 	lds	r27, 0x0000
 106:	8a 83       	std	Y+2, r24	; 0x02
 108:	9b 83       	std	Y+3, r25	; 0x03
 10a:	ac 83       	std	Y+4, r26	; 0x04
 10c:	bd 83       	std	Y+5, r27	; 0x05
	SREG = oldSREG;
 10e:	8f e5       	ldi	r24, 0x5F	; 95
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	29 81       	ldd	r18, Y+1	; 0x01
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18

	return m;
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	9b 81       	ldd	r25, Y+3	; 0x03
 11c:	ac 81       	ldd	r26, Y+4	; 0x04
 11e:	bd 81       	ldd	r27, Y+5	; 0x05
}
 120:	bc 01       	movw	r22, r24
 122:	cd 01       	movw	r24, r26
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <micros>:

unsigned long micros() {
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <micros+0x6>
 13a:	00 d0       	rcall	.+0      	; 0x13c <micros+0x8>
 13c:	00 d0       	rcall	.+0      	; 0x13e <micros+0xa>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 142:	8f e5       	ldi	r24, 0x5F	; 95
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	8d 83       	std	Y+5, r24	; 0x05
	
	cli();
 14c:	f8 94       	cli
	m = timer0_overflow_count;
 14e:	80 91 00 00 	lds	r24, 0x0000
 152:	90 91 00 00 	lds	r25, 0x0000
 156:	a0 91 00 00 	lds	r26, 0x0000
 15a:	b0 91 00 00 	lds	r27, 0x0000
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	ab 83       	std	Y+3, r26	; 0x03
 164:	bc 83       	std	Y+4, r27	; 0x04
#if defined(TCNT0)
	t = TCNT0;
 166:	86 e4       	ldi	r24, 0x46	; 70
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	8e 83       	std	Y+6, r24	; 0x06
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 170:	85 e3       	ldi	r24, 0x35	; 53
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	81 70       	andi	r24, 0x01	; 1
 17e:	90 70       	andi	r25, 0x00	; 0
 180:	88 23       	and	r24, r24
 182:	01 f0       	breq	.+0      	; 0x184 <micros+0x50>
 184:	8e 81       	ldd	r24, Y+6	; 0x06
 186:	8f 3f       	cpi	r24, 0xFF	; 255
 188:	01 f0       	breq	.+0      	; 0x18a <micros+0x56>
		m++;
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	ab 81       	ldd	r26, Y+3	; 0x03
 190:	bc 81       	ldd	r27, Y+4	; 0x04
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	a1 1d       	adc	r26, r1
 196:	b1 1d       	adc	r27, r1
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	9a 83       	std	Y+2, r25	; 0x02
 19c:	ab 83       	std	Y+3, r26	; 0x03
 19e:	bc 83       	std	Y+4, r27	; 0x04
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 1a0:	8f e5       	ldi	r24, 0x5F	; 95
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	2d 81       	ldd	r18, Y+5	; 0x05
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	9a 81       	ldd	r25, Y+2	; 0x02
 1ae:	ab 81       	ldd	r26, Y+3	; 0x03
 1b0:	bc 81       	ldd	r27, Y+4	; 0x04
 1b2:	22 27       	eor	r18, r18
 1b4:	38 2f       	mov	r19, r24
 1b6:	49 2f       	mov	r20, r25
 1b8:	5a 2f       	mov	r21, r26
 1ba:	8e 81       	ldd	r24, Y+6	; 0x06
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	a0 e0       	ldi	r26, 0x00	; 0
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	82 0f       	add	r24, r18
 1c6:	93 1f       	adc	r25, r19
 1c8:	a4 1f       	adc	r26, r20
 1ca:	b5 1f       	adc	r27, r21
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	aa 1f       	adc	r26, r26
 1da:	bb 1f       	adc	r27, r27
}
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	26 96       	adiw	r28, 0x06	; 6
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	cf 91       	pop	r28
 1ee:	df 91       	pop	r29
 1f0:	08 95       	ret

000001f2 <delay>:

void delay(unsigned long ms)
{
 1f2:	df 93       	push	r29
 1f4:	cf 93       	push	r28
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <delay+0x6>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <delay+0x8>
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <delay+0xa>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	6b 83       	std	Y+3, r22	; 0x03
 202:	7c 83       	std	Y+4, r23	; 0x04
 204:	8d 83       	std	Y+5, r24	; 0x05
 206:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t start = (uint16_t)micros();
 208:	0e 94 00 00 	call	0	; 0x0 <__vector_16>
 20c:	dc 01       	movw	r26, r24
 20e:	cb 01       	movw	r24, r22
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	89 83       	std	Y+1, r24	; 0x01

	while (ms > 0) {
 214:	00 c0       	rjmp	.+0      	; 0x216 <delay+0x24>
		if (((uint16_t)micros() - start) >= 1000) {
 216:	0e 94 00 00 	call	0	; 0x0 <__vector_16>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	9c 01       	movw	r18, r24
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	a9 01       	movw	r20, r18
 226:	48 1b       	sub	r20, r24
 228:	59 0b       	sbc	r21, r25
 22a:	ca 01       	movw	r24, r20
 22c:	53 e0       	ldi	r21, 0x03	; 3
 22e:	88 3e       	cpi	r24, 0xE8	; 232
 230:	95 07       	cpc	r25, r21
 232:	00 f0       	brcs	.+0      	; 0x234 <delay+0x42>
			ms--;
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	9c 81       	ldd	r25, Y+4	; 0x04
 238:	ad 81       	ldd	r26, Y+5	; 0x05
 23a:	be 81       	ldd	r27, Y+6	; 0x06
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	a1 09       	sbc	r26, r1
 240:	b1 09       	sbc	r27, r1
 242:	8b 83       	std	Y+3, r24	; 0x03
 244:	9c 83       	std	Y+4, r25	; 0x04
 246:	ad 83       	std	Y+5, r26	; 0x05
 248:	be 83       	std	Y+6, r27	; 0x06
			start += 1000;
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	88 51       	subi	r24, 0x18	; 24
 250:	9c 4f       	sbci	r25, 0xFC	; 252
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	89 83       	std	Y+1, r24	; 0x01

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	ad 81       	ldd	r26, Y+5	; 0x05
 25c:	be 81       	ldd	r27, Y+6	; 0x06
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	a1 05       	cpc	r26, r1
 262:	b1 05       	cpc	r27, r1
 264:	01 f4       	brne	.+0      	; 0x266 <delay+0x74>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 266:	26 96       	adiw	r28, 0x06	; 6
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	cf 91       	pop	r28
 274:	df 91       	pop	r29
 276:	08 95       	ret

00000278 <delayMicroseconds>:

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	00 d0       	rcall	.+0      	; 0x27e <delayMicroseconds+0x6>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	89 83       	std	Y+1, r24	; 0x01
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	01 f0       	breq	.+0      	; 0x298 <delayMicroseconds+0x20>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	9a 83       	std	Y+2, r25	; 0x02
 2a6:	89 83       	std	Y+1, r24	; 0x01

	// account for the time taken in the preceeding commands.
	us -= 2;
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	9a 81       	ldd	r25, Y+2	; 0x02
 2ac:	02 97       	sbiw	r24, 0x02	; 2
 2ae:	9a 83       	std	Y+2, r25	; 0x02
 2b0:	89 83       	std	Y+1, r24	; 0x01
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	9a 81       	ldd	r25, Y+2	; 0x02
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	01 f4       	brne	.+0      	; 0x2ba <delayMicroseconds+0x42>
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	89 83       	std	Y+1, r24	; 0x01
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <delayMicroseconds+0x48>
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
		return;
 2c0:	00 00       	nop
	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <init>:

void init()
{
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2d4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 2d6:	84 e4       	ldi	r24, 0x44	; 68
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	24 e4       	ldi	r18, 0x44	; 68
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	22 60       	ori	r18, 0x02	; 2
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
 2e8:	84 e4       	ldi	r24, 0x44	; 68
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	24 e4       	ldi	r18, 0x44	; 68
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	21 60       	ori	r18, 0x01	; 1
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 2fa:	85 e4       	ldi	r24, 0x45	; 69
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	25 e4       	ldi	r18, 0x45	; 69
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	22 60       	ori	r18, 0x02	; 2
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
 30c:	85 e4       	ldi	r24, 0x45	; 69
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	25 e4       	ldi	r18, 0x45	; 69
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	21 60       	ori	r18, 0x01	; 1
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 31e:	8e e6       	ldi	r24, 0x6E	; 110
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	2e e6       	ldi	r18, 0x6E	; 110
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	21 60       	ori	r18, 0x01	; 1
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 330:	81 e8       	ldi	r24, 0x81	; 129
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	fc 01       	movw	r30, r24
 336:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 338:	81 e8       	ldi	r24, 0x81	; 129
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	21 e8       	ldi	r18, 0x81	; 129
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	22 60       	ori	r18, 0x02	; 2
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 34a:	81 e8       	ldi	r24, 0x81	; 129
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	21 e8       	ldi	r18, 0x81	; 129
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	21 60       	ori	r18, 0x01	; 1
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	20 e8       	ldi	r18, 0x80	; 128
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	f9 01       	movw	r30, r18
 366:	20 81       	ld	r18, Z
 368:	21 60       	ori	r18, 0x01	; 1
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 36e:	81 eb       	ldi	r24, 0xB1	; 177
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	21 eb       	ldi	r18, 0xB1	; 177
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	f9 01       	movw	r30, r18
 378:	20 81       	ld	r18, Z
 37a:	24 60       	ori	r18, 0x04	; 4
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 380:	80 eb       	ldi	r24, 0xB0	; 176
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	20 eb       	ldi	r18, 0xB0	; 176
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	f9 01       	movw	r30, r18
 38a:	20 81       	ld	r18, Z
 38c:	21 60       	ori	r18, 0x01	; 1
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 392:	8a e7       	ldi	r24, 0x7A	; 122
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	2a e7       	ldi	r18, 0x7A	; 122
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	24 60       	ori	r18, 0x04	; 4
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
	sbi(ADCSRA, ADPS1);
 3a4:	8a e7       	ldi	r24, 0x7A	; 122
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	2a e7       	ldi	r18, 0x7A	; 122
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	f9 01       	movw	r30, r18
 3ae:	20 81       	ld	r18, Z
 3b0:	22 60       	ori	r18, 0x02	; 2
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
	sbi(ADCSRA, ADPS0);
 3b6:	8a e7       	ldi	r24, 0x7A	; 122
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	2a e7       	ldi	r18, 0x7A	; 122
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	21 60       	ori	r18, 0x01	; 1
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3c8:	8a e7       	ldi	r24, 0x7A	; 122
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	2a e7       	ldi	r18, 0x7A	; 122
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	f9 01       	movw	r30, r18
 3d2:	20 81       	ld	r18, Z
 3d4:	20 68       	ori	r18, 0x80	; 128
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3da:	81 ec       	ldi	r24, 0xC1	; 193
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	10 82       	st	Z, r1
#endif
}
 3e2:	cf 91       	pop	r28
 3e4:	df 91       	pop	r29
 3e6:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000010  00000000  00000000  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000027e  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00000280  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d40  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <analogReference>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	80 93 00 00 	sts	0x0000, r24
}
  12:	0f 90       	pop	r0
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

0000001a <analogRead>:

int analogRead(uint8_t pin)
{
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	00 d0       	rcall	.+0      	; 0x20 <analogRead+0x6>
  20:	0f 92       	push	r0
  22:	cd b7       	in	r28, 0x3d	; 61
  24:	de b7       	in	r29, 0x3e	; 62
  26:	8b 83       	std	Y+3, r24	; 0x03
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	8e 30       	cpi	r24, 0x0E	; 14
  2c:	00 f0       	brcs	.+0      	; 0x2e <analogRead+0x14>
  2e:	8b 81       	ldd	r24, Y+3	; 0x03
  30:	8e 50       	subi	r24, 0x0E	; 14
  32:	8b 83       	std	Y+3, r24	; 0x03
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
  34:	8c e7       	ldi	r24, 0x7C	; 124
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	20 91 00 00 	lds	r18, 0x0000
  3c:	22 2f       	mov	r18, r18
  3e:	30 e0       	ldi	r19, 0x00	; 0
  40:	00 24       	eor	r0, r0
  42:	36 95       	lsr	r19
  44:	27 95       	ror	r18
  46:	07 94       	ror	r0
  48:	36 95       	lsr	r19
  4a:	27 95       	ror	r18
  4c:	07 94       	ror	r0
  4e:	32 2f       	mov	r19, r18
  50:	20 2d       	mov	r18, r0
  52:	32 2f       	mov	r19, r18
  54:	2b 81       	ldd	r18, Y+3	; 0x03
  56:	27 70       	andi	r18, 0x07	; 7
  58:	23 2b       	or	r18, r19
  5a:	fc 01       	movw	r30, r24
  5c:	20 83       	st	Z, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
  5e:	8a e7       	ldi	r24, 0x7A	; 122
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	2a e7       	ldi	r18, 0x7A	; 122
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	f9 01       	movw	r30, r18
  68:	20 81       	ld	r18, Z
  6a:	20 64       	ori	r18, 0x40	; 64
  6c:	fc 01       	movw	r30, r24
  6e:	20 83       	st	Z, r18

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
  70:	00 00       	nop
  72:	8a e7       	ldi	r24, 0x7A	; 122
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	fc 01       	movw	r30, r24
  78:	80 81       	ld	r24, Z
  7a:	88 2f       	mov	r24, r24
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	80 74       	andi	r24, 0x40	; 64
  80:	90 70       	andi	r25, 0x00	; 0
  82:	00 97       	sbiw	r24, 0x00	; 0
  84:	01 f4       	brne	.+0      	; 0x86 <analogRead+0x6c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
  86:	88 e7       	ldi	r24, 0x78	; 120
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	80 81       	ld	r24, Z
  8e:	89 83       	std	Y+1, r24	; 0x01
	high = ADCH;
  90:	89 e7       	ldi	r24, 0x79	; 121
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	fc 01       	movw	r30, r24
  96:	80 81       	ld	r24, Z
  98:	8a 83       	std	Y+2, r24	; 0x02
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
  9a:	8a 81       	ldd	r24, Y+2	; 0x02
  9c:	88 2f       	mov	r24, r24
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	38 2f       	mov	r19, r24
  a2:	22 27       	eor	r18, r18
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	88 2f       	mov	r24, r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	82 2b       	or	r24, r18
  ac:	93 2b       	or	r25, r19
}
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

000000ba <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
  ba:	1f 93       	push	r17
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	00 d0       	rcall	.+0      	; 0xc2 <analogWrite+0x8>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <analogWrite+0xa>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <analogWrite+0xc>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	8c 83       	std	Y+4, r24	; 0x04
  cc:	7e 83       	std	Y+6, r23	; 0x06
  ce:	6d 83       	std	Y+5, r22	; 0x05
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
  d0:	8c 81       	ldd	r24, Y+4	; 0x04
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	0e 94 00 00 	call	0	; 0x0 <analogReference>
	if (val == 0)
  d8:	8d 81       	ldd	r24, Y+5	; 0x05
  da:	9e 81       	ldd	r25, Y+6	; 0x06
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	01 f4       	brne	.+0      	; 0xe0 <analogWrite+0x26>
	{
		digitalWrite(pin, LOW);
  e0:	8c 81       	ldd	r24, Y+4	; 0x04
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	0e 94 00 00 	call	0	; 0x0 <analogReference>
  e8:	00 c0       	rjmp	.+0      	; 0xea <analogWrite+0x30>
	}
	else if (val == 255)
  ea:	8d 81       	ldd	r24, Y+5	; 0x05
  ec:	9e 81       	ldd	r25, Y+6	; 0x06
  ee:	8f 3f       	cpi	r24, 0xFF	; 255
  f0:	91 05       	cpc	r25, r1
  f2:	01 f4       	brne	.+0      	; 0xf4 <analogWrite+0x3a>
	{
		digitalWrite(pin, HIGH);
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	0e 94 00 00 	call	0	; 0x0 <analogReference>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <analogWrite+0x44>
	}
	else
	{
		switch(digitalPinToTimer(pin))
  fe:	8c 81       	ldd	r24, Y+4	; 0x04
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	80 50       	subi	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	fc 01       	movw	r30, r24
 112:	14 91       	lpm	r17, Z
 114:	1b 83       	std	Y+3, r17	; 0x03
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	91 05       	cpc	r25, r1
 120:	01 f0       	breq	.+0      	; 0x122 <analogWrite+0x68>
 122:	84 30       	cpi	r24, 0x04	; 4
 124:	91 05       	cpc	r25, r1
 126:	04 f4       	brge	.+0      	; 0x128 <analogWrite+0x6e>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	91 05       	cpc	r25, r1
 12c:	01 f0       	breq	.+0      	; 0x12e <analogWrite+0x74>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	91 05       	cpc	r25, r1
 132:	01 f0       	breq	.+0      	; 0x134 <analogWrite+0x7a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <analogWrite+0x7c>
 136:	86 30       	cpi	r24, 0x06	; 6
 138:	91 05       	cpc	r25, r1
 13a:	01 f4       	brne	.+0      	; 0x13c <analogWrite+0x82>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <analogWrite+0x84>
 13e:	87 30       	cpi	r24, 0x07	; 7
 140:	91 05       	cpc	r25, r1
 142:	01 f4       	brne	.+0      	; 0x144 <analogWrite+0x8a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <analogWrite+0x8c>
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	91 05       	cpc	r25, r1
 14a:	01 f0       	breq	.+0      	; 0x14c <analogWrite+0x92>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <analogWrite+0x94>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 14e:	84 e4       	ldi	r24, 0x44	; 68
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	24 e4       	ldi	r18, 0x44	; 68
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	20 68       	ori	r18, 0x80	; 128
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
				OCR0A = val; // set pwm duty
 160:	87 e4       	ldi	r24, 0x47	; 71
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	2d 81       	ldd	r18, Y+5	; 0x05
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
				break;
 16a:	00 c0       	rjmp	.+0      	; 0x16c <analogWrite+0xb2>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 16c:	84 e4       	ldi	r24, 0x44	; 68
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	24 e4       	ldi	r18, 0x44	; 68
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	20 62       	ori	r18, 0x20	; 32
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
				OCR0B = val; // set pwm duty
 17e:	88 e4       	ldi	r24, 0x48	; 72
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	2d 81       	ldd	r18, Y+5	; 0x05
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
				break;
 188:	00 c0       	rjmp	.+0      	; 0x18a <analogWrite+0xd0>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	20 e8       	ldi	r18, 0x80	; 128
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	20 68       	ori	r18, 0x80	; 128
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
				OCR1A = val; // set pwm duty
 19c:	88 e8       	ldi	r24, 0x88	; 136
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2d 81       	ldd	r18, Y+5	; 0x05
 1a2:	3e 81       	ldd	r19, Y+6	; 0x06
 1a4:	fc 01       	movw	r30, r24
 1a6:	31 83       	std	Z+1, r19	; 0x01
 1a8:	20 83       	st	Z, r18
				break;
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <analogWrite+0xf2>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	20 e8       	ldi	r18, 0x80	; 128
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	20 62       	ori	r18, 0x20	; 32
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
				OCR1B = val; // set pwm duty
 1be:	8a e8       	ldi	r24, 0x8A	; 138
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	2d 81       	ldd	r18, Y+5	; 0x05
 1c4:	3e 81       	ldd	r19, Y+6	; 0x06
 1c6:	fc 01       	movw	r30, r24
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
				break;
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <analogWrite+0x114>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 1ce:	80 eb       	ldi	r24, 0xB0	; 176
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	20 eb       	ldi	r18, 0xB0	; 176
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	20 68       	ori	r18, 0x80	; 128
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
				OCR2A = val; // set pwm duty
 1e0:	83 eb       	ldi	r24, 0xB3	; 179
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2d 81       	ldd	r18, Y+5	; 0x05
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
				break;
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <analogWrite+0x132>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 1ec:	80 eb       	ldi	r24, 0xB0	; 176
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	20 eb       	ldi	r18, 0xB0	; 176
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	20 62       	ori	r18, 0x20	; 32
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
				OCR2B = val; // set pwm duty
 1fe:	84 eb       	ldi	r24, 0xB4	; 180
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	2d 81       	ldd	r18, Y+5	; 0x05
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
				break;
 208:	00 c0       	rjmp	.+0      	; 0x20a <analogWrite+0x150>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 20a:	8d 81       	ldd	r24, Y+5	; 0x05
 20c:	9e 81       	ldd	r25, Y+6	; 0x06
 20e:	80 38       	cpi	r24, 0x80	; 128
 210:	91 05       	cpc	r25, r1
 212:	04 f4       	brge	.+0      	; 0x214 <analogWrite+0x15a>
					digitalWrite(pin, LOW);
 214:	8c 81       	ldd	r24, Y+4	; 0x04
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <analogWrite+0x164>
				} else {
					digitalWrite(pin, HIGH);
 21e:	8c 81       	ldd	r24, Y+4	; 0x04
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	0e 94 00 00 	call	0	; 0x0 <analogReference>
				}
		}
	}
}
 226:	26 96       	adiw	r28, 0x06	; 6
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	1f 91       	pop	r17
 238:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003dc  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000041f  2**0
                  ALLOC
  3 .stab         00000bd0  00000000  00000000  00000420  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000fec  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 0000005a  00000000  00000000  00001fdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text:

00000000 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	89 8b       	std	Y+17, r24	; 0x11
  1e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t bit = digitalPinToBitMask(pin);
  20:	89 89       	ldd	r24, Y+17	; 0x11
  22:	88 2f       	mov	r24, r24
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	80 50       	subi	r24, 0x00	; 0
  28:	90 40       	sbci	r25, 0x00	; 0
  2a:	9a 83       	std	Y+2, r25	; 0x02
  2c:	89 83       	std	Y+1, r24	; 0x01
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	9a 81       	ldd	r25, Y+2	; 0x02
  32:	fc 01       	movw	r30, r24
  34:	14 91       	lpm	r17, Z
  36:	1b 83       	std	Y+3, r17	; 0x03
  38:	8b 81       	ldd	r24, Y+3	; 0x03
  3a:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
  3c:	89 89       	ldd	r24, Y+17	; 0x11
  3e:	88 2f       	mov	r24, r24
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	80 50       	subi	r24, 0x00	; 0
  44:	90 40       	sbci	r25, 0x00	; 0
  46:	9e 83       	std	Y+6, r25	; 0x06
  48:	8d 83       	std	Y+5, r24	; 0x05
  4a:	8d 81       	ldd	r24, Y+5	; 0x05
  4c:	9e 81       	ldd	r25, Y+6	; 0x06
  4e:	fc 01       	movw	r30, r24
  50:	14 91       	lpm	r17, Z
  52:	1f 83       	std	Y+7, r17	; 0x07
  54:	8f 81       	ldd	r24, Y+7	; 0x07
  56:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
  58:	88 85       	ldd	r24, Y+8	; 0x08
  5a:	88 23       	and	r24, r24
  5c:	01 f4       	brne	.+0      	; 0x5e <pinMode+0x5e>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pinMode+0x60>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  60:	88 85       	ldd	r24, Y+8	; 0x08
  62:	88 2f       	mov	r24, r24
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	88 0f       	add	r24, r24
  68:	99 1f       	adc	r25, r25
  6a:	80 50       	subi	r24, 0x00	; 0
  6c:	90 40       	sbci	r25, 0x00	; 0
  6e:	9a 87       	std	Y+10, r25	; 0x0a
  70:	89 87       	std	Y+9, r24	; 0x09
  72:	89 85       	ldd	r24, Y+9	; 0x09
  74:	9a 85       	ldd	r25, Y+10	; 0x0a
  76:	8c 01       	movw	r16, r24
  78:	f8 01       	movw	r30, r16
  7a:	e5 90       	lpm	r14, Z+
  7c:	f4 90       	lpm	r15, Z
  7e:	8f 01       	movw	r16, r30
  80:	fc 86       	std	Y+12, r15	; 0x0c
  82:	eb 86       	std	Y+11, r14	; 0x0b
  84:	1a 87       	std	Y+10, r17	; 0x0a
  86:	09 87       	std	Y+9, r16	; 0x09
  88:	8b 85       	ldd	r24, Y+11	; 0x0b
  8a:	9c 85       	ldd	r25, Y+12	; 0x0c
  8c:	9e 87       	std	Y+14, r25	; 0x0e
  8e:	8d 87       	std	Y+13, r24	; 0x0d

	if (mode == INPUT) { 
  90:	8a 89       	ldd	r24, Y+18	; 0x12
  92:	88 23       	and	r24, r24
  94:	01 f4       	brne	.+0      	; 0x96 <pinMode+0x96>
		uint8_t oldSREG = SREG;
  96:	8f e5       	ldi	r24, 0x5F	; 95
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	fc 01       	movw	r30, r24
  9c:	80 81       	ld	r24, Z
  9e:	8f 87       	std	Y+15, r24	; 0x0f
                cli();
  a0:	f8 94       	cli
		*reg &= ~bit;
  a2:	8d 85       	ldd	r24, Y+13	; 0x0d
  a4:	9e 85       	ldd	r25, Y+14	; 0x0e
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	98 2f       	mov	r25, r24
  ac:	8c 81       	ldd	r24, Y+4	; 0x04
  ae:	80 95       	com	r24
  b0:	89 23       	and	r24, r25
  b2:	28 2f       	mov	r18, r24
  b4:	8d 85       	ldd	r24, Y+13	; 0x0d
  b6:	9e 85       	ldd	r25, Y+14	; 0x0e
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
		SREG = oldSREG;
  bc:	8f e5       	ldi	r24, 0x5F	; 95
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f 85       	ldd	r18, Y+15	; 0x0f
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <pinMode+0xc8>
	} else {
		uint8_t oldSREG = SREG;
  c8:	8f e5       	ldi	r24, 0x5F	; 95
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	80 81       	ld	r24, Z
  d0:	88 8b       	std	Y+16, r24	; 0x10
                cli();
  d2:	f8 94       	cli
		*reg |= bit;
  d4:	8d 85       	ldd	r24, Y+13	; 0x0d
  d6:	9e 85       	ldd	r25, Y+14	; 0x0e
  d8:	fc 01       	movw	r30, r24
  da:	90 81       	ld	r25, Z
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	29 2f       	mov	r18, r25
  e0:	28 2b       	or	r18, r24
  e2:	8d 85       	ldd	r24, Y+13	; 0x0d
  e4:	9e 85       	ldd	r25, Y+14	; 0x0e
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
		SREG = oldSREG;
  ea:	8f e5       	ldi	r24, 0x5F	; 95
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	28 89       	ldd	r18, Y+16	; 0x10
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <pinMode+0xf6>
{
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
  f6:	00 00       	nop
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
  f8:	62 96       	adiw	r28, 0x12	; 18
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	cf 91       	pop	r28
 106:	df 91       	pop	r29
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	08 95       	ret

00000112 <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	0f 92       	push	r0
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	91 05       	cpc	r25, r1
 128:	01 f0       	breq	.+0      	; 0x12a <turnOffPWM+0x18>
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	91 05       	cpc	r25, r1
 12e:	04 f4       	brge	.+0      	; 0x130 <turnOffPWM+0x1e>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 05       	cpc	r25, r1
 134:	01 f0       	breq	.+0      	; 0x136 <turnOffPWM+0x24>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	91 05       	cpc	r25, r1
 13a:	01 f0       	breq	.+0      	; 0x13c <turnOffPWM+0x2a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <turnOffPWM+0x2c>
 13e:	86 30       	cpi	r24, 0x06	; 6
 140:	91 05       	cpc	r25, r1
 142:	01 f0       	breq	.+0      	; 0x144 <turnOffPWM+0x32>
 144:	87 30       	cpi	r24, 0x07	; 7
 146:	91 05       	cpc	r25, r1
 148:	01 f0       	breq	.+0      	; 0x14a <turnOffPWM+0x38>
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	91 05       	cpc	r25, r1
 14e:	01 f0       	breq	.+0      	; 0x150 <turnOffPWM+0x3e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <turnOffPWM+0x40>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	20 e8       	ldi	r18, 0x80	; 128
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	20 81       	ld	r18, Z
 15e:	2f 77       	andi	r18, 0x7F	; 127
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 164:	00 c0       	rjmp	.+0      	; 0x166 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	20 e8       	ldi	r18, 0x80	; 128
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	2f 7d       	andi	r18, 0xDF	; 223
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	00 c0       	rjmp	.+0      	; 0x17a <turnOffPWM+0x68>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 17a:	84 e4       	ldi	r24, 0x44	; 68
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	24 e4       	ldi	r18, 0x44	; 68
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	2f 77       	andi	r18, 0x7F	; 127
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	00 c0       	rjmp	.+0      	; 0x18e <turnOffPWM+0x7c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 18e:	84 e4       	ldi	r24, 0x44	; 68
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	24 e4       	ldi	r18, 0x44	; 68
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	2f 7d       	andi	r18, 0xDF	; 223
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <turnOffPWM+0x90>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1a2:	80 eb       	ldi	r24, 0xB0	; 176
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	20 eb       	ldi	r18, 0xB0	; 176
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <turnOffPWM+0xa4>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1b6:	80 eb       	ldi	r24, 0xB0	; 176
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	20 eb       	ldi	r18, 0xB0	; 176
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	20 81       	ld	r18, Z
 1c2:	2f 7d       	andi	r18, 0xDF	; 223
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
 1c8:	00 00       	nop
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
 1ca:	0f 90       	pop	r0
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	df 93       	push	r29
 1dc:	cf 93       	push	r28
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	65 97       	sbiw	r28, 0x15	; 21
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	8c 8b       	std	Y+20, r24	; 0x14
 1f0:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
 1f2:	8c 89       	ldd	r24, Y+20	; 0x14
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	80 50       	subi	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	89 83       	std	Y+1, r24	; 0x01
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	fc 01       	movw	r30, r24
 206:	14 91       	lpm	r17, Z
 208:	1b 83       	std	Y+3, r17	; 0x03
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
 20e:	8c 89       	ldd	r24, Y+20	; 0x14
 210:	88 2f       	mov	r24, r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	80 50       	subi	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	9e 83       	std	Y+6, r25	; 0x06
 21a:	8d 83       	std	Y+5, r24	; 0x05
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	9e 81       	ldd	r25, Y+6	; 0x06
 220:	fc 01       	movw	r30, r24
 222:	14 91       	lpm	r17, Z
 224:	1f 83       	std	Y+7, r17	; 0x07
 226:	8f 81       	ldd	r24, Y+7	; 0x07
 228:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
 22a:	8c 89       	ldd	r24, Y+20	; 0x14
 22c:	88 2f       	mov	r24, r24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	80 50       	subi	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	9a 87       	std	Y+10, r25	; 0x0a
 236:	89 87       	std	Y+9, r24	; 0x09
 238:	89 85       	ldd	r24, Y+9	; 0x09
 23a:	9a 85       	ldd	r25, Y+10	; 0x0a
 23c:	fc 01       	movw	r30, r24
 23e:	14 91       	lpm	r17, Z
 240:	1b 87       	std	Y+11, r17	; 0x0b
 242:	8b 85       	ldd	r24, Y+11	; 0x0b
 244:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 246:	8c 85       	ldd	r24, Y+12	; 0x0c
 248:	88 23       	and	r24, r24
 24a:	01 f4       	brne	.+0      	; 0x24c <digitalWrite+0x7a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <digitalWrite+0x7c>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 24e:	8c 81       	ldd	r24, Y+4	; 0x04
 250:	88 23       	and	r24, r24
 252:	01 f0       	breq	.+0      	; 0x254 <digitalWrite+0x82>
 254:	8c 81       	ldd	r24, Y+4	; 0x04
 256:	0e 94 00 00 	call	0	; 0x0 <pinMode>

	out = portOutputRegister(port);
 25a:	8c 85       	ldd	r24, Y+12	; 0x0c
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	80 50       	subi	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	9e 87       	std	Y+14, r25	; 0x0e
 26a:	8d 87       	std	Y+13, r24	; 0x0d
 26c:	8d 85       	ldd	r24, Y+13	; 0x0d
 26e:	9e 85       	ldd	r25, Y+14	; 0x0e
 270:	8c 01       	movw	r16, r24
 272:	f8 01       	movw	r30, r16
 274:	e5 90       	lpm	r14, Z+
 276:	f4 90       	lpm	r15, Z
 278:	8f 01       	movw	r16, r30
 27a:	f8 8a       	std	Y+16, r15	; 0x10
 27c:	ef 86       	std	Y+15, r14	; 0x0f
 27e:	1e 87       	std	Y+14, r17	; 0x0e
 280:	0d 87       	std	Y+13, r16	; 0x0d
 282:	8f 85       	ldd	r24, Y+15	; 0x0f
 284:	98 89       	ldd	r25, Y+16	; 0x10
 286:	9a 8b       	std	Y+18, r25	; 0x12
 288:	89 8b       	std	Y+17, r24	; 0x11

	uint8_t oldSREG = SREG;
 28a:	8f e5       	ldi	r24, 0x5F	; 95
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	80 81       	ld	r24, Z
 292:	8b 8b       	std	Y+19, r24	; 0x13
	cli();
 294:	f8 94       	cli

	if (val == LOW) {
 296:	8d 89       	ldd	r24, Y+21	; 0x15
 298:	88 23       	and	r24, r24
 29a:	01 f4       	brne	.+0      	; 0x29c <digitalWrite+0xca>
		*out &= ~bit;
 29c:	89 89       	ldd	r24, Y+17	; 0x11
 29e:	9a 89       	ldd	r25, Y+18	; 0x12
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	98 2f       	mov	r25, r24
 2a6:	88 85       	ldd	r24, Y+8	; 0x08
 2a8:	80 95       	com	r24
 2aa:	89 23       	and	r24, r25
 2ac:	28 2f       	mov	r18, r24
 2ae:	89 89       	ldd	r24, Y+17	; 0x11
 2b0:	9a 89       	ldd	r25, Y+18	; 0x12
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <digitalWrite+0xe6>
	} else {
		*out |= bit;
 2b8:	89 89       	ldd	r24, Y+17	; 0x11
 2ba:	9a 89       	ldd	r25, Y+18	; 0x12
 2bc:	fc 01       	movw	r30, r24
 2be:	90 81       	ld	r25, Z
 2c0:	88 85       	ldd	r24, Y+8	; 0x08
 2c2:	29 2f       	mov	r18, r25
 2c4:	28 2b       	or	r18, r24
 2c6:	89 89       	ldd	r24, Y+17	; 0x11
 2c8:	9a 89       	ldd	r25, Y+18	; 0x12
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
	}

	SREG = oldSREG;
 2ce:	8f e5       	ldi	r24, 0x5F	; 95
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	2b 89       	ldd	r18, Y+19	; 0x13
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <digitalWrite+0x108>
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 2da:	00 00       	nop
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
}
 2dc:	65 96       	adiw	r28, 0x15	; 21
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	cf 91       	pop	r28
 2ea:	df 91       	pop	r29
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	08 95       	ret

000002f6 <digitalRead>:

int digitalRead(uint8_t pin)
{
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	df 93       	push	r29
 300:	cf 93       	push	r28
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	61 97       	sbiw	r28, 0x11	; 17
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
 312:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t timer = digitalPinToTimer(pin);
 314:	89 89       	ldd	r24, Y+17	; 0x11
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	80 50       	subi	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	9a 83       	std	Y+2, r25	; 0x02
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	9a 81       	ldd	r25, Y+2	; 0x02
 326:	fc 01       	movw	r30, r24
 328:	14 91       	lpm	r17, Z
 32a:	1b 83       	std	Y+3, r17	; 0x03
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
 330:	89 89       	ldd	r24, Y+17	; 0x11
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	80 50       	subi	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	9e 83       	std	Y+6, r25	; 0x06
 33c:	8d 83       	std	Y+5, r24	; 0x05
 33e:	8d 81       	ldd	r24, Y+5	; 0x05
 340:	9e 81       	ldd	r25, Y+6	; 0x06
 342:	fc 01       	movw	r30, r24
 344:	14 91       	lpm	r17, Z
 346:	1f 83       	std	Y+7, r17	; 0x07
 348:	8f 81       	ldd	r24, Y+7	; 0x07
 34a:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
 34c:	89 89       	ldd	r24, Y+17	; 0x11
 34e:	88 2f       	mov	r24, r24
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	80 50       	subi	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	9a 87       	std	Y+10, r25	; 0x0a
 358:	89 87       	std	Y+9, r24	; 0x09
 35a:	89 85       	ldd	r24, Y+9	; 0x09
 35c:	9a 85       	ldd	r25, Y+10	; 0x0a
 35e:	fc 01       	movw	r30, r24
 360:	14 91       	lpm	r17, Z
 362:	1b 87       	std	Y+11, r17	; 0x0b
 364:	8b 85       	ldd	r24, Y+11	; 0x0b
 366:	8c 87       	std	Y+12, r24	; 0x0c

	if (port == NOT_A_PIN) return LOW;
 368:	8c 85       	ldd	r24, Y+12	; 0x0c
 36a:	88 23       	and	r24, r24
 36c:	01 f4       	brne	.+0      	; 0x36e <digitalRead+0x78>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	00 c0       	rjmp	.+0      	; 0x374 <digitalRead+0x7e>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	88 23       	and	r24, r24
 378:	01 f0       	breq	.+0      	; 0x37a <digitalRead+0x84>
 37a:	8c 81       	ldd	r24, Y+4	; 0x04
 37c:	0e 94 00 00 	call	0	; 0x0 <pinMode>

	if (*portInputRegister(port) & bit) return HIGH;
 380:	8c 85       	ldd	r24, Y+12	; 0x0c
 382:	88 2f       	mov	r24, r24
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	80 50       	subi	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	9e 87       	std	Y+14, r25	; 0x0e
 390:	8d 87       	std	Y+13, r24	; 0x0d
 392:	8d 85       	ldd	r24, Y+13	; 0x0d
 394:	9e 85       	ldd	r25, Y+14	; 0x0e
 396:	8c 01       	movw	r16, r24
 398:	f8 01       	movw	r30, r16
 39a:	e5 90       	lpm	r14, Z+
 39c:	f4 90       	lpm	r15, Z
 39e:	8f 01       	movw	r16, r30
 3a0:	f8 8a       	std	Y+16, r15	; 0x10
 3a2:	ef 86       	std	Y+15, r14	; 0x0f
 3a4:	1e 87       	std	Y+14, r17	; 0x0e
 3a6:	0d 87       	std	Y+13, r16	; 0x0d
 3a8:	8f 85       	ldd	r24, Y+15	; 0x0f
 3aa:	98 89       	ldd	r25, Y+16	; 0x10
 3ac:	fc 01       	movw	r30, r24
 3ae:	90 81       	ld	r25, Z
 3b0:	88 85       	ldd	r24, Y+8	; 0x08
 3b2:	89 23       	and	r24, r25
 3b4:	88 23       	and	r24, r24
 3b6:	01 f0       	breq	.+0      	; 0x3b8 <digitalRead+0xc2>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <digitalRead+0xc8>
	return LOW;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
}
 3c2:	61 96       	adiw	r28, 0x11	; 17
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	cf 91       	pop	r28
 3d0:	df 91       	pop	r29
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002e1  2**0
                  ALLOC
  3 .stab         0000081c  00000000  00000000  000002e4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000da3  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a7 97       	sbiw	r28, 0x27	; 39
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8a a3       	std	Y+34, r24	; 0x22
  1e:	6b a3       	std	Y+35, r22	; 0x23
  20:	2c a3       	std	Y+36, r18	; 0x24
  22:	3d a3       	std	Y+37, r19	; 0x25
  24:	4e a3       	std	Y+38, r20	; 0x26
  26:	5f a3       	std	Y+39, r21	; 0x27
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  28:	8a a1       	ldd	r24, Y+34	; 0x22
  2a:	88 2f       	mov	r24, r24
  2c:	90 e0       	ldi	r25, 0x00	; 0
  2e:	80 50       	subi	r24, 0x00	; 0
  30:	90 40       	sbci	r25, 0x00	; 0
  32:	9a 87       	std	Y+10, r25	; 0x0a
  34:	89 87       	std	Y+9, r24	; 0x09
  36:	89 85       	ldd	r24, Y+9	; 0x09
  38:	9a 85       	ldd	r25, Y+10	; 0x0a
  3a:	fc 01       	movw	r30, r24
  3c:	14 91       	lpm	r17, Z
  3e:	1b 87       	std	Y+11, r17	; 0x0b
  40:	8b 85       	ldd	r24, Y+11	; 0x0b
  42:	8c 87       	std	Y+12, r24	; 0x0c
	uint8_t port = digitalPinToPort(pin);
  44:	8a a1       	ldd	r24, Y+34	; 0x22
  46:	88 2f       	mov	r24, r24
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	80 50       	subi	r24, 0x00	; 0
  4c:	90 40       	sbci	r25, 0x00	; 0
  4e:	9e 87       	std	Y+14, r25	; 0x0e
  50:	8d 87       	std	Y+13, r24	; 0x0d
  52:	8d 85       	ldd	r24, Y+13	; 0x0d
  54:	9e 85       	ldd	r25, Y+14	; 0x0e
  56:	fc 01       	movw	r30, r24
  58:	14 91       	lpm	r17, Z
  5a:	1f 87       	std	Y+15, r17	; 0x0f
  5c:	8f 85       	ldd	r24, Y+15	; 0x0f
  5e:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t stateMask = (state ? bit : 0);
  60:	8b a1       	ldd	r24, Y+35	; 0x23
  62:	88 23       	and	r24, r24
  64:	01 f0       	breq	.+0      	; 0x66 <pulseIn+0x66>
  66:	8c 85       	ldd	r24, Y+12	; 0x0c
  68:	00 c0       	rjmp	.+0      	; 0x6a <pulseIn+0x6a>
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	89 8b       	std	Y+17, r24	; 0x11
	unsigned long width = 0; // keep initialization out of time critical area
  6e:	19 82       	std	Y+1, r1	; 0x01
  70:	1a 82       	std	Y+2, r1	; 0x02
  72:	1b 82       	std	Y+3, r1	; 0x03
  74:	1c 82       	std	Y+4, r1	; 0x04
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  76:	1d 82       	std	Y+5, r1	; 0x05
  78:	1e 82       	std	Y+6, r1	; 0x06
  7a:	1f 82       	std	Y+7, r1	; 0x07
  7c:	18 86       	std	Y+8, r1	; 0x08
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  7e:	8c a1       	ldd	r24, Y+36	; 0x24
  80:	9d a1       	ldd	r25, Y+37	; 0x25
  82:	ae a1       	ldd	r26, Y+38	; 0x26
  84:	bf a1       	ldd	r27, Y+39	; 0x27
  86:	20 e8       	ldi	r18, 0x80	; 128
  88:	3e e3       	ldi	r19, 0x3E	; 62
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	bc 01       	movw	r22, r24
  90:	cd 01       	movw	r24, r26
  92:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  96:	dc 01       	movw	r26, r24
  98:	cb 01       	movw	r24, r22
  9a:	20 e8       	ldi	r18, 0x80	; 128
  9c:	3e e3       	ldi	r19, 0x3E	; 62
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	bc 01       	movw	r22, r24
  a4:	cd 01       	movw	r24, r26
  a6:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  aa:	2a 8b       	std	Y+18, r18	; 0x12
  ac:	3b 8b       	std	Y+19, r19	; 0x13
  ae:	4c 8b       	std	Y+20, r20	; 0x14
  b0:	5d 8b       	std	Y+21, r21	; 0x15
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <pulseIn+0xb4>
		if (numloops++ == maxloops)
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	2d 81       	ldd	r18, Y+5	; 0x05
  b8:	3e 81       	ldd	r19, Y+6	; 0x06
  ba:	4f 81       	ldd	r20, Y+7	; 0x07
  bc:	58 85       	ldd	r21, Y+8	; 0x08
  be:	8a 89       	ldd	r24, Y+18	; 0x12
  c0:	9b 89       	ldd	r25, Y+19	; 0x13
  c2:	ac 89       	ldd	r26, Y+20	; 0x14
  c4:	bd 89       	ldd	r27, Y+21	; 0x15
  c6:	28 17       	cp	r18, r24
  c8:	39 07       	cpc	r19, r25
  ca:	4a 07       	cpc	r20, r26
  cc:	5b 07       	cpc	r21, r27
  ce:	01 f0       	breq	.+0      	; 0xd0 <pulseIn+0xd0>
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	8d 81       	ldd	r24, Y+5	; 0x05
  d4:	9e 81       	ldd	r25, Y+6	; 0x06
  d6:	af 81       	ldd	r26, Y+7	; 0x07
  d8:	b8 85       	ldd	r27, Y+8	; 0x08
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	a1 1d       	adc	r26, r1
  de:	b1 1d       	adc	r27, r1
  e0:	8d 83       	std	Y+5, r24	; 0x05
  e2:	9e 83       	std	Y+6, r25	; 0x06
  e4:	af 83       	std	Y+7, r26	; 0x07
  e6:	b8 87       	std	Y+8, r27	; 0x08
  e8:	66 23       	and	r22, r22
  ea:	01 f0       	breq	.+0      	; 0xec <pulseIn+0xec>
			return 0;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <pulseIn+0xf6>
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  f6:	88 89       	ldd	r24, Y+16	; 0x10
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	80 50       	subi	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	9f 8b       	std	Y+23, r25	; 0x17
 106:	8e 8b       	std	Y+22, r24	; 0x16
 108:	8e 89       	ldd	r24, Y+22	; 0x16
 10a:	9f 89       	ldd	r25, Y+23	; 0x17
 10c:	8c 01       	movw	r16, r24
 10e:	f8 01       	movw	r30, r16
 110:	e5 90       	lpm	r14, Z+
 112:	f4 90       	lpm	r15, Z
 114:	8f 01       	movw	r16, r30
 116:	f9 8e       	std	Y+25, r15	; 0x19
 118:	e8 8e       	std	Y+24, r14	; 0x18
 11a:	1f 8b       	std	Y+23, r17	; 0x17
 11c:	0e 8b       	std	Y+22, r16	; 0x16
 11e:	88 8d       	ldd	r24, Y+24	; 0x18
 120:	99 8d       	ldd	r25, Y+25	; 0x19
 122:	fc 01       	movw	r30, r24
 124:	90 81       	ld	r25, Z
 126:	8c 85       	ldd	r24, Y+12	; 0x0c
 128:	98 23       	and	r25, r24
 12a:	89 89       	ldd	r24, Y+17	; 0x11
 12c:	98 17       	cp	r25, r24
 12e:	01 f4       	brne	.+0      	; 0x130 <pulseIn+0x130>
 130:	00 c0       	rjmp	.+0      	; 0x132 <pulseIn+0x132>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
 132:	00 c0       	rjmp	.+0      	; 0x134 <pulseIn+0x134>
		if (numloops++ == maxloops)
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	2d 81       	ldd	r18, Y+5	; 0x05
 138:	3e 81       	ldd	r19, Y+6	; 0x06
 13a:	4f 81       	ldd	r20, Y+7	; 0x07
 13c:	58 85       	ldd	r21, Y+8	; 0x08
 13e:	8a 89       	ldd	r24, Y+18	; 0x12
 140:	9b 89       	ldd	r25, Y+19	; 0x13
 142:	ac 89       	ldd	r26, Y+20	; 0x14
 144:	bd 89       	ldd	r27, Y+21	; 0x15
 146:	28 17       	cp	r18, r24
 148:	39 07       	cpc	r19, r25
 14a:	4a 07       	cpc	r20, r26
 14c:	5b 07       	cpc	r21, r27
 14e:	01 f0       	breq	.+0      	; 0x150 <pulseIn+0x150>
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	8d 81       	ldd	r24, Y+5	; 0x05
 154:	9e 81       	ldd	r25, Y+6	; 0x06
 156:	af 81       	ldd	r26, Y+7	; 0x07
 158:	b8 85       	ldd	r27, Y+8	; 0x08
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	a1 1d       	adc	r26, r1
 15e:	b1 1d       	adc	r27, r1
 160:	8d 83       	std	Y+5, r24	; 0x05
 162:	9e 83       	std	Y+6, r25	; 0x06
 164:	af 83       	std	Y+7, r26	; 0x07
 166:	b8 87       	std	Y+8, r27	; 0x08
 168:	66 23       	and	r22, r22
 16a:	01 f0       	breq	.+0      	; 0x16c <pulseIn+0x16c>
			return 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	00 c0       	rjmp	.+0      	; 0x176 <pulseIn+0x176>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
 176:	88 89       	ldd	r24, Y+16	; 0x10
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	80 50       	subi	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	9b 8f       	std	Y+27, r25	; 0x1b
 186:	8a 8f       	std	Y+26, r24	; 0x1a
 188:	8a 8d       	ldd	r24, Y+26	; 0x1a
 18a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 18c:	8c 01       	movw	r16, r24
 18e:	f8 01       	movw	r30, r16
 190:	e5 90       	lpm	r14, Z+
 192:	f4 90       	lpm	r15, Z
 194:	8f 01       	movw	r16, r30
 196:	fd 8e       	std	Y+29, r15	; 0x1d
 198:	ec 8e       	std	Y+28, r14	; 0x1c
 19a:	1b 8f       	std	Y+27, r17	; 0x1b
 19c:	0a 8f       	std	Y+26, r16	; 0x1a
 19e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
 1a2:	fc 01       	movw	r30, r24
 1a4:	90 81       	ld	r25, Z
 1a6:	8c 85       	ldd	r24, Y+12	; 0x0c
 1a8:	98 23       	and	r25, r24
 1aa:	89 89       	ldd	r24, Y+17	; 0x11
 1ac:	98 17       	cp	r25, r24
 1ae:	01 f0       	breq	.+0      	; 0x1b0 <pulseIn+0x1b0>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <pulseIn+0x1b2>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <pulseIn+0x1b4>
		if (numloops++ == maxloops)
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	4f 81       	ldd	r20, Y+7	; 0x07
 1bc:	58 85       	ldd	r21, Y+8	; 0x08
 1be:	8a 89       	ldd	r24, Y+18	; 0x12
 1c0:	9b 89       	ldd	r25, Y+19	; 0x13
 1c2:	ac 89       	ldd	r26, Y+20	; 0x14
 1c4:	bd 89       	ldd	r27, Y+21	; 0x15
 1c6:	28 17       	cp	r18, r24
 1c8:	39 07       	cpc	r19, r25
 1ca:	4a 07       	cpc	r20, r26
 1cc:	5b 07       	cpc	r21, r27
 1ce:	01 f0       	breq	.+0      	; 0x1d0 <pulseIn+0x1d0>
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	8d 81       	ldd	r24, Y+5	; 0x05
 1d4:	9e 81       	ldd	r25, Y+6	; 0x06
 1d6:	af 81       	ldd	r26, Y+7	; 0x07
 1d8:	b8 85       	ldd	r27, Y+8	; 0x08
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	a1 1d       	adc	r26, r1
 1de:	b1 1d       	adc	r27, r1
 1e0:	8d 83       	std	Y+5, r24	; 0x05
 1e2:	9e 83       	std	Y+6, r25	; 0x06
 1e4:	af 83       	std	Y+7, r26	; 0x07
 1e6:	b8 87       	std	Y+8, r27	; 0x08
 1e8:	66 23       	and	r22, r22
 1ea:	01 f0       	breq	.+0      	; 0x1ec <pulseIn+0x1ec>
			return 0;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	a0 e0       	ldi	r26, 0x00	; 0
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <pulseIn+0x1f6>
		width++;
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	ab 81       	ldd	r26, Y+3	; 0x03
 1fc:	bc 81       	ldd	r27, Y+4	; 0x04
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	ab 83       	std	Y+3, r26	; 0x03
 20a:	bc 83       	std	Y+4, r27	; 0x04
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
 20c:	88 89       	ldd	r24, Y+16	; 0x10
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	80 50       	subi	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	9f 8f       	std	Y+31, r25	; 0x1f
 21c:	8e 8f       	std	Y+30, r24	; 0x1e
 21e:	8e 8d       	ldd	r24, Y+30	; 0x1e
 220:	9f 8d       	ldd	r25, Y+31	; 0x1f
 222:	8c 01       	movw	r16, r24
 224:	f8 01       	movw	r30, r16
 226:	e5 90       	lpm	r14, Z+
 228:	f4 90       	lpm	r15, Z
 22a:	8f 01       	movw	r16, r30
 22c:	f9 a2       	std	Y+33, r15	; 0x21
 22e:	e8 a2       	std	Y+32, r14	; 0x20
 230:	1f 8f       	std	Y+31, r17	; 0x1f
 232:	0e 8f       	std	Y+30, r16	; 0x1e
 234:	88 a1       	ldd	r24, Y+32	; 0x20
 236:	99 a1       	ldd	r25, Y+33	; 0x21
 238:	fc 01       	movw	r30, r24
 23a:	90 81       	ld	r25, Z
 23c:	8c 85       	ldd	r24, Y+12	; 0x0c
 23e:	98 23       	and	r25, r24
 240:	89 89       	ldd	r24, Y+17	; 0x11
 242:	98 17       	cp	r25, r24
 244:	01 f4       	brne	.+0      	; 0x246 <pulseIn+0x246>
 246:	00 c0       	rjmp	.+0      	; 0x248 <pulseIn+0x248>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	ab 81       	ldd	r26, Y+3	; 0x03
 24e:	bc 81       	ldd	r27, Y+4	; 0x04
 250:	28 e0       	ldi	r18, 0x08	; 8
 252:	32 e5       	ldi	r19, 0x52	; 82
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 260:	dc 01       	movw	r26, r24
 262:	cb 01       	movw	r24, r22
 264:	80 58       	subi	r24, 0x80	; 128
 266:	91 4c       	sbci	r25, 0xC1	; 193
 268:	af 4f       	sbci	r26, 0xFF	; 255
 26a:	bf 4f       	sbci	r27, 0xFF	; 255
 26c:	20 e8       	ldi	r18, 0x80	; 128
 26e:	3e e3       	ldi	r19, 0x3E	; 62
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	bc 01       	movw	r22, r24
 276:	cd 01       	movw	r24, r26
 278:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 27c:	da 01       	movw	r26, r20
 27e:	c9 01       	movw	r24, r18
}
 280:	bc 01       	movw	r22, r24
 282:	cd 01       	movw	r24, r26
 284:	a7 96       	adiw	r28, 0x27	; 39
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	cf 91       	pop	r28
 292:	df 91       	pop	r29
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000f  00000000  00000000  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000017b  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  0000017c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d2d  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <shiftIn+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <shiftIn+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	6c 83       	std	Y+4, r22	; 0x04
  12:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t value = 0;
  14:	19 82       	std	Y+1, r1	; 0x01
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  16:	1a 82       	std	Y+2, r1	; 0x02
  18:	00 c0       	rjmp	.+0      	; 0x1a <shiftIn+0x1a>
		digitalWrite(clockPin, HIGH);
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	61 e0       	ldi	r22, 0x01	; 1
  1e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  22:	8d 81       	ldd	r24, Y+5	; 0x05
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <shiftIn+0x28>
			value |= digitalRead(dataPin) << i;
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  2e:	2a 81       	ldd	r18, Y+2	; 0x02
  30:	22 2f       	mov	r18, r18
  32:	30 e0       	ldi	r19, 0x00	; 0
  34:	02 2e       	mov	r0, r18
  36:	00 c0       	rjmp	.+0      	; 0x38 <shiftIn+0x38>
  38:	88 0f       	add	r24, r24
  3a:	99 1f       	adc	r25, r25
  3c:	0a 94       	dec	r0
  3e:	02 f4       	brpl	.+0      	; 0x40 <shiftIn+0x40>
  40:	98 2f       	mov	r25, r24
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	89 2b       	or	r24, r25
  46:	89 83       	std	Y+1, r24	; 0x01
  48:	00 c0       	rjmp	.+0      	; 0x4a <shiftIn+0x4a>
		else
			value |= digitalRead(dataPin) << (7 - i);
  4a:	8b 81       	ldd	r24, Y+3	; 0x03
  4c:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  50:	2a 81       	ldd	r18, Y+2	; 0x02
  52:	22 2f       	mov	r18, r18
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	47 e0       	ldi	r20, 0x07	; 7
  58:	50 e0       	ldi	r21, 0x00	; 0
  5a:	ba 01       	movw	r22, r20
  5c:	62 1b       	sub	r22, r18
  5e:	73 0b       	sbc	r23, r19
  60:	9b 01       	movw	r18, r22
  62:	00 c0       	rjmp	.+0      	; 0x64 <shiftIn+0x64>
  64:	88 0f       	add	r24, r24
  66:	99 1f       	adc	r25, r25
  68:	2a 95       	dec	r18
  6a:	02 f4       	brpl	.+0      	; 0x6c <shiftIn+0x6c>
  6c:	98 2f       	mov	r25, r24
  6e:	89 81       	ldd	r24, Y+1	; 0x01
  70:	89 2b       	or	r24, r25
  72:	89 83       	std	Y+1, r24	; 0x01
		digitalWrite(clockPin, LOW);
  74:	8c 81       	ldd	r24, Y+4	; 0x04
  76:	60 e0       	ldi	r22, 0x00	; 0
  78:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  7c:	8a 81       	ldd	r24, Y+2	; 0x02
  7e:	8f 5f       	subi	r24, 0xFF	; 255
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	8a 81       	ldd	r24, Y+2	; 0x02
  84:	88 30       	cpi	r24, 0x08	; 8
  86:	00 f0       	brcs	.+0      	; 0x88 <shiftIn+0x88>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
  88:	89 81       	ldd	r24, Y+1	; 0x01
}
  8a:	0f 90       	pop	r0
  8c:	0f 90       	pop	r0
  8e:	0f 90       	pop	r0
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	00 d0       	rcall	.+0      	; 0xa0 <shiftOut+0x6>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <shiftOut+0x8>
  a2:	0f 92       	push	r0
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	8a 83       	std	Y+2, r24	; 0x02
  aa:	6b 83       	std	Y+3, r22	; 0x03
  ac:	4c 83       	std	Y+4, r20	; 0x04
  ae:	2d 83       	std	Y+5, r18	; 0x05
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  b0:	19 82       	std	Y+1, r1	; 0x01
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <shiftOut+0x1a>
		if (bitOrder == LSBFIRST)
  b4:	8c 81       	ldd	r24, Y+4	; 0x04
  b6:	88 23       	and	r24, r24
  b8:	01 f4       	brne	.+0      	; 0xba <shiftOut+0x20>
			digitalWrite(dataPin, !!(val & (1 << i)));
  ba:	8d 81       	ldd	r24, Y+5	; 0x05
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	29 81       	ldd	r18, Y+1	; 0x01
  c2:	22 2f       	mov	r18, r18
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <shiftOut+0x2e>
  c8:	95 95       	asr	r25
  ca:	87 95       	ror	r24
  cc:	2a 95       	dec	r18
  ce:	02 f4       	brpl	.+0      	; 0xd0 <shiftOut+0x36>
  d0:	98 2f       	mov	r25, r24
  d2:	91 70       	andi	r25, 0x01	; 1
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	69 2f       	mov	r22, r25
  d8:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  dc:	00 c0       	rjmp	.+0      	; 0xde <shiftOut+0x44>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	88 2f       	mov	r24, r24
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	29 81       	ldd	r18, Y+1	; 0x01
  e6:	22 2f       	mov	r18, r18
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	47 e0       	ldi	r20, 0x07	; 7
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	ba 01       	movw	r22, r20
  f0:	62 1b       	sub	r22, r18
  f2:	73 0b       	sbc	r23, r19
  f4:	9b 01       	movw	r18, r22
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <shiftOut+0x5e>
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	2a 95       	dec	r18
  fe:	02 f4       	brpl	.+0      	; 0x100 <shiftOut+0x66>
 100:	98 2f       	mov	r25, r24
 102:	91 70       	andi	r25, 0x01	; 1
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	69 2f       	mov	r22, r25
 108:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
			
		digitalWrite(clockPin, HIGH);
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		digitalWrite(clockPin, LOW);		
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	00 f0       	brcs	.+0      	; 0x128 <shiftOut+0x8e>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret
